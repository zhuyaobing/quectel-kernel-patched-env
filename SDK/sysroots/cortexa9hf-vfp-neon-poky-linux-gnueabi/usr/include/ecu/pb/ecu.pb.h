// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecu.proto

#ifndef PROTOBUF_ecu_2eproto__INCLUDED
#define PROTOBUF_ecu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ecu_2eproto();
void protobuf_AssignDesc_ecu_2eproto();
void protobuf_ShutdownFile_ecu_2eproto();

class EcuState;
class EcuShutdownStatus;
class EcuShutdownPostpone;
class EcuShutdownRequest;

enum EcuState_State {
  EcuState_State_UNKNOWN = 0,
  EcuState_State_STARTUP = 1,
  EcuState_State_OPERATING = 2,
  EcuState_State_SHUTDOWN = 3,
  EcuState_State_STARTUP_TO_OPERATING = 4,
  EcuState_State_OPERATING_TO_SHUTDOWN = 5,
  EcuState_State_SHUTDOWN_TO_OPERATING = 6,
  EcuState_State_NACHLAUFZEIT = 7
};
bool EcuState_State_IsValid(int value);
const EcuState_State EcuState_State_State_MIN = EcuState_State_UNKNOWN;
const EcuState_State EcuState_State_State_MAX = EcuState_State_NACHLAUFZEIT;
const int EcuState_State_State_ARRAYSIZE = EcuState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* EcuState_State_descriptor();
inline const ::std::string& EcuState_State_Name(EcuState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    EcuState_State_descriptor(), value);
}
inline bool EcuState_State_Parse(
    const ::std::string& name, EcuState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EcuState_State>(
    EcuState_State_descriptor(), name, value);
}
enum EcuShutdownStatus_State {
  EcuShutdownStatus_State_UNKNOWN = 0,
  EcuShutdownStatus_State_OPERATING = 1,
  EcuShutdownStatus_State_SHUTDOWN_PENDING = 2,
  EcuShutdownStatus_State_SHUTDOWN_POSTPONED = 3,
  EcuShutdownStatus_State_SHUTDOWN_IMMINENT = 4
};
bool EcuShutdownStatus_State_IsValid(int value);
const EcuShutdownStatus_State EcuShutdownStatus_State_State_MIN = EcuShutdownStatus_State_UNKNOWN;
const EcuShutdownStatus_State EcuShutdownStatus_State_State_MAX = EcuShutdownStatus_State_SHUTDOWN_IMMINENT;
const int EcuShutdownStatus_State_State_ARRAYSIZE = EcuShutdownStatus_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* EcuShutdownStatus_State_descriptor();
inline const ::std::string& EcuShutdownStatus_State_Name(EcuShutdownStatus_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    EcuShutdownStatus_State_descriptor(), value);
}
inline bool EcuShutdownStatus_State_Parse(
    const ::std::string& name, EcuShutdownStatus_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EcuShutdownStatus_State>(
    EcuShutdownStatus_State_descriptor(), name, value);
}
enum EcuShutdownStatus_Cause {
  EcuShutdownStatus_Cause_UNSPECIFIED = 0,
  EcuShutdownStatus_Cause_NACHLAUFZEIT = 1,
  EcuShutdownStatus_Cause_SW_UPDATE = 2,
  EcuShutdownStatus_Cause_APP_REQUEST = 3
};
bool EcuShutdownStatus_Cause_IsValid(int value);
const EcuShutdownStatus_Cause EcuShutdownStatus_Cause_Cause_MIN = EcuShutdownStatus_Cause_UNSPECIFIED;
const EcuShutdownStatus_Cause EcuShutdownStatus_Cause_Cause_MAX = EcuShutdownStatus_Cause_APP_REQUEST;
const int EcuShutdownStatus_Cause_Cause_ARRAYSIZE = EcuShutdownStatus_Cause_Cause_MAX + 1;

const ::google::protobuf::EnumDescriptor* EcuShutdownStatus_Cause_descriptor();
inline const ::std::string& EcuShutdownStatus_Cause_Name(EcuShutdownStatus_Cause value) {
  return ::google::protobuf::internal::NameOfEnum(
    EcuShutdownStatus_Cause_descriptor(), value);
}
inline bool EcuShutdownStatus_Cause_Parse(
    const ::std::string& name, EcuShutdownStatus_Cause* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EcuShutdownStatus_Cause>(
    EcuShutdownStatus_Cause_descriptor(), name, value);
}
// ===================================================================

class EcuState : public ::google::protobuf::Message {
 public:
  EcuState();
  virtual ~EcuState();

  EcuState(const EcuState& from);

  inline EcuState& operator=(const EcuState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EcuState& default_instance();

  void Swap(EcuState* other);

  // implements Message ----------------------------------------------

  EcuState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EcuState& from);
  void MergeFrom(const EcuState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EcuState_State State;
  static const State UNKNOWN = EcuState_State_UNKNOWN;
  static const State STARTUP = EcuState_State_STARTUP;
  static const State OPERATING = EcuState_State_OPERATING;
  static const State SHUTDOWN = EcuState_State_SHUTDOWN;
  static const State STARTUP_TO_OPERATING = EcuState_State_STARTUP_TO_OPERATING;
  static const State OPERATING_TO_SHUTDOWN = EcuState_State_OPERATING_TO_SHUTDOWN;
  static const State SHUTDOWN_TO_OPERATING = EcuState_State_SHUTDOWN_TO_OPERATING;
  static const State NACHLAUFZEIT = EcuState_State_NACHLAUFZEIT;
  static inline bool State_IsValid(int value) {
    return EcuState_State_IsValid(value);
  }
  static const State State_MIN =
    EcuState_State_State_MIN;
  static const State State_MAX =
    EcuState_State_State_MAX;
  static const int State_ARRAYSIZE =
    EcuState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return EcuState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return EcuState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return EcuState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.EcuState.State state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::ecu::lapi::pb::EcuState_State state() const;
  inline void set_state(::ecu::lapi::pb::EcuState_State value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.EcuState)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int state_;
  friend void  protobuf_AddDesc_ecu_2eproto();
  friend void protobuf_AssignDesc_ecu_2eproto();
  friend void protobuf_ShutdownFile_ecu_2eproto();

  void InitAsDefaultInstance();
  static EcuState* default_instance_;
};
// -------------------------------------------------------------------

class EcuShutdownStatus : public ::google::protobuf::Message {
 public:
  EcuShutdownStatus();
  virtual ~EcuShutdownStatus();

  EcuShutdownStatus(const EcuShutdownStatus& from);

  inline EcuShutdownStatus& operator=(const EcuShutdownStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EcuShutdownStatus& default_instance();

  void Swap(EcuShutdownStatus* other);

  // implements Message ----------------------------------------------

  EcuShutdownStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EcuShutdownStatus& from);
  void MergeFrom(const EcuShutdownStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EcuShutdownStatus_State State;
  static const State UNKNOWN = EcuShutdownStatus_State_UNKNOWN;
  static const State OPERATING = EcuShutdownStatus_State_OPERATING;
  static const State SHUTDOWN_PENDING = EcuShutdownStatus_State_SHUTDOWN_PENDING;
  static const State SHUTDOWN_POSTPONED = EcuShutdownStatus_State_SHUTDOWN_POSTPONED;
  static const State SHUTDOWN_IMMINENT = EcuShutdownStatus_State_SHUTDOWN_IMMINENT;
  static inline bool State_IsValid(int value) {
    return EcuShutdownStatus_State_IsValid(value);
  }
  static const State State_MIN =
    EcuShutdownStatus_State_State_MIN;
  static const State State_MAX =
    EcuShutdownStatus_State_State_MAX;
  static const int State_ARRAYSIZE =
    EcuShutdownStatus_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return EcuShutdownStatus_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return EcuShutdownStatus_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return EcuShutdownStatus_State_Parse(name, value);
  }

  typedef EcuShutdownStatus_Cause Cause;
  static const Cause UNSPECIFIED = EcuShutdownStatus_Cause_UNSPECIFIED;
  static const Cause NACHLAUFZEIT = EcuShutdownStatus_Cause_NACHLAUFZEIT;
  static const Cause SW_UPDATE = EcuShutdownStatus_Cause_SW_UPDATE;
  static const Cause APP_REQUEST = EcuShutdownStatus_Cause_APP_REQUEST;
  static inline bool Cause_IsValid(int value) {
    return EcuShutdownStatus_Cause_IsValid(value);
  }
  static const Cause Cause_MIN =
    EcuShutdownStatus_Cause_Cause_MIN;
  static const Cause Cause_MAX =
    EcuShutdownStatus_Cause_Cause_MAX;
  static const int Cause_ARRAYSIZE =
    EcuShutdownStatus_Cause_Cause_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cause_descriptor() {
    return EcuShutdownStatus_Cause_descriptor();
  }
  static inline const ::std::string& Cause_Name(Cause value) {
    return EcuShutdownStatus_Cause_Name(value);
  }
  static inline bool Cause_Parse(const ::std::string& name,
      Cause* value) {
    return EcuShutdownStatus_Cause_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.EcuShutdownStatus.State state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::ecu::lapi::pb::EcuShutdownStatus_State state() const;
  inline void set_state(::ecu::lapi::pb::EcuShutdownStatus_State value);

  // optional .ecu.lapi.pb.EcuShutdownStatus.Cause cause = 2;
  inline bool has_cause() const;
  inline void clear_cause();
  static const int kCauseFieldNumber = 2;
  inline ::ecu::lapi::pb::EcuShutdownStatus_Cause cause() const;
  inline void set_cause(::ecu::lapi::pb::EcuShutdownStatus_Cause value);

  // optional uint64 time_triggered = 3;
  inline bool has_time_triggered() const;
  inline void clear_time_triggered();
  static const int kTimeTriggeredFieldNumber = 3;
  inline ::google::protobuf::uint64 time_triggered() const;
  inline void set_time_triggered(::google::protobuf::uint64 value);

  // optional uint64 time_imminent = 5;
  inline bool has_time_imminent() const;
  inline void clear_time_imminent();
  static const int kTimeImminentFieldNumber = 5;
  inline ::google::protobuf::uint64 time_imminent() const;
  inline void set_time_imminent(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.EcuShutdownStatus)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cause();
  inline void clear_has_cause();
  inline void set_has_time_triggered();
  inline void clear_has_time_triggered();
  inline void set_has_time_imminent();
  inline void clear_has_time_imminent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int state_;
  int cause_;
  ::google::protobuf::uint64 time_triggered_;
  ::google::protobuf::uint64 time_imminent_;
  friend void  protobuf_AddDesc_ecu_2eproto();
  friend void protobuf_AssignDesc_ecu_2eproto();
  friend void protobuf_ShutdownFile_ecu_2eproto();

  void InitAsDefaultInstance();
  static EcuShutdownStatus* default_instance_;
};
// -------------------------------------------------------------------

class EcuShutdownPostpone : public ::google::protobuf::Message {
 public:
  EcuShutdownPostpone();
  virtual ~EcuShutdownPostpone();

  EcuShutdownPostpone(const EcuShutdownPostpone& from);

  inline EcuShutdownPostpone& operator=(const EcuShutdownPostpone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EcuShutdownPostpone& default_instance();

  void Swap(EcuShutdownPostpone* other);

  // implements Message ----------------------------------------------

  EcuShutdownPostpone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EcuShutdownPostpone& from);
  void MergeFrom(const EcuShutdownPostpone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string client_name = 1;
  inline bool has_client_name() const;
  inline void clear_client_name();
  static const int kClientNameFieldNumber = 1;
  inline const ::std::string& client_name() const;
  inline void set_client_name(const ::std::string& value);
  inline void set_client_name(const char* value);
  inline void set_client_name(const char* value, size_t size);
  inline ::std::string* mutable_client_name();
  inline ::std::string* release_client_name();
  inline void set_allocated_client_name(::std::string* client_name);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.EcuShutdownPostpone)
 private:
  inline void set_has_client_name();
  inline void clear_has_client_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* client_name_;
  friend void  protobuf_AddDesc_ecu_2eproto();
  friend void protobuf_AssignDesc_ecu_2eproto();
  friend void protobuf_ShutdownFile_ecu_2eproto();

  void InitAsDefaultInstance();
  static EcuShutdownPostpone* default_instance_;
};
// -------------------------------------------------------------------

class EcuShutdownRequest : public ::google::protobuf::Message {
 public:
  EcuShutdownRequest();
  virtual ~EcuShutdownRequest();

  EcuShutdownRequest(const EcuShutdownRequest& from);

  inline EcuShutdownRequest& operator=(const EcuShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EcuShutdownRequest& default_instance();

  void Swap(EcuShutdownRequest* other);

  // implements Message ----------------------------------------------

  EcuShutdownRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EcuShutdownRequest& from);
  void MergeFrom(const EcuShutdownRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string client_name = 1;
  inline bool has_client_name() const;
  inline void clear_client_name();
  static const int kClientNameFieldNumber = 1;
  inline const ::std::string& client_name() const;
  inline void set_client_name(const ::std::string& value);
  inline void set_client_name(const char* value);
  inline void set_client_name(const char* value, size_t size);
  inline ::std::string* mutable_client_name();
  inline ::std::string* release_client_name();
  inline void set_allocated_client_name(::std::string* client_name);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.EcuShutdownRequest)
 private:
  inline void set_has_client_name();
  inline void clear_has_client_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* client_name_;
  friend void  protobuf_AddDesc_ecu_2eproto();
  friend void protobuf_AssignDesc_ecu_2eproto();
  friend void protobuf_ShutdownFile_ecu_2eproto();

  void InitAsDefaultInstance();
  static EcuShutdownRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// EcuState

// optional .ecu.lapi.pb.EcuState.State state = 1;
inline bool EcuState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EcuState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EcuState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EcuState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::ecu::lapi::pb::EcuState_State EcuState::state() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.EcuState.state)
  return static_cast< ::ecu::lapi::pb::EcuState_State >(state_);
}
inline void EcuState::set_state(::ecu::lapi::pb::EcuState_State value) {
  assert(::ecu::lapi::pb::EcuState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.EcuState.state)
}

// -------------------------------------------------------------------

// EcuShutdownStatus

// optional .ecu.lapi.pb.EcuShutdownStatus.State state = 1;
inline bool EcuShutdownStatus::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EcuShutdownStatus::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EcuShutdownStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EcuShutdownStatus::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::ecu::lapi::pb::EcuShutdownStatus_State EcuShutdownStatus::state() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.EcuShutdownStatus.state)
  return static_cast< ::ecu::lapi::pb::EcuShutdownStatus_State >(state_);
}
inline void EcuShutdownStatus::set_state(::ecu::lapi::pb::EcuShutdownStatus_State value) {
  assert(::ecu::lapi::pb::EcuShutdownStatus_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.EcuShutdownStatus.state)
}

// optional .ecu.lapi.pb.EcuShutdownStatus.Cause cause = 2;
inline bool EcuShutdownStatus::has_cause() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EcuShutdownStatus::set_has_cause() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EcuShutdownStatus::clear_has_cause() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EcuShutdownStatus::clear_cause() {
  cause_ = 0;
  clear_has_cause();
}
inline ::ecu::lapi::pb::EcuShutdownStatus_Cause EcuShutdownStatus::cause() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.EcuShutdownStatus.cause)
  return static_cast< ::ecu::lapi::pb::EcuShutdownStatus_Cause >(cause_);
}
inline void EcuShutdownStatus::set_cause(::ecu::lapi::pb::EcuShutdownStatus_Cause value) {
  assert(::ecu::lapi::pb::EcuShutdownStatus_Cause_IsValid(value));
  set_has_cause();
  cause_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.EcuShutdownStatus.cause)
}

// optional uint64 time_triggered = 3;
inline bool EcuShutdownStatus::has_time_triggered() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EcuShutdownStatus::set_has_time_triggered() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EcuShutdownStatus::clear_has_time_triggered() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EcuShutdownStatus::clear_time_triggered() {
  time_triggered_ = GOOGLE_ULONGLONG(0);
  clear_has_time_triggered();
}
inline ::google::protobuf::uint64 EcuShutdownStatus::time_triggered() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.EcuShutdownStatus.time_triggered)
  return time_triggered_;
}
inline void EcuShutdownStatus::set_time_triggered(::google::protobuf::uint64 value) {
  set_has_time_triggered();
  time_triggered_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.EcuShutdownStatus.time_triggered)
}

// optional uint64 time_imminent = 5;
inline bool EcuShutdownStatus::has_time_imminent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EcuShutdownStatus::set_has_time_imminent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EcuShutdownStatus::clear_has_time_imminent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EcuShutdownStatus::clear_time_imminent() {
  time_imminent_ = GOOGLE_ULONGLONG(0);
  clear_has_time_imminent();
}
inline ::google::protobuf::uint64 EcuShutdownStatus::time_imminent() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.EcuShutdownStatus.time_imminent)
  return time_imminent_;
}
inline void EcuShutdownStatus::set_time_imminent(::google::protobuf::uint64 value) {
  set_has_time_imminent();
  time_imminent_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.EcuShutdownStatus.time_imminent)
}

// -------------------------------------------------------------------

// EcuShutdownPostpone

// optional string client_name = 1;
inline bool EcuShutdownPostpone::has_client_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EcuShutdownPostpone::set_has_client_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EcuShutdownPostpone::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EcuShutdownPostpone::clear_client_name() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_->clear();
  }
  clear_has_client_name();
}
inline const ::std::string& EcuShutdownPostpone::client_name() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.EcuShutdownPostpone.client_name)
  return *client_name_;
}
inline void EcuShutdownPostpone::set_client_name(const ::std::string& value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.EcuShutdownPostpone.client_name)
}
inline void EcuShutdownPostpone::set_client_name(const char* value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.EcuShutdownPostpone.client_name)
}
inline void EcuShutdownPostpone::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.EcuShutdownPostpone.client_name)
}
inline ::std::string* EcuShutdownPostpone::mutable_client_name() {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.EcuShutdownPostpone.client_name)
  return client_name_;
}
inline ::std::string* EcuShutdownPostpone::release_client_name() {
  clear_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_name_;
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EcuShutdownPostpone::set_allocated_client_name(::std::string* client_name) {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (client_name) {
    set_has_client_name();
    client_name_ = client_name;
  } else {
    clear_has_client_name();
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.EcuShutdownPostpone.client_name)
}

// -------------------------------------------------------------------

// EcuShutdownRequest

// optional string client_name = 1;
inline bool EcuShutdownRequest::has_client_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EcuShutdownRequest::set_has_client_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EcuShutdownRequest::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EcuShutdownRequest::clear_client_name() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_->clear();
  }
  clear_has_client_name();
}
inline const ::std::string& EcuShutdownRequest::client_name() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.EcuShutdownRequest.client_name)
  return *client_name_;
}
inline void EcuShutdownRequest::set_client_name(const ::std::string& value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.EcuShutdownRequest.client_name)
}
inline void EcuShutdownRequest::set_client_name(const char* value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.EcuShutdownRequest.client_name)
}
inline void EcuShutdownRequest::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.EcuShutdownRequest.client_name)
}
inline ::std::string* EcuShutdownRequest::mutable_client_name() {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.EcuShutdownRequest.client_name)
  return client_name_;
}
inline ::std::string* EcuShutdownRequest::release_client_name() {
  clear_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_name_;
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EcuShutdownRequest::set_allocated_client_name(::std::string* client_name) {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (client_name) {
    set_has_client_name();
    client_name_ = client_name;
  } else {
    clear_has_client_name();
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.EcuShutdownRequest.client_name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecu::lapi::pb::EcuState_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::EcuState_State>() {
  return ::ecu::lapi::pb::EcuState_State_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::EcuShutdownStatus_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::EcuShutdownStatus_State>() {
  return ::ecu::lapi::pb::EcuShutdownStatus_State_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::EcuShutdownStatus_Cause> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::EcuShutdownStatus_Cause>() {
  return ::ecu::lapi::pb::EcuShutdownStatus_Cause_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ecu_2eproto__INCLUDED

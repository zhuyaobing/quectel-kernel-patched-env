// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class RtSignal;
class SubscriptionMessage;
class SubscriptionStatus;

// ===================================================================

class RtSignal : public ::google::protobuf::Message {
 public:
  RtSignal();
  virtual ~RtSignal();

  RtSignal(const RtSignal& from);

  inline RtSignal& operator=(const RtSignal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RtSignal& default_instance();

  void Swap(RtSignal* other);

  // implements Message ----------------------------------------------

  RtSignal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtSignal& from);
  void MergeFrom(const RtSignal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional string originator = 4;
  inline bool has_originator() const;
  inline void clear_originator();
  static const int kOriginatorFieldNumber = 4;
  inline const ::std::string& originator() const;
  inline void set_originator(const ::std::string& value);
  inline void set_originator(const char* value);
  inline void set_originator(const char* value, size_t size);
  inline ::std::string* mutable_originator();
  inline ::std::string* release_originator();
  inline void set_allocated_originator(::std::string* originator);

  // repeated string set_signals = 5;
  inline int set_signals_size() const;
  inline void clear_set_signals();
  static const int kSetSignalsFieldNumber = 5;
  inline const ::std::string& set_signals(int index) const;
  inline ::std::string* mutable_set_signals(int index);
  inline void set_set_signals(int index, const ::std::string& value);
  inline void set_set_signals(int index, const char* value);
  inline void set_set_signals(int index, const char* value, size_t size);
  inline ::std::string* add_set_signals();
  inline void add_set_signals(const ::std::string& value);
  inline void add_set_signals(const char* value);
  inline void add_set_signals(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& set_signals() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_set_signals();

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.RtSignal)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_originator();
  inline void clear_has_originator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* data_;
  ::std::string* originator_;
  ::google::protobuf::RepeatedPtrField< ::std::string> set_signals_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RtSignal* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionMessage : public ::google::protobuf::Message {
 public:
  SubscriptionMessage();
  virtual ~SubscriptionMessage();

  SubscriptionMessage(const SubscriptionMessage& from);

  inline SubscriptionMessage& operator=(const SubscriptionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionMessage& default_instance();

  void Swap(SubscriptionMessage* other);

  // implements Message ----------------------------------------------

  SubscriptionMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionMessage& from);
  void MergeFrom(const SubscriptionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topics = 1;
  inline int topics_size() const;
  inline void clear_topics();
  static const int kTopicsFieldNumber = 1;
  inline const ::std::string& topics(int index) const;
  inline ::std::string* mutable_topics(int index);
  inline void set_topics(int index, const ::std::string& value);
  inline void set_topics(int index, const char* value);
  inline void set_topics(int index, const char* value, size_t size);
  inline ::std::string* add_topics();
  inline void add_topics(const ::std::string& value);
  inline void add_topics(const char* value);
  inline void add_topics(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topics() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics();

  // optional string client_name = 2;
  inline bool has_client_name() const;
  inline void clear_client_name();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& client_name() const;
  inline void set_client_name(const ::std::string& value);
  inline void set_client_name(const char* value);
  inline void set_client_name(const char* value, size_t size);
  inline ::std::string* mutable_client_name();
  inline ::std::string* release_client_name();
  inline void set_allocated_client_name(::std::string* client_name);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.SubscriptionMessage)
 private:
  inline void set_has_client_name();
  inline void clear_has_client_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_;
  ::std::string* client_name_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static SubscriptionMessage* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionStatus : public ::google::protobuf::Message {
 public:
  SubscriptionStatus();
  virtual ~SubscriptionStatus();

  SubscriptionStatus(const SubscriptionStatus& from);

  inline SubscriptionStatus& operator=(const SubscriptionStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionStatus& default_instance();

  void Swap(SubscriptionStatus* other);

  // implements Message ----------------------------------------------

  SubscriptionStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionStatus& from);
  void MergeFrom(const SubscriptionStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topics = 1;
  inline int topics_size() const;
  inline void clear_topics();
  static const int kTopicsFieldNumber = 1;
  inline const ::std::string& topics(int index) const;
  inline ::std::string* mutable_topics(int index);
  inline void set_topics(int index, const ::std::string& value);
  inline void set_topics(int index, const char* value);
  inline void set_topics(int index, const char* value, size_t size);
  inline ::std::string* add_topics();
  inline void add_topics(const ::std::string& value);
  inline void add_topics(const char* value);
  inline void add_topics(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topics() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics();

  // optional uint32 num_available_topics = 2;
  inline bool has_num_available_topics() const;
  inline void clear_num_available_topics();
  static const int kNumAvailableTopicsFieldNumber = 2;
  inline ::google::protobuf::uint32 num_available_topics() const;
  inline void set_num_available_topics(::google::protobuf::uint32 value);

  // optional uint32 num_subscribed_topics = 3;
  inline bool has_num_subscribed_topics() const;
  inline void clear_num_subscribed_topics();
  static const int kNumSubscribedTopicsFieldNumber = 3;
  inline ::google::protobuf::uint32 num_subscribed_topics() const;
  inline void set_num_subscribed_topics(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.SubscriptionStatus)
 private:
  inline void set_has_num_available_topics();
  inline void clear_has_num_available_topics();
  inline void set_has_num_subscribed_topics();
  inline void clear_has_num_subscribed_topics();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_;
  ::google::protobuf::uint32 num_available_topics_;
  ::google::protobuf::uint32 num_subscribed_topics_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static SubscriptionStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// RtSignal

// optional uint64 timestamp = 1;
inline bool RtSignal::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtSignal::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtSignal::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtSignal::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 RtSignal::timestamp() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.RtSignal.timestamp)
  return timestamp_;
}
inline void RtSignal::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.RtSignal.timestamp)
}

// optional bytes data = 2;
inline bool RtSignal::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtSignal::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtSignal::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtSignal::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& RtSignal::data() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.RtSignal.data)
  return *data_;
}
inline void RtSignal::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.RtSignal.data)
}
inline void RtSignal::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.RtSignal.data)
}
inline void RtSignal::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.RtSignal.data)
}
inline ::std::string* RtSignal::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.RtSignal.data)
  return data_;
}
inline ::std::string* RtSignal::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RtSignal::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.RtSignal.data)
}

// optional uint32 status = 3;
inline bool RtSignal::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtSignal::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtSignal::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtSignal::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 RtSignal::status() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.RtSignal.status)
  return status_;
}
inline void RtSignal::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.RtSignal.status)
}

// optional string originator = 4;
inline bool RtSignal::has_originator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtSignal::set_has_originator() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtSignal::clear_has_originator() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtSignal::clear_originator() {
  if (originator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originator_->clear();
  }
  clear_has_originator();
}
inline const ::std::string& RtSignal::originator() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.RtSignal.originator)
  return *originator_;
}
inline void RtSignal::set_originator(const ::std::string& value) {
  set_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originator_ = new ::std::string;
  }
  originator_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.RtSignal.originator)
}
inline void RtSignal::set_originator(const char* value) {
  set_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originator_ = new ::std::string;
  }
  originator_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.RtSignal.originator)
}
inline void RtSignal::set_originator(const char* value, size_t size) {
  set_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originator_ = new ::std::string;
  }
  originator_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.RtSignal.originator)
}
inline ::std::string* RtSignal::mutable_originator() {
  set_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originator_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.RtSignal.originator)
  return originator_;
}
inline ::std::string* RtSignal::release_originator() {
  clear_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = originator_;
    originator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RtSignal::set_allocated_originator(::std::string* originator) {
  if (originator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete originator_;
  }
  if (originator) {
    set_has_originator();
    originator_ = originator;
  } else {
    clear_has_originator();
    originator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.RtSignal.originator)
}

// repeated string set_signals = 5;
inline int RtSignal::set_signals_size() const {
  return set_signals_.size();
}
inline void RtSignal::clear_set_signals() {
  set_signals_.Clear();
}
inline const ::std::string& RtSignal::set_signals(int index) const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.RtSignal.set_signals)
  return set_signals_.Get(index);
}
inline ::std::string* RtSignal::mutable_set_signals(int index) {
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.RtSignal.set_signals)
  return set_signals_.Mutable(index);
}
inline void RtSignal::set_set_signals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.RtSignal.set_signals)
  set_signals_.Mutable(index)->assign(value);
}
inline void RtSignal::set_set_signals(int index, const char* value) {
  set_signals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.RtSignal.set_signals)
}
inline void RtSignal::set_set_signals(int index, const char* value, size_t size) {
  set_signals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.RtSignal.set_signals)
}
inline ::std::string* RtSignal::add_set_signals() {
  return set_signals_.Add();
}
inline void RtSignal::add_set_signals(const ::std::string& value) {
  set_signals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecu.lapi.pb.RtSignal.set_signals)
}
inline void RtSignal::add_set_signals(const char* value) {
  set_signals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecu.lapi.pb.RtSignal.set_signals)
}
inline void RtSignal::add_set_signals(const char* value, size_t size) {
  set_signals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecu.lapi.pb.RtSignal.set_signals)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RtSignal::set_signals() const {
  // @@protoc_insertion_point(field_list:ecu.lapi.pb.RtSignal.set_signals)
  return set_signals_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RtSignal::mutable_set_signals() {
  // @@protoc_insertion_point(field_mutable_list:ecu.lapi.pb.RtSignal.set_signals)
  return &set_signals_;
}

// -------------------------------------------------------------------

// SubscriptionMessage

// repeated string topics = 1;
inline int SubscriptionMessage::topics_size() const {
  return topics_.size();
}
inline void SubscriptionMessage::clear_topics() {
  topics_.Clear();
}
inline const ::std::string& SubscriptionMessage::topics(int index) const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SubscriptionMessage.topics)
  return topics_.Get(index);
}
inline ::std::string* SubscriptionMessage::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.SubscriptionMessage.topics)
  return topics_.Mutable(index);
}
inline void SubscriptionMessage::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SubscriptionMessage.topics)
  topics_.Mutable(index)->assign(value);
}
inline void SubscriptionMessage::set_topics(int index, const char* value) {
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.SubscriptionMessage.topics)
}
inline void SubscriptionMessage::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.SubscriptionMessage.topics)
}
inline ::std::string* SubscriptionMessage::add_topics() {
  return topics_.Add();
}
inline void SubscriptionMessage::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecu.lapi.pb.SubscriptionMessage.topics)
}
inline void SubscriptionMessage::add_topics(const char* value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecu.lapi.pb.SubscriptionMessage.topics)
}
inline void SubscriptionMessage::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecu.lapi.pb.SubscriptionMessage.topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscriptionMessage::topics() const {
  // @@protoc_insertion_point(field_list:ecu.lapi.pb.SubscriptionMessage.topics)
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscriptionMessage::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:ecu.lapi.pb.SubscriptionMessage.topics)
  return &topics_;
}

// optional string client_name = 2;
inline bool SubscriptionMessage::has_client_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriptionMessage::set_has_client_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscriptionMessage::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscriptionMessage::clear_client_name() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_->clear();
  }
  clear_has_client_name();
}
inline const ::std::string& SubscriptionMessage::client_name() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SubscriptionMessage.client_name)
  return *client_name_;
}
inline void SubscriptionMessage::set_client_name(const ::std::string& value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SubscriptionMessage.client_name)
}
inline void SubscriptionMessage::set_client_name(const char* value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.SubscriptionMessage.client_name)
}
inline void SubscriptionMessage::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.SubscriptionMessage.client_name)
}
inline ::std::string* SubscriptionMessage::mutable_client_name() {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.SubscriptionMessage.client_name)
  return client_name_;
}
inline ::std::string* SubscriptionMessage::release_client_name() {
  clear_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_name_;
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubscriptionMessage::set_allocated_client_name(::std::string* client_name) {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (client_name) {
    set_has_client_name();
    client_name_ = client_name;
  } else {
    clear_has_client_name();
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.SubscriptionMessage.client_name)
}

// -------------------------------------------------------------------

// SubscriptionStatus

// repeated string topics = 1;
inline int SubscriptionStatus::topics_size() const {
  return topics_.size();
}
inline void SubscriptionStatus::clear_topics() {
  topics_.Clear();
}
inline const ::std::string& SubscriptionStatus::topics(int index) const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SubscriptionStatus.topics)
  return topics_.Get(index);
}
inline ::std::string* SubscriptionStatus::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.SubscriptionStatus.topics)
  return topics_.Mutable(index);
}
inline void SubscriptionStatus::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SubscriptionStatus.topics)
  topics_.Mutable(index)->assign(value);
}
inline void SubscriptionStatus::set_topics(int index, const char* value) {
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.SubscriptionStatus.topics)
}
inline void SubscriptionStatus::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.SubscriptionStatus.topics)
}
inline ::std::string* SubscriptionStatus::add_topics() {
  return topics_.Add();
}
inline void SubscriptionStatus::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecu.lapi.pb.SubscriptionStatus.topics)
}
inline void SubscriptionStatus::add_topics(const char* value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecu.lapi.pb.SubscriptionStatus.topics)
}
inline void SubscriptionStatus::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecu.lapi.pb.SubscriptionStatus.topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscriptionStatus::topics() const {
  // @@protoc_insertion_point(field_list:ecu.lapi.pb.SubscriptionStatus.topics)
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscriptionStatus::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:ecu.lapi.pb.SubscriptionStatus.topics)
  return &topics_;
}

// optional uint32 num_available_topics = 2;
inline bool SubscriptionStatus::has_num_available_topics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriptionStatus::set_has_num_available_topics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscriptionStatus::clear_has_num_available_topics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscriptionStatus::clear_num_available_topics() {
  num_available_topics_ = 0u;
  clear_has_num_available_topics();
}
inline ::google::protobuf::uint32 SubscriptionStatus::num_available_topics() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SubscriptionStatus.num_available_topics)
  return num_available_topics_;
}
inline void SubscriptionStatus::set_num_available_topics(::google::protobuf::uint32 value) {
  set_has_num_available_topics();
  num_available_topics_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SubscriptionStatus.num_available_topics)
}

// optional uint32 num_subscribed_topics = 3;
inline bool SubscriptionStatus::has_num_subscribed_topics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubscriptionStatus::set_has_num_subscribed_topics() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubscriptionStatus::clear_has_num_subscribed_topics() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubscriptionStatus::clear_num_subscribed_topics() {
  num_subscribed_topics_ = 0u;
  clear_has_num_subscribed_topics();
}
inline ::google::protobuf::uint32 SubscriptionStatus::num_subscribed_topics() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SubscriptionStatus.num_subscribed_topics)
  return num_subscribed_topics_;
}
inline void SubscriptionStatus::set_num_subscribed_topics(::google::protobuf::uint32 value) {
  set_has_num_subscribed_topics();
  num_subscribed_topics_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SubscriptionStatus.num_subscribed_topics)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: systime.proto

#ifndef PROTOBUF_systime_2eproto__INCLUDED
#define PROTOBUF_systime_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_systime_2eproto();
void protobuf_AssignDesc_systime_2eproto();
void protobuf_ShutdownFile_systime_2eproto();

class SystemTimeStatus;
class TimeZone;

enum SystemTimeStatus_TimeSrc {
  SystemTimeStatus_TimeSrc_unknown = 0,
  SystemTimeStatus_TimeSrc_gnss = 1,
  SystemTimeStatus_TimeSrc_tco = 2,
  SystemTimeStatus_TimeSrc_gsm = 3,
  SystemTimeStatus_TimeSrc_server = 4
};
bool SystemTimeStatus_TimeSrc_IsValid(int value);
const SystemTimeStatus_TimeSrc SystemTimeStatus_TimeSrc_TimeSrc_MIN = SystemTimeStatus_TimeSrc_unknown;
const SystemTimeStatus_TimeSrc SystemTimeStatus_TimeSrc_TimeSrc_MAX = SystemTimeStatus_TimeSrc_server;
const int SystemTimeStatus_TimeSrc_TimeSrc_ARRAYSIZE = SystemTimeStatus_TimeSrc_TimeSrc_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemTimeStatus_TimeSrc_descriptor();
inline const ::std::string& SystemTimeStatus_TimeSrc_Name(SystemTimeStatus_TimeSrc value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemTimeStatus_TimeSrc_descriptor(), value);
}
inline bool SystemTimeStatus_TimeSrc_Parse(
    const ::std::string& name, SystemTimeStatus_TimeSrc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemTimeStatus_TimeSrc>(
    SystemTimeStatus_TimeSrc_descriptor(), name, value);
}
enum TimeZone_Source {
  TimeZone_Source_unknown = 0,
  TimeZone_Source_gnss = 1,
  TimeZone_Source_cache = 2
};
bool TimeZone_Source_IsValid(int value);
const TimeZone_Source TimeZone_Source_Source_MIN = TimeZone_Source_unknown;
const TimeZone_Source TimeZone_Source_Source_MAX = TimeZone_Source_cache;
const int TimeZone_Source_Source_ARRAYSIZE = TimeZone_Source_Source_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimeZone_Source_descriptor();
inline const ::std::string& TimeZone_Source_Name(TimeZone_Source value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimeZone_Source_descriptor(), value);
}
inline bool TimeZone_Source_Parse(
    const ::std::string& name, TimeZone_Source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimeZone_Source>(
    TimeZone_Source_descriptor(), name, value);
}
// ===================================================================

class SystemTimeStatus : public ::google::protobuf::Message {
 public:
  SystemTimeStatus();
  virtual ~SystemTimeStatus();

  SystemTimeStatus(const SystemTimeStatus& from);

  inline SystemTimeStatus& operator=(const SystemTimeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemTimeStatus& default_instance();

  void Swap(SystemTimeStatus* other);

  // implements Message ----------------------------------------------

  SystemTimeStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemTimeStatus& from);
  void MergeFrom(const SystemTimeStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SystemTimeStatus_TimeSrc TimeSrc;
  static const TimeSrc unknown = SystemTimeStatus_TimeSrc_unknown;
  static const TimeSrc gnss = SystemTimeStatus_TimeSrc_gnss;
  static const TimeSrc tco = SystemTimeStatus_TimeSrc_tco;
  static const TimeSrc gsm = SystemTimeStatus_TimeSrc_gsm;
  static const TimeSrc server = SystemTimeStatus_TimeSrc_server;
  static inline bool TimeSrc_IsValid(int value) {
    return SystemTimeStatus_TimeSrc_IsValid(value);
  }
  static const TimeSrc TimeSrc_MIN =
    SystemTimeStatus_TimeSrc_TimeSrc_MIN;
  static const TimeSrc TimeSrc_MAX =
    SystemTimeStatus_TimeSrc_TimeSrc_MAX;
  static const int TimeSrc_ARRAYSIZE =
    SystemTimeStatus_TimeSrc_TimeSrc_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimeSrc_descriptor() {
    return SystemTimeStatus_TimeSrc_descriptor();
  }
  static inline const ::std::string& TimeSrc_Name(TimeSrc value) {
    return SystemTimeStatus_TimeSrc_Name(value);
  }
  static inline bool TimeSrc_Parse(const ::std::string& name,
      TimeSrc* value) {
    return SystemTimeStatus_TimeSrc_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.SystemTimeStatus.TimeSrc src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::ecu::lapi::pb::SystemTimeStatus_TimeSrc src() const;
  inline void set_src(::ecu::lapi::pb::SystemTimeStatus_TimeSrc value);

  // optional bool available = 2;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 2;
  inline bool available() const;
  inline void set_available(bool value);

  // optional uint64 utc_time = 3;
  inline bool has_utc_time() const;
  inline void clear_utc_time();
  static const int kUtcTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 utc_time() const;
  inline void set_utc_time(::google::protobuf::uint64 value);

  // optional uint64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional int64 diff = 5;
  inline bool has_diff() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 5;
  inline ::google::protobuf::int64 diff() const;
  inline void set_diff(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.SystemTimeStatus)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_available();
  inline void clear_has_available();
  inline void set_has_utc_time();
  inline void clear_has_utc_time();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_diff();
  inline void clear_has_diff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int src_;
  bool available_;
  ::google::protobuf::uint64 utc_time_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int64 diff_;
  friend void  protobuf_AddDesc_systime_2eproto();
  friend void protobuf_AssignDesc_systime_2eproto();
  friend void protobuf_ShutdownFile_systime_2eproto();

  void InitAsDefaultInstance();
  static SystemTimeStatus* default_instance_;
};
// -------------------------------------------------------------------

class TimeZone : public ::google::protobuf::Message {
 public:
  TimeZone();
  virtual ~TimeZone();

  TimeZone(const TimeZone& from);

  inline TimeZone& operator=(const TimeZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeZone& default_instance();

  void Swap(TimeZone* other);

  // implements Message ----------------------------------------------

  TimeZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeZone& from);
  void MergeFrom(const TimeZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TimeZone_Source Source;
  static const Source unknown = TimeZone_Source_unknown;
  static const Source gnss = TimeZone_Source_gnss;
  static const Source cache = TimeZone_Source_cache;
  static inline bool Source_IsValid(int value) {
    return TimeZone_Source_IsValid(value);
  }
  static const Source Source_MIN =
    TimeZone_Source_Source_MIN;
  static const Source Source_MAX =
    TimeZone_Source_Source_MAX;
  static const int Source_ARRAYSIZE =
    TimeZone_Source_Source_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Source_descriptor() {
    return TimeZone_Source_descriptor();
  }
  static inline const ::std::string& Source_Name(Source value) {
    return TimeZone_Source_Name(value);
  }
  static inline bool Source_Parse(const ::std::string& name,
      Source* value) {
    return TimeZone_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.TimeZone.Source src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::ecu::lapi::pb::TimeZone_Source src() const;
  inline void set_src(::ecu::lapi::pb::TimeZone_Source value);

  // optional int32 local_minute_offset = 2;
  inline bool has_local_minute_offset() const;
  inline void clear_local_minute_offset();
  static const int kLocalMinuteOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 local_minute_offset() const;
  inline void set_local_minute_offset(::google::protobuf::int32 value);

  // optional int32 local_hour_offset = 3;
  inline bool has_local_hour_offset() const;
  inline void clear_local_hour_offset();
  static const int kLocalHourOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 local_hour_offset() const;
  inline void set_local_hour_offset(::google::protobuf::int32 value);

  // optional string timezone = 4;
  inline bool has_timezone() const;
  inline void clear_timezone();
  static const int kTimezoneFieldNumber = 4;
  inline const ::std::string& timezone() const;
  inline void set_timezone(const ::std::string& value);
  inline void set_timezone(const char* value);
  inline void set_timezone(const char* value, size_t size);
  inline ::std::string* mutable_timezone();
  inline ::std::string* release_timezone();
  inline void set_allocated_timezone(::std::string* timezone);

  // optional bool dst = 5;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 5;
  inline bool dst() const;
  inline void set_dst(bool value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.TimeZone)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_local_minute_offset();
  inline void clear_has_local_minute_offset();
  inline void set_has_local_hour_offset();
  inline void clear_has_local_hour_offset();
  inline void set_has_timezone();
  inline void clear_has_timezone();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int src_;
  ::google::protobuf::int32 local_minute_offset_;
  ::std::string* timezone_;
  ::google::protobuf::int32 local_hour_offset_;
  bool dst_;
  friend void  protobuf_AddDesc_systime_2eproto();
  friend void protobuf_AssignDesc_systime_2eproto();
  friend void protobuf_ShutdownFile_systime_2eproto();

  void InitAsDefaultInstance();
  static TimeZone* default_instance_;
};
// ===================================================================


// ===================================================================

// SystemTimeStatus

// optional .ecu.lapi.pb.SystemTimeStatus.TimeSrc src = 1;
inline bool SystemTimeStatus::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemTimeStatus::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemTimeStatus::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemTimeStatus::clear_src() {
  src_ = 0;
  clear_has_src();
}
inline ::ecu::lapi::pb::SystemTimeStatus_TimeSrc SystemTimeStatus::src() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SystemTimeStatus.src)
  return static_cast< ::ecu::lapi::pb::SystemTimeStatus_TimeSrc >(src_);
}
inline void SystemTimeStatus::set_src(::ecu::lapi::pb::SystemTimeStatus_TimeSrc value) {
  assert(::ecu::lapi::pb::SystemTimeStatus_TimeSrc_IsValid(value));
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SystemTimeStatus.src)
}

// optional bool available = 2;
inline bool SystemTimeStatus::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemTimeStatus::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemTimeStatus::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemTimeStatus::clear_available() {
  available_ = false;
  clear_has_available();
}
inline bool SystemTimeStatus::available() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SystemTimeStatus.available)
  return available_;
}
inline void SystemTimeStatus::set_available(bool value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SystemTimeStatus.available)
}

// optional uint64 utc_time = 3;
inline bool SystemTimeStatus::has_utc_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemTimeStatus::set_has_utc_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemTimeStatus::clear_has_utc_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemTimeStatus::clear_utc_time() {
  utc_time_ = GOOGLE_ULONGLONG(0);
  clear_has_utc_time();
}
inline ::google::protobuf::uint64 SystemTimeStatus::utc_time() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SystemTimeStatus.utc_time)
  return utc_time_;
}
inline void SystemTimeStatus::set_utc_time(::google::protobuf::uint64 value) {
  set_has_utc_time();
  utc_time_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SystemTimeStatus.utc_time)
}

// optional uint64 timestamp = 4;
inline bool SystemTimeStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemTimeStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemTimeStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemTimeStatus::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 SystemTimeStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SystemTimeStatus.timestamp)
  return timestamp_;
}
inline void SystemTimeStatus::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SystemTimeStatus.timestamp)
}

// optional int64 diff = 5;
inline bool SystemTimeStatus::has_diff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemTimeStatus::set_has_diff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemTimeStatus::clear_has_diff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemTimeStatus::clear_diff() {
  diff_ = GOOGLE_LONGLONG(0);
  clear_has_diff();
}
inline ::google::protobuf::int64 SystemTimeStatus::diff() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SystemTimeStatus.diff)
  return diff_;
}
inline void SystemTimeStatus::set_diff(::google::protobuf::int64 value) {
  set_has_diff();
  diff_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SystemTimeStatus.diff)
}

// -------------------------------------------------------------------

// TimeZone

// optional .ecu.lapi.pb.TimeZone.Source src = 1;
inline bool TimeZone::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeZone::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeZone::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeZone::clear_src() {
  src_ = 0;
  clear_has_src();
}
inline ::ecu::lapi::pb::TimeZone_Source TimeZone::src() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.TimeZone.src)
  return static_cast< ::ecu::lapi::pb::TimeZone_Source >(src_);
}
inline void TimeZone::set_src(::ecu::lapi::pb::TimeZone_Source value) {
  assert(::ecu::lapi::pb::TimeZone_Source_IsValid(value));
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.TimeZone.src)
}

// optional int32 local_minute_offset = 2;
inline bool TimeZone::has_local_minute_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeZone::set_has_local_minute_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeZone::clear_has_local_minute_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeZone::clear_local_minute_offset() {
  local_minute_offset_ = 0;
  clear_has_local_minute_offset();
}
inline ::google::protobuf::int32 TimeZone::local_minute_offset() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.TimeZone.local_minute_offset)
  return local_minute_offset_;
}
inline void TimeZone::set_local_minute_offset(::google::protobuf::int32 value) {
  set_has_local_minute_offset();
  local_minute_offset_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.TimeZone.local_minute_offset)
}

// optional int32 local_hour_offset = 3;
inline bool TimeZone::has_local_hour_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeZone::set_has_local_hour_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeZone::clear_has_local_hour_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeZone::clear_local_hour_offset() {
  local_hour_offset_ = 0;
  clear_has_local_hour_offset();
}
inline ::google::protobuf::int32 TimeZone::local_hour_offset() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.TimeZone.local_hour_offset)
  return local_hour_offset_;
}
inline void TimeZone::set_local_hour_offset(::google::protobuf::int32 value) {
  set_has_local_hour_offset();
  local_hour_offset_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.TimeZone.local_hour_offset)
}

// optional string timezone = 4;
inline bool TimeZone::has_timezone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimeZone::set_has_timezone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimeZone::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimeZone::clear_timezone() {
  if (timezone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_->clear();
  }
  clear_has_timezone();
}
inline const ::std::string& TimeZone::timezone() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.TimeZone.timezone)
  return *timezone_;
}
inline void TimeZone::set_timezone(const ::std::string& value) {
  set_has_timezone();
  if (timezone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_ = new ::std::string;
  }
  timezone_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.TimeZone.timezone)
}
inline void TimeZone::set_timezone(const char* value) {
  set_has_timezone();
  if (timezone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_ = new ::std::string;
  }
  timezone_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.TimeZone.timezone)
}
inline void TimeZone::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  if (timezone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_ = new ::std::string;
  }
  timezone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.TimeZone.timezone)
}
inline ::std::string* TimeZone::mutable_timezone() {
  set_has_timezone();
  if (timezone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.TimeZone.timezone)
  return timezone_;
}
inline ::std::string* TimeZone::release_timezone() {
  clear_has_timezone();
  if (timezone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timezone_;
    timezone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TimeZone::set_allocated_timezone(::std::string* timezone) {
  if (timezone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timezone_;
  }
  if (timezone) {
    set_has_timezone();
    timezone_ = timezone;
  } else {
    clear_has_timezone();
    timezone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.TimeZone.timezone)
}

// optional bool dst = 5;
inline bool TimeZone::has_dst() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TimeZone::set_has_dst() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TimeZone::clear_has_dst() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TimeZone::clear_dst() {
  dst_ = false;
  clear_has_dst();
}
inline bool TimeZone::dst() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.TimeZone.dst)
  return dst_;
}
inline void TimeZone::set_dst(bool value) {
  set_has_dst();
  dst_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.TimeZone.dst)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecu::lapi::pb::SystemTimeStatus_TimeSrc> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::SystemTimeStatus_TimeSrc>() {
  return ::ecu::lapi::pb::SystemTimeStatus_TimeSrc_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::TimeZone_Source> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::TimeZone_Source>() {
  return ::ecu::lapi::pb::TimeZone_Source_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_systime_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sw_update.proto

#ifndef PROTOBUF_sw_5fupdate_2eproto__INCLUDED
#define PROTOBUF_sw_5fupdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sw_5fupdate_2eproto();
void protobuf_AssignDesc_sw_5fupdate_2eproto();
void protobuf_ShutdownFile_sw_5fupdate_2eproto();

class SoftwareUpdateRequest;
class SoftwareUpdateResponse;
class SoftwareUpdateStatus;

enum SoftwareUpdateRequest_Type {
  SoftwareUpdateRequest_Type_ECU_SW = 0
};
bool SoftwareUpdateRequest_Type_IsValid(int value);
const SoftwareUpdateRequest_Type SoftwareUpdateRequest_Type_Type_MIN = SoftwareUpdateRequest_Type_ECU_SW;
const SoftwareUpdateRequest_Type SoftwareUpdateRequest_Type_Type_MAX = SoftwareUpdateRequest_Type_ECU_SW;
const int SoftwareUpdateRequest_Type_Type_ARRAYSIZE = SoftwareUpdateRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftwareUpdateRequest_Type_descriptor();
inline const ::std::string& SoftwareUpdateRequest_Type_Name(SoftwareUpdateRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftwareUpdateRequest_Type_descriptor(), value);
}
inline bool SoftwareUpdateRequest_Type_Parse(
    const ::std::string& name, SoftwareUpdateRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftwareUpdateRequest_Type>(
    SoftwareUpdateRequest_Type_descriptor(), name, value);
}
enum SoftwareUpdateRequest_Priority {
  SoftwareUpdateRequest_Priority_REGULAR = 0,
  SoftwareUpdateRequest_Priority_URGENT = 1,
  SoftwareUpdateRequest_Priority_CRITICAL = 2
};
bool SoftwareUpdateRequest_Priority_IsValid(int value);
const SoftwareUpdateRequest_Priority SoftwareUpdateRequest_Priority_Priority_MIN = SoftwareUpdateRequest_Priority_REGULAR;
const SoftwareUpdateRequest_Priority SoftwareUpdateRequest_Priority_Priority_MAX = SoftwareUpdateRequest_Priority_CRITICAL;
const int SoftwareUpdateRequest_Priority_Priority_ARRAYSIZE = SoftwareUpdateRequest_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftwareUpdateRequest_Priority_descriptor();
inline const ::std::string& SoftwareUpdateRequest_Priority_Name(SoftwareUpdateRequest_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftwareUpdateRequest_Priority_descriptor(), value);
}
inline bool SoftwareUpdateRequest_Priority_Parse(
    const ::std::string& name, SoftwareUpdateRequest_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftwareUpdateRequest_Priority>(
    SoftwareUpdateRequest_Priority_descriptor(), name, value);
}
enum SoftwareUpdateResponse_Acknowledge {
  SoftwareUpdateResponse_Acknowledge_ACCEPTED = 0,
  SoftwareUpdateResponse_Acknowledge_UNSAFE_STATE = 1,
  SoftwareUpdateResponse_Acknowledge_MISSING_TIME = 2,
  SoftwareUpdateResponse_Acknowledge_BUSY = 3,
  SoftwareUpdateResponse_Acknowledge_NOT_SUPPORTED = 4
};
bool SoftwareUpdateResponse_Acknowledge_IsValid(int value);
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse_Acknowledge_Acknowledge_MIN = SoftwareUpdateResponse_Acknowledge_ACCEPTED;
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse_Acknowledge_Acknowledge_MAX = SoftwareUpdateResponse_Acknowledge_NOT_SUPPORTED;
const int SoftwareUpdateResponse_Acknowledge_Acknowledge_ARRAYSIZE = SoftwareUpdateResponse_Acknowledge_Acknowledge_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftwareUpdateResponse_Acknowledge_descriptor();
inline const ::std::string& SoftwareUpdateResponse_Acknowledge_Name(SoftwareUpdateResponse_Acknowledge value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftwareUpdateResponse_Acknowledge_descriptor(), value);
}
inline bool SoftwareUpdateResponse_Acknowledge_Parse(
    const ::std::string& name, SoftwareUpdateResponse_Acknowledge* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftwareUpdateResponse_Acknowledge>(
    SoftwareUpdateResponse_Acknowledge_descriptor(), name, value);
}
enum SoftwareUpdateStatus_Type {
  SoftwareUpdateStatus_Type_NONE = 0,
  SoftwareUpdateStatus_Type_UDS_ASYNC = 1,
  SoftwareUpdateStatus_Type_UDS_SYNC = 2,
  SoftwareUpdateStatus_Type_RECOVERY = 3,
  SoftwareUpdateStatus_Type_OTA = 4
};
bool SoftwareUpdateStatus_Type_IsValid(int value);
const SoftwareUpdateStatus_Type SoftwareUpdateStatus_Type_Type_MIN = SoftwareUpdateStatus_Type_NONE;
const SoftwareUpdateStatus_Type SoftwareUpdateStatus_Type_Type_MAX = SoftwareUpdateStatus_Type_OTA;
const int SoftwareUpdateStatus_Type_Type_ARRAYSIZE = SoftwareUpdateStatus_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Type_descriptor();
inline const ::std::string& SoftwareUpdateStatus_Type_Name(SoftwareUpdateStatus_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftwareUpdateStatus_Type_descriptor(), value);
}
inline bool SoftwareUpdateStatus_Type_Parse(
    const ::std::string& name, SoftwareUpdateStatus_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftwareUpdateStatus_Type>(
    SoftwareUpdateStatus_Type_descriptor(), name, value);
}
enum SoftwareUpdateStatus_Status {
  SoftwareUpdateStatus_Status_ERROR = 0,
  SoftwareUpdateStatus_Status_WAITING = 1,
  SoftwareUpdateStatus_Status_TIMEOUT = 2,
  SoftwareUpdateStatus_Status_CHECKING_AUTHENTICATION = 3,
  SoftwareUpdateStatus_Status_TRANSFERRING = 4,
  SoftwareUpdateStatus_Status_UPDATE = 5,
  SoftwareUpdateStatus_Status_CHECKSUM = 6,
  SoftwareUpdateStatus_Status_FINISHED = 7,
  SoftwareUpdateStatus_Status_DELETING = 1024,
  SoftwareUpdateStatus_Status_UPDATE_IMMINENT = 1025
};
bool SoftwareUpdateStatus_Status_IsValid(int value);
const SoftwareUpdateStatus_Status SoftwareUpdateStatus_Status_Status_MIN = SoftwareUpdateStatus_Status_ERROR;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus_Status_Status_MAX = SoftwareUpdateStatus_Status_UPDATE_IMMINENT;
const int SoftwareUpdateStatus_Status_Status_ARRAYSIZE = SoftwareUpdateStatus_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Status_descriptor();
inline const ::std::string& SoftwareUpdateStatus_Status_Name(SoftwareUpdateStatus_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftwareUpdateStatus_Status_descriptor(), value);
}
inline bool SoftwareUpdateStatus_Status_Parse(
    const ::std::string& name, SoftwareUpdateStatus_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftwareUpdateStatus_Status>(
    SoftwareUpdateStatus_Status_descriptor(), name, value);
}
enum SoftwareUpdateStatus_Error {
  SoftwareUpdateStatus_Error_NOERROR = 0,
  SoftwareUpdateStatus_Error_USB_MISSING = 1,
  SoftwareUpdateStatus_Error_USB_REMOVED = 2,
  SoftwareUpdateStatus_Error_USB_UNREADABLE = 3,
  SoftwareUpdateStatus_Error_FILE_MISSING = 4,
  SoftwareUpdateStatus_Error_FILE_CORRUPT = 5,
  SoftwareUpdateStatus_Error_ECU_MEMORY_FULL = 6,
  SoftwareUpdateStatus_Error_INVALID_IMAGE = 7,
  SoftwareUpdateStatus_Error_INVALID_SIGNATURE = 8,
  SoftwareUpdateStatus_Error_GENERAL_ERROR = 1024,
  SoftwareUpdateStatus_Error_ASYNC_EXPIRED = 1025,
  SoftwareUpdateStatus_Error_INVALID_PARTNR = 1027,
  SoftwareUpdateStatus_Error_COULD_NOT_RESTART = 1028,
  SoftwareUpdateStatus_Error_COULD_NOT_SET_PARAM = 1029
};
bool SoftwareUpdateStatus_Error_IsValid(int value);
const SoftwareUpdateStatus_Error SoftwareUpdateStatus_Error_Error_MIN = SoftwareUpdateStatus_Error_NOERROR;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus_Error_Error_MAX = SoftwareUpdateStatus_Error_COULD_NOT_SET_PARAM;
const int SoftwareUpdateStatus_Error_Error_ARRAYSIZE = SoftwareUpdateStatus_Error_Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Error_descriptor();
inline const ::std::string& SoftwareUpdateStatus_Error_Name(SoftwareUpdateStatus_Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftwareUpdateStatus_Error_descriptor(), value);
}
inline bool SoftwareUpdateStatus_Error_Parse(
    const ::std::string& name, SoftwareUpdateStatus_Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftwareUpdateStatus_Error>(
    SoftwareUpdateStatus_Error_descriptor(), name, value);
}
// ===================================================================

class SoftwareUpdateRequest : public ::google::protobuf::Message {
 public:
  SoftwareUpdateRequest();
  virtual ~SoftwareUpdateRequest();

  SoftwareUpdateRequest(const SoftwareUpdateRequest& from);

  inline SoftwareUpdateRequest& operator=(const SoftwareUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftwareUpdateRequest& default_instance();

  void Swap(SoftwareUpdateRequest* other);

  // implements Message ----------------------------------------------

  SoftwareUpdateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftwareUpdateRequest& from);
  void MergeFrom(const SoftwareUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftwareUpdateRequest_Type Type;
  static const Type ECU_SW = SoftwareUpdateRequest_Type_ECU_SW;
  static inline bool Type_IsValid(int value) {
    return SoftwareUpdateRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SoftwareUpdateRequest_Type_Type_MIN;
  static const Type Type_MAX =
    SoftwareUpdateRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SoftwareUpdateRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SoftwareUpdateRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SoftwareUpdateRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SoftwareUpdateRequest_Type_Parse(name, value);
  }

  typedef SoftwareUpdateRequest_Priority Priority;
  static const Priority REGULAR = SoftwareUpdateRequest_Priority_REGULAR;
  static const Priority URGENT = SoftwareUpdateRequest_Priority_URGENT;
  static const Priority CRITICAL = SoftwareUpdateRequest_Priority_CRITICAL;
  static inline bool Priority_IsValid(int value) {
    return SoftwareUpdateRequest_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    SoftwareUpdateRequest_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    SoftwareUpdateRequest_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    SoftwareUpdateRequest_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return SoftwareUpdateRequest_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return SoftwareUpdateRequest_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return SoftwareUpdateRequest_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.SoftwareUpdateRequest.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ecu::lapi::pb::SoftwareUpdateRequest_Type type() const;
  inline void set_type(::ecu::lapi::pb::SoftwareUpdateRequest_Type value);

  // optional .ecu.lapi.pb.SoftwareUpdateRequest.Priority priority = 2;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 2;
  inline ::ecu::lapi::pb::SoftwareUpdateRequest_Priority priority() const;
  inline void set_priority(::ecu::lapi::pb::SoftwareUpdateRequest_Priority value);

  // optional string client_name = 3;
  inline bool has_client_name() const;
  inline void clear_client_name();
  static const int kClientNameFieldNumber = 3;
  inline const ::std::string& client_name() const;
  inline void set_client_name(const ::std::string& value);
  inline void set_client_name(const char* value);
  inline void set_client_name(const char* value, size_t size);
  inline ::std::string* mutable_client_name();
  inline ::std::string* release_client_name();
  inline void set_allocated_client_name(::std::string* client_name);

  // optional string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.SoftwareUpdateRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_client_name();
  inline void clear_has_client_name();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int priority_;
  ::std::string* client_name_;
  ::std::string* description_;
  friend void  protobuf_AddDesc_sw_5fupdate_2eproto();
  friend void protobuf_AssignDesc_sw_5fupdate_2eproto();
  friend void protobuf_ShutdownFile_sw_5fupdate_2eproto();

  void InitAsDefaultInstance();
  static SoftwareUpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class SoftwareUpdateResponse : public ::google::protobuf::Message {
 public:
  SoftwareUpdateResponse();
  virtual ~SoftwareUpdateResponse();

  SoftwareUpdateResponse(const SoftwareUpdateResponse& from);

  inline SoftwareUpdateResponse& operator=(const SoftwareUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftwareUpdateResponse& default_instance();

  void Swap(SoftwareUpdateResponse* other);

  // implements Message ----------------------------------------------

  SoftwareUpdateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftwareUpdateResponse& from);
  void MergeFrom(const SoftwareUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftwareUpdateResponse_Acknowledge Acknowledge;
  static const Acknowledge ACCEPTED = SoftwareUpdateResponse_Acknowledge_ACCEPTED;
  static const Acknowledge UNSAFE_STATE = SoftwareUpdateResponse_Acknowledge_UNSAFE_STATE;
  static const Acknowledge MISSING_TIME = SoftwareUpdateResponse_Acknowledge_MISSING_TIME;
  static const Acknowledge BUSY = SoftwareUpdateResponse_Acknowledge_BUSY;
  static const Acknowledge NOT_SUPPORTED = SoftwareUpdateResponse_Acknowledge_NOT_SUPPORTED;
  static inline bool Acknowledge_IsValid(int value) {
    return SoftwareUpdateResponse_Acknowledge_IsValid(value);
  }
  static const Acknowledge Acknowledge_MIN =
    SoftwareUpdateResponse_Acknowledge_Acknowledge_MIN;
  static const Acknowledge Acknowledge_MAX =
    SoftwareUpdateResponse_Acknowledge_Acknowledge_MAX;
  static const int Acknowledge_ARRAYSIZE =
    SoftwareUpdateResponse_Acknowledge_Acknowledge_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Acknowledge_descriptor() {
    return SoftwareUpdateResponse_Acknowledge_descriptor();
  }
  static inline const ::std::string& Acknowledge_Name(Acknowledge value) {
    return SoftwareUpdateResponse_Acknowledge_Name(value);
  }
  static inline bool Acknowledge_Parse(const ::std::string& name,
      Acknowledge* value) {
    return SoftwareUpdateResponse_Acknowledge_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.SoftwareUpdateResponse.Acknowledge acknowledge = 1;
  inline bool has_acknowledge() const;
  inline void clear_acknowledge();
  static const int kAcknowledgeFieldNumber = 1;
  inline ::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge acknowledge() const;
  inline void set_acknowledge(::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.SoftwareUpdateResponse)
 private:
  inline void set_has_acknowledge();
  inline void clear_has_acknowledge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int acknowledge_;
  friend void  protobuf_AddDesc_sw_5fupdate_2eproto();
  friend void protobuf_AssignDesc_sw_5fupdate_2eproto();
  friend void protobuf_ShutdownFile_sw_5fupdate_2eproto();

  void InitAsDefaultInstance();
  static SoftwareUpdateResponse* default_instance_;
};
// -------------------------------------------------------------------

class SoftwareUpdateStatus : public ::google::protobuf::Message {
 public:
  SoftwareUpdateStatus();
  virtual ~SoftwareUpdateStatus();

  SoftwareUpdateStatus(const SoftwareUpdateStatus& from);

  inline SoftwareUpdateStatus& operator=(const SoftwareUpdateStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftwareUpdateStatus& default_instance();

  void Swap(SoftwareUpdateStatus* other);

  // implements Message ----------------------------------------------

  SoftwareUpdateStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftwareUpdateStatus& from);
  void MergeFrom(const SoftwareUpdateStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftwareUpdateStatus_Type Type;
  static const Type NONE = SoftwareUpdateStatus_Type_NONE;
  static const Type UDS_ASYNC = SoftwareUpdateStatus_Type_UDS_ASYNC;
  static const Type UDS_SYNC = SoftwareUpdateStatus_Type_UDS_SYNC;
  static const Type RECOVERY = SoftwareUpdateStatus_Type_RECOVERY;
  static const Type OTA = SoftwareUpdateStatus_Type_OTA;
  static inline bool Type_IsValid(int value) {
    return SoftwareUpdateStatus_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SoftwareUpdateStatus_Type_Type_MIN;
  static const Type Type_MAX =
    SoftwareUpdateStatus_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SoftwareUpdateStatus_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SoftwareUpdateStatus_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SoftwareUpdateStatus_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SoftwareUpdateStatus_Type_Parse(name, value);
  }

  typedef SoftwareUpdateStatus_Status Status;
  static const Status ERROR = SoftwareUpdateStatus_Status_ERROR;
  static const Status WAITING = SoftwareUpdateStatus_Status_WAITING;
  static const Status TIMEOUT = SoftwareUpdateStatus_Status_TIMEOUT;
  static const Status CHECKING_AUTHENTICATION = SoftwareUpdateStatus_Status_CHECKING_AUTHENTICATION;
  static const Status TRANSFERRING = SoftwareUpdateStatus_Status_TRANSFERRING;
  static const Status UPDATE = SoftwareUpdateStatus_Status_UPDATE;
  static const Status CHECKSUM = SoftwareUpdateStatus_Status_CHECKSUM;
  static const Status FINISHED = SoftwareUpdateStatus_Status_FINISHED;
  static const Status DELETING = SoftwareUpdateStatus_Status_DELETING;
  static const Status UPDATE_IMMINENT = SoftwareUpdateStatus_Status_UPDATE_IMMINENT;
  static inline bool Status_IsValid(int value) {
    return SoftwareUpdateStatus_Status_IsValid(value);
  }
  static const Status Status_MIN =
    SoftwareUpdateStatus_Status_Status_MIN;
  static const Status Status_MAX =
    SoftwareUpdateStatus_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    SoftwareUpdateStatus_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return SoftwareUpdateStatus_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return SoftwareUpdateStatus_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return SoftwareUpdateStatus_Status_Parse(name, value);
  }

  typedef SoftwareUpdateStatus_Error Error;
  static const Error NOERROR = SoftwareUpdateStatus_Error_NOERROR;
  static const Error USB_MISSING = SoftwareUpdateStatus_Error_USB_MISSING;
  static const Error USB_REMOVED = SoftwareUpdateStatus_Error_USB_REMOVED;
  static const Error USB_UNREADABLE = SoftwareUpdateStatus_Error_USB_UNREADABLE;
  static const Error FILE_MISSING = SoftwareUpdateStatus_Error_FILE_MISSING;
  static const Error FILE_CORRUPT = SoftwareUpdateStatus_Error_FILE_CORRUPT;
  static const Error ECU_MEMORY_FULL = SoftwareUpdateStatus_Error_ECU_MEMORY_FULL;
  static const Error INVALID_IMAGE = SoftwareUpdateStatus_Error_INVALID_IMAGE;
  static const Error INVALID_SIGNATURE = SoftwareUpdateStatus_Error_INVALID_SIGNATURE;
  static const Error GENERAL_ERROR = SoftwareUpdateStatus_Error_GENERAL_ERROR;
  static const Error ASYNC_EXPIRED = SoftwareUpdateStatus_Error_ASYNC_EXPIRED;
  static const Error INVALID_PARTNR = SoftwareUpdateStatus_Error_INVALID_PARTNR;
  static const Error COULD_NOT_RESTART = SoftwareUpdateStatus_Error_COULD_NOT_RESTART;
  static const Error COULD_NOT_SET_PARAM = SoftwareUpdateStatus_Error_COULD_NOT_SET_PARAM;
  static inline bool Error_IsValid(int value) {
    return SoftwareUpdateStatus_Error_IsValid(value);
  }
  static const Error Error_MIN =
    SoftwareUpdateStatus_Error_Error_MIN;
  static const Error Error_MAX =
    SoftwareUpdateStatus_Error_Error_MAX;
  static const int Error_ARRAYSIZE =
    SoftwareUpdateStatus_Error_Error_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Error_descriptor() {
    return SoftwareUpdateStatus_Error_descriptor();
  }
  static inline const ::std::string& Error_Name(Error value) {
    return SoftwareUpdateStatus_Error_Name(value);
  }
  static inline bool Error_Parse(const ::std::string& name,
      Error* value) {
    return SoftwareUpdateStatus_Error_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ecu::lapi::pb::SoftwareUpdateStatus_Type type() const;
  inline void set_type(::ecu::lapi::pb::SoftwareUpdateStatus_Type value);

  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Status status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::ecu::lapi::pb::SoftwareUpdateStatus_Status status() const;
  inline void set_status(::ecu::lapi::pb::SoftwareUpdateStatus_Status value);

  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Error error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::ecu::lapi::pb::SoftwareUpdateStatus_Error error() const;
  inline void set_error(::ecu::lapi::pb::SoftwareUpdateStatus_Error value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.SoftwareUpdateStatus)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int status_;
  int error_;
  friend void  protobuf_AddDesc_sw_5fupdate_2eproto();
  friend void protobuf_AssignDesc_sw_5fupdate_2eproto();
  friend void protobuf_ShutdownFile_sw_5fupdate_2eproto();

  void InitAsDefaultInstance();
  static SoftwareUpdateStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// SoftwareUpdateRequest

// optional .ecu.lapi.pb.SoftwareUpdateRequest.Type type = 1;
inline bool SoftwareUpdateRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftwareUpdateRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftwareUpdateRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftwareUpdateRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ecu::lapi::pb::SoftwareUpdateRequest_Type SoftwareUpdateRequest::type() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SoftwareUpdateRequest.type)
  return static_cast< ::ecu::lapi::pb::SoftwareUpdateRequest_Type >(type_);
}
inline void SoftwareUpdateRequest::set_type(::ecu::lapi::pb::SoftwareUpdateRequest_Type value) {
  assert(::ecu::lapi::pb::SoftwareUpdateRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SoftwareUpdateRequest.type)
}

// optional .ecu.lapi.pb.SoftwareUpdateRequest.Priority priority = 2;
inline bool SoftwareUpdateRequest::has_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftwareUpdateRequest::set_has_priority() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftwareUpdateRequest::clear_has_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftwareUpdateRequest::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::ecu::lapi::pb::SoftwareUpdateRequest_Priority SoftwareUpdateRequest::priority() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SoftwareUpdateRequest.priority)
  return static_cast< ::ecu::lapi::pb::SoftwareUpdateRequest_Priority >(priority_);
}
inline void SoftwareUpdateRequest::set_priority(::ecu::lapi::pb::SoftwareUpdateRequest_Priority value) {
  assert(::ecu::lapi::pb::SoftwareUpdateRequest_Priority_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SoftwareUpdateRequest.priority)
}

// optional string client_name = 3;
inline bool SoftwareUpdateRequest::has_client_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoftwareUpdateRequest::set_has_client_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoftwareUpdateRequest::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoftwareUpdateRequest::clear_client_name() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_->clear();
  }
  clear_has_client_name();
}
inline const ::std::string& SoftwareUpdateRequest::client_name() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SoftwareUpdateRequest.client_name)
  return *client_name_;
}
inline void SoftwareUpdateRequest::set_client_name(const ::std::string& value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SoftwareUpdateRequest.client_name)
}
inline void SoftwareUpdateRequest::set_client_name(const char* value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.SoftwareUpdateRequest.client_name)
}
inline void SoftwareUpdateRequest::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.SoftwareUpdateRequest.client_name)
}
inline ::std::string* SoftwareUpdateRequest::mutable_client_name() {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.SoftwareUpdateRequest.client_name)
  return client_name_;
}
inline ::std::string* SoftwareUpdateRequest::release_client_name() {
  clear_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_name_;
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SoftwareUpdateRequest::set_allocated_client_name(::std::string* client_name) {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (client_name) {
    set_has_client_name();
    client_name_ = client_name;
  } else {
    clear_has_client_name();
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.SoftwareUpdateRequest.client_name)
}

// optional string description = 4;
inline bool SoftwareUpdateRequest::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SoftwareUpdateRequest::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SoftwareUpdateRequest::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SoftwareUpdateRequest::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& SoftwareUpdateRequest::description() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SoftwareUpdateRequest.description)
  return *description_;
}
inline void SoftwareUpdateRequest::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SoftwareUpdateRequest.description)
}
inline void SoftwareUpdateRequest::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.SoftwareUpdateRequest.description)
}
inline void SoftwareUpdateRequest::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.SoftwareUpdateRequest.description)
}
inline ::std::string* SoftwareUpdateRequest::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.SoftwareUpdateRequest.description)
  return description_;
}
inline ::std::string* SoftwareUpdateRequest::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SoftwareUpdateRequest::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.SoftwareUpdateRequest.description)
}

// -------------------------------------------------------------------

// SoftwareUpdateResponse

// optional .ecu.lapi.pb.SoftwareUpdateResponse.Acknowledge acknowledge = 1;
inline bool SoftwareUpdateResponse::has_acknowledge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftwareUpdateResponse::set_has_acknowledge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftwareUpdateResponse::clear_has_acknowledge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftwareUpdateResponse::clear_acknowledge() {
  acknowledge_ = 0;
  clear_has_acknowledge();
}
inline ::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse::acknowledge() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SoftwareUpdateResponse.acknowledge)
  return static_cast< ::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge >(acknowledge_);
}
inline void SoftwareUpdateResponse::set_acknowledge(::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge value) {
  assert(::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge_IsValid(value));
  set_has_acknowledge();
  acknowledge_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SoftwareUpdateResponse.acknowledge)
}

// -------------------------------------------------------------------

// SoftwareUpdateStatus

// optional .ecu.lapi.pb.SoftwareUpdateStatus.Type type = 1;
inline bool SoftwareUpdateStatus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftwareUpdateStatus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftwareUpdateStatus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftwareUpdateStatus::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ecu::lapi::pb::SoftwareUpdateStatus_Type SoftwareUpdateStatus::type() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SoftwareUpdateStatus.type)
  return static_cast< ::ecu::lapi::pb::SoftwareUpdateStatus_Type >(type_);
}
inline void SoftwareUpdateStatus::set_type(::ecu::lapi::pb::SoftwareUpdateStatus_Type value) {
  assert(::ecu::lapi::pb::SoftwareUpdateStatus_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SoftwareUpdateStatus.type)
}

// optional .ecu.lapi.pb.SoftwareUpdateStatus.Status status = 2;
inline bool SoftwareUpdateStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftwareUpdateStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftwareUpdateStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftwareUpdateStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::ecu::lapi::pb::SoftwareUpdateStatus_Status SoftwareUpdateStatus::status() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SoftwareUpdateStatus.status)
  return static_cast< ::ecu::lapi::pb::SoftwareUpdateStatus_Status >(status_);
}
inline void SoftwareUpdateStatus::set_status(::ecu::lapi::pb::SoftwareUpdateStatus_Status value) {
  assert(::ecu::lapi::pb::SoftwareUpdateStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SoftwareUpdateStatus.status)
}

// optional .ecu.lapi.pb.SoftwareUpdateStatus.Error error = 3;
inline bool SoftwareUpdateStatus::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoftwareUpdateStatus::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoftwareUpdateStatus::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoftwareUpdateStatus::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::ecu::lapi::pb::SoftwareUpdateStatus_Error SoftwareUpdateStatus::error() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.SoftwareUpdateStatus.error)
  return static_cast< ::ecu::lapi::pb::SoftwareUpdateStatus_Error >(error_);
}
inline void SoftwareUpdateStatus::set_error(::ecu::lapi::pb::SoftwareUpdateStatus_Error value) {
  assert(::ecu::lapi::pb::SoftwareUpdateStatus_Error_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.SoftwareUpdateStatus.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecu::lapi::pb::SoftwareUpdateRequest_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::SoftwareUpdateRequest_Type>() {
  return ::ecu::lapi::pb::SoftwareUpdateRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::SoftwareUpdateRequest_Priority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::SoftwareUpdateRequest_Priority>() {
  return ::ecu::lapi::pb::SoftwareUpdateRequest_Priority_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge>() {
  return ::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::SoftwareUpdateStatus_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::SoftwareUpdateStatus_Type>() {
  return ::ecu::lapi::pb::SoftwareUpdateStatus_Type_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::SoftwareUpdateStatus_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::SoftwareUpdateStatus_Status>() {
  return ::ecu::lapi::pb::SoftwareUpdateStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::SoftwareUpdateStatus_Error> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::SoftwareUpdateStatus_Error>() {
  return ::ecu::lapi::pb::SoftwareUpdateStatus_Error_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sw_5fupdate_2eproto__INCLUDED

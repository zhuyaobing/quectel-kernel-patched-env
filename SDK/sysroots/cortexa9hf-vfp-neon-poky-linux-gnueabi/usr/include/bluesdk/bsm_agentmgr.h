/****************************************************************************
 *
 * File:
 *     bsm_agentmgr.h (cffcbbf) 2017-05-16 16:50:44 +0000 Erik Berrio
 *     $Product: OpenSynergy Blue SDK v5.x $
 *     Commit: cffcbbf0fd5215f4b9f726f387893882c32cec3e
 *
 * Description: Defines the BSM Agent Manager interface, which must be
 *     implemented by the target platform.
 *
 * Copyright 2009-2017 OpenSynergy GmbH.
 * All rights reserved. All unpublished rights reserved.
 *
 * Unpublished Confidential Information of OpenSynergy GmbH.
 * Do Not Disclose.
 *
 * No part of this work may be used or reproduced in any form or by any
 * means, or stored in a database or retrieval system, without prior written
 * permission of OpenSynergy GmbH.
 *
 * Use of this work is governed by a license granted by OpenSynergy GmbH. 
 * This work contains confidential and proprietary information of
 * OpenSynergy GmbH. which is protected by copyright, trade secret,
 * trademark and other intellectual property rights.
 *
 ****************************************************************************/
#ifndef __BSMPROFMAN_H
#define __BSMPROFMAN_H

#include "bsm.h"
#include "bsm_persmgr.h"
#include "bttypes2.h"

/*---------------------------------------------------------------------------
 * BSM Agent Manager layer
 *
 *     The agent manager allows the portable Bluetooth System Manager
 *     module to access service agent instances. The way that services are
 *     created, destroyed, and enumerated is platform-specific, so these
 *     functions must be implemented during the porting process.
 */

/****************************************************************************
 *
 * Section: Types
 *
 ****************************************************************************
 */


/*---------------------------------------------------------------------------
 * BsmAgentDescriptor structure
 *
 *     Describes an agent that could be created.
 */
typedef struct _BsmAgentDescriptor {
    /* Type of the agent that could be created */
    BsmServiceClassUuid type;

    /* Mode bits describing the service abstracted by the agent.
     * May contain only BSM_S_CLIENT and/or BSM_S_SERVER.
     */
    BsmServiceMode      mode;

    /* Default UTF-8 name of service abstracted by this agent */
    const U8           *name;

    /* Supplies a unique ID used to differentiate between multiple
     * instances of services with the same type and mode. The ID must
     * remain constant across system shutdown/startup. If only one
     * instance of a given service type/mode will exist, then the ID
     * should be set to 0.
     *
     * (NOTE: Not used at present.)
     */
    U32                 id;

    /* Remote service class entity type (often the same as "type"
     * but this is profile-specific).
     */
    BsmServiceClassUuid remoteType;

    /* Default remote service name in UTF-8 format.
     */
    const U8           *remoteName;

    /* Identifies if the service uses GATT */
    BOOL               gatt;

} BsmAgentDescriptor;

/*---------------------------------------------------------------------------
 * BsmAgentEventType type
 *
 *     Event types generated by the Agent Manager
 */
typedef BtEventTypeEx BsmAgentEventType;

/** An agent creation attempt has completed. Success is indicated in the event
 * "e.status". "p.create" contains additional information about the
 * creation attempt.
 */
#define AM_AGENT_CREATED      (BTE_TYPE_BASE_BSM_AM | 0x70)

/** An attempt to destroy an agent has completed. Agent destruction may fail!
 * Result of the attempt is provided in "e.status". If successful, then
 * the agent should be considered deallocated.
 */
#define AM_AGENT_DESTROYED    (BTE_TYPE_BASE_BSM_AM | 0x71)

/** The connection described by "p.connect" has transitioned to a new
 * connection state. If "e.status" is BT_STATUS_SUCCESS then the connection is
 * active. Other status codes indicate a disconnected state.
 */
#define AM_CONN_STATE   (BTE_TYPE_BASE_BSM_AM | 0x72)

/* End of BsmAgentEventType */

/*---------------------------------------------------------------------------
 * BsmAgentEvent structure
 *
 *     Describes an event generated by the Agent Manager
 */
typedef struct _BsmAgentEvent {
    BtEventEx e; /* Contains type of BsmAgentEventType and normal status */

    /* Agent of interest */
    struct _BsmServiceAgent *agent;

    union {
        /* Valid when e->type is AM_AGENT_CREATED */
        struct {
            /* If e.status is BT_STATUS_SUCCESS, contains the newly
             * created agent. Otherwise meaningless.
             */
            BsmAgentDescriptor desc;
        } create;

        /* Valid when e->type is AM_CONN_STATE */
        struct {
            /* Remote device address */
            BtDevAddr addr;

            /* Poiner to remote device structure */
            BtRemoteDevice *remDev;

            /* Friendly name of remote entity, or 0 if no name indicated. */
            const U8 *name;
        } connect;
    } p;
} BsmAgentEvent;


/****************************************************************************
 *
 * Section: BsmServiceAgent class
 *
 ****************************************************************************
 *
 * Defines methods (function pointer typedefs) and classes (a structure
 * containing a set of function pointer members) for the BSM Service Agent.
 *
 */

/* Forward ref */
typedef struct _BsmServiceAgent BsmServiceAgent;

/*---------------------------------------------------------------------------
 * BsmSaSetServiceName()
 *
 *     Requests a change to the advertised service name of this agent.
 *     When the operation is complete, AM_AGENT_NAME must be sent to the
 *     agent manager.
 *
 * Parameters:
 *     agent - Service agent of interest
 *
 *     name - Null-terminated, UTF-8 name to set
 */
typedef void (*BsmSaSetServiceName)(BsmServiceAgent *agent, const U8 *name);

/*---------------------------------------------------------------------------
 * BsmSaStart()
 *
 *     Starts (or re-starts) a connection or configuration procedure.
 *
 * Parameters:
 *     agent - Service agent of interest
 *
 *     addr - BD_ADDR of the remote device to which to initiate connection-
 *         related procedures. If 0, this request is to open a configuration
 *         UI related to service features, if any.
 *
 *     name - Optional name of the targeted remote service. If 0 then any
 *         service the agent finds may be used.
 *
 * Returns:
 *     TRUE if the procedure was started, FALSE if this was not possible.
 */
typedef BOOL (*BsmSaStart)(BsmServiceAgent *agent, BtDevAddr *addr, const U8 *name);

/*---------------------------------------------------------------------------
 * BsmSaStop()
 *     Requests termination of a connection or configuration procedure
 *
 * Parameters:
 *     agent - Service agent of interest
 *
 *     addr - Address of a remote device to disconnect from, or 0 to
 *         terminate the agent configuration process.
 *
 *     name - Ignored if addr is 0. Otherwise, specifies the name of the
 *         remote service with which to stop connection activity.
 *
 * Returns:
 *     TRUE if the termination procedure was launched. or FALSE if the
 *     termination procedure could not be launched.
 */
typedef BOOL (*BsmSaStop)(BsmServiceAgent *agent, BtDevAddr *addr, const U8 *name);

/*---------------------------------------------------------------------------
 * BsmSaGetContext()
 *     Returns a platform-defined context value.
 *
 * Parameters:
 *     agent - Service agent of interest
 *
 *     addr - Address corresponding to desired context. If non-zero,
 *         requests a context specific to a remote service
 *         (BSM_RS_GetContext). If 0, requests a context specific to the
 *         local service (BSM_LS_GetContext).
 *
 * Returns:
 *     A platform-defined context value, or 0 if no context available.
 */
typedef void *(*BsmSaGetContext)(BsmServiceAgent *agent, BtDevAddr *addr);

/*---------------------------------------------------------------------------
 * BsmServiceAgent structure
 *
 *     Represents a service agent, which is used by the BSM to track
 *     and control a service instance and its connections.
 *
 *     Implementers must fill in each member with an appropriate function
 *     pointer.
 */
struct _BsmServiceAgent
{
    /* Sets the service name */
    BsmSaSetServiceName setServiceName;

    /* Starts the agent */
    BsmSaStart start;

    /* Stops the agent */
    BsmSaStop stop;

    /* Returns a platform-specific context pointer */
    BsmSaGetContext getContext;
};


/****************************************************************************
 *
 * Section: BsmAgentManager class
 *
 ****************************************************************************
 *
 * Defines methods (function pointer typedefs) and a class (a structure
 * containing a set of function pointer members) for the BSM Service Agent.
 *
 */


/*---------------------------------------------------------------------------
 * BsmAmInit()
 *     Initializes communication with the agent manager. Called by BSM
 *     at BSM_Start time.
 *
 * Parameters:
 *     amgr - Service Agent Manager of interest.
 *
 *     handler - The handler to receive all events from this agent manager.
 *
 *     persMgr - A persistent data store usable by agents.
 *
 * Returns:
 *     TRUE if initialization was successful. FALSE if initialization failed
 *     (this will cause BSM_Start to fail).
 */
typedef BOOL (*BsmAmInit)(BsmAgentManager *amgr, BtHandlerEx *handler,
                          BsmPersistenceManager *persMgr);

/*---------------------------------------------------------------------------
 * BsmInitAgents()
 *     Initializes agents. Called by BSM at BSM_Start time.
 *
 * Parameters:
 *     amgr - Service Agent Manager of interest.
 *
 * Returns:
 *     TRUE if initialization was successful. FALSE if initialization failed
 *     (this will cause BSM_Start to fail).
 */
typedef BOOL (*BsmInitAgents)(BsmAgentManager *amgr);

/*---------------------------------------------------------------------------
 * BsmAmGetCreatableAgents()
 *     Returns the set of agents which can be created at this time.
 *
 * Parameters:
 *     amgr - Service Agent Manager of interest.
 *
 *     agents - Points to an array of BsmAgentDescriptor objects to be
 *         filled. May be 0 if "length" is 0. On return, this array is
 *         filled with descriptors up to the supplied "length" or the actual
 *         number of creatable agents, whichever is fewer.
 *
 *     length - Maximum length of "agents" array
 *
 * Returns:
 *     Maximum number of descriptors that can be returned by this method.
 */
typedef U16 (*BsmAmGetCreatableAgents)(BsmAgentManager *amgr,
                                  BsmAgentDescriptor *agents, U16 length);

/*---------------------------------------------------------------------------
 * BsmAmCreateAgent()
 *     Attempts to create an agent of the service type/flags specified. Type
 *     and flags must match uniquely with one of the items in the
 *     BsmAmGetCreatableAgents list.
 *
 *     Completion is delivered to the handler with an AM_AGENT_CREATED event and
 *     may be issued during this call.
 *
 * Parameters:
 *     amgr - Service Agent Manager of interest.
 *
 *     type - The service type of the agent to be created.
 *
 *     mode - The modes associated with the service agent to be created.
 *
 *     name - The initial name of the service to advertise. May be 0 to use default
 *         or if a name is not necessary.
 *
 *     agentRecordId - A record ID reserved for the agent which may be used to
 *         persist information in the BsmPersistenceManager provided earlier
 *         to the init method.
 */
typedef void (*BsmAmCreateAgent)(BsmAgentManager *amgr, BsmServiceClassUuid type,
    BsmServiceMode mode, const U8 *name, BsmPersRecordId agentRecordId);

/*---------------------------------------------------------------------------
 * BsmAmDestroyAgent()
 *     Destroys this service agent. When agent destruction is complete,
 *     AM_AGENT_DESTROYED is sent to the handler.
 *
 * Parameters:
 *     amgr - Service Agent Manager of interest.
 *
 *     agent - Agent to destroy
 *
 *     isShutDown - TRUE if the agent is being shutdown as when the application
 *         is shutdown FALSE otherwise.
 */
typedef void (*BsmAmDestroyAgent)(BsmAgentManager *amgr, BsmServiceAgent *agent, 
    BOOL isShutdown);

/*---------------------------------------------------------------------------
 * BsmAgentManager structure
 *
 *     The Agent Manager handles all requests from the BSM to discover
 *     and create Service Agents.
 *
 *     Implementers must fill in each member with an appropriate function
 *     pointer.
 */
struct _BsmAgentManager
{
    /* Initializes the agent manager */
    BsmAmInit init;

    BsmInitAgents initAgents;

    /* Returns descriptors for agents which this entity can create */
    BsmAmGetCreatableAgents getCreatableAgents;

    /* Creates an agent */
    BsmAmCreateAgent createAgent;

    /* Destroys a previously created agent */
    BsmAmDestroyAgent destroyAgent;
};


#endif /* __BSMPROFMAN_H */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vpn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* VpnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VpnMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VpnMessage_VpnMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vpn_2eproto() {
  protobuf_AddDesc_vpn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vpn.proto");
  GOOGLE_CHECK(file != NULL);
  VpnMessage_descriptor_ = file->message_type(0);
  static const int VpnMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnMessage, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnMessage, pub_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnMessage, originator_),
  };
  VpnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VpnMessage_descriptor_,
      VpnMessage::default_instance_,
      VpnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VpnMessage));
  VpnMessage_VpnMode_descriptor_ = VpnMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vpn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VpnMessage_descriptor_, &VpnMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vpn_2eproto() {
  delete VpnMessage::default_instance_;
  delete VpnMessage_reflection_;
}

void protobuf_AddDesc_vpn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tvpn.proto\022\013ecu.lapi.pb\"\233\001\n\nVpnMessage\022"
    "\021\n\ttimestamp\030\001 \001(\004\022\021\n\thandshake\030\002 \001(\r\022\017\n"
    "\007pub_key\030\003 \001(\t\0223\n\noriginator\030\004 \001(\0162\037.ecu"
    ".lapi.pb.VpnMessage.VpnMode\"!\n\007VpnMode\022\n"
    "\n\006SERVER\020\000\022\n\n\006CLIENT\020\001", 182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vpn.proto", &protobuf_RegisterTypes);
  VpnMessage::default_instance_ = new VpnMessage();
  VpnMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vpn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vpn_2eproto {
  StaticDescriptorInitializer_vpn_2eproto() {
    protobuf_AddDesc_vpn_2eproto();
  }
} static_descriptor_initializer_vpn_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* VpnMessage_VpnMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VpnMessage_VpnMode_descriptor_;
}
bool VpnMessage_VpnMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VpnMessage_VpnMode VpnMessage::SERVER;
const VpnMessage_VpnMode VpnMessage::CLIENT;
const VpnMessage_VpnMode VpnMessage::VpnMode_MIN;
const VpnMessage_VpnMode VpnMessage::VpnMode_MAX;
const int VpnMessage::VpnMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VpnMessage::kTimestampFieldNumber;
const int VpnMessage::kHandshakeFieldNumber;
const int VpnMessage::kPubKeyFieldNumber;
const int VpnMessage::kOriginatorFieldNumber;
#endif  // !_MSC_VER

VpnMessage::VpnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.VpnMessage)
}

void VpnMessage::InitAsDefaultInstance() {
}

VpnMessage::VpnMessage(const VpnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.VpnMessage)
}

void VpnMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  handshake_ = 0u;
  pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originator_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VpnMessage::~VpnMessage() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.VpnMessage)
  SharedDtor();
}

void VpnMessage::SharedDtor() {
  if (pub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pub_key_;
  }
  if (this != default_instance_) {
  }
}

void VpnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VpnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VpnMessage_descriptor_;
}

const VpnMessage& VpnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vpn_2eproto();
  return *default_instance_;
}

VpnMessage* VpnMessage::default_instance_ = NULL;

VpnMessage* VpnMessage::New() const {
  return new VpnMessage;
}

void VpnMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VpnMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(handshake_, originator_);
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_pub_key()) {
      if (pub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pub_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VpnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.VpnMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handshake;
        break;
      }

      // optional uint32 handshake = 2;
      case 2: {
        if (tag == 16) {
         parse_handshake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handshake_)));
          set_has_handshake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pub_key;
        break;
      }

      // optional string pub_key = 3;
      case 3: {
        if (tag == 26) {
         parse_pub_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pub_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pub_key().data(), this->pub_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pub_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_originator;
        break;
      }

      // optional .ecu.lapi.pb.VpnMessage.VpnMode originator = 4;
      case 4: {
        if (tag == 32) {
         parse_originator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::VpnMessage_VpnMode_IsValid(value)) {
            set_originator(static_cast< ::ecu::lapi::pb::VpnMessage_VpnMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.VpnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.VpnMessage)
  return false;
#undef DO_
}

void VpnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.VpnMessage)
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint32 handshake = 2;
  if (has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handshake(), output);
  }

  // optional string pub_key = 3;
  if (has_pub_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pub_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pub_key(), output);
  }

  // optional .ecu.lapi.pb.VpnMessage.VpnMode originator = 4;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->originator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.VpnMessage)
}

::google::protobuf::uint8* VpnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.VpnMessage)
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint32 handshake = 2;
  if (has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->handshake(), target);
  }

  // optional string pub_key = 3;
  if (has_pub_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pub_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pub_key(), target);
  }

  // optional .ecu.lapi.pb.VpnMessage.VpnMode originator = 4;
  if (has_originator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->originator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.VpnMessage)
  return target;
}

int VpnMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 handshake = 2;
    if (has_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handshake());
    }

    // optional string pub_key = 3;
    if (has_pub_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pub_key());
    }

    // optional .ecu.lapi.pb.VpnMessage.VpnMode originator = 4;
    if (has_originator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->originator());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VpnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VpnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VpnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VpnMessage::MergeFrom(const VpnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_handshake()) {
      set_handshake(from.handshake());
    }
    if (from.has_pub_key()) {
      set_pub_key(from.pub_key());
    }
    if (from.has_originator()) {
      set_originator(from.originator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VpnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VpnMessage::CopyFrom(const VpnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpnMessage::IsInitialized() const {

  return true;
}

void VpnMessage::Swap(VpnMessage* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(handshake_, other->handshake_);
    std::swap(pub_key_, other->pub_key_);
    std::swap(originator_, other->originator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VpnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VpnMessage_descriptor_;
  metadata.reflection = VpnMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

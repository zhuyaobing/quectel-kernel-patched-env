// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpn.proto

#ifndef PROTOBUF_vpn_2eproto__INCLUDED
#define PROTOBUF_vpn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vpn_2eproto();
void protobuf_AssignDesc_vpn_2eproto();
void protobuf_ShutdownFile_vpn_2eproto();

class VpnMessage;

enum VpnMessage_VpnMode {
  VpnMessage_VpnMode_SERVER = 0,
  VpnMessage_VpnMode_CLIENT = 1
};
bool VpnMessage_VpnMode_IsValid(int value);
const VpnMessage_VpnMode VpnMessage_VpnMode_VpnMode_MIN = VpnMessage_VpnMode_SERVER;
const VpnMessage_VpnMode VpnMessage_VpnMode_VpnMode_MAX = VpnMessage_VpnMode_CLIENT;
const int VpnMessage_VpnMode_VpnMode_ARRAYSIZE = VpnMessage_VpnMode_VpnMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VpnMessage_VpnMode_descriptor();
inline const ::std::string& VpnMessage_VpnMode_Name(VpnMessage_VpnMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VpnMessage_VpnMode_descriptor(), value);
}
inline bool VpnMessage_VpnMode_Parse(
    const ::std::string& name, VpnMessage_VpnMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VpnMessage_VpnMode>(
    VpnMessage_VpnMode_descriptor(), name, value);
}
// ===================================================================

class VpnMessage : public ::google::protobuf::Message {
 public:
  VpnMessage();
  virtual ~VpnMessage();

  VpnMessage(const VpnMessage& from);

  inline VpnMessage& operator=(const VpnMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VpnMessage& default_instance();

  void Swap(VpnMessage* other);

  // implements Message ----------------------------------------------

  VpnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VpnMessage& from);
  void MergeFrom(const VpnMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VpnMessage_VpnMode VpnMode;
  static const VpnMode SERVER = VpnMessage_VpnMode_SERVER;
  static const VpnMode CLIENT = VpnMessage_VpnMode_CLIENT;
  static inline bool VpnMode_IsValid(int value) {
    return VpnMessage_VpnMode_IsValid(value);
  }
  static const VpnMode VpnMode_MIN =
    VpnMessage_VpnMode_VpnMode_MIN;
  static const VpnMode VpnMode_MAX =
    VpnMessage_VpnMode_VpnMode_MAX;
  static const int VpnMode_ARRAYSIZE =
    VpnMessage_VpnMode_VpnMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VpnMode_descriptor() {
    return VpnMessage_VpnMode_descriptor();
  }
  static inline const ::std::string& VpnMode_Name(VpnMode value) {
    return VpnMessage_VpnMode_Name(value);
  }
  static inline bool VpnMode_Parse(const ::std::string& name,
      VpnMode* value) {
    return VpnMessage_VpnMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional uint32 handshake = 2;
  inline bool has_handshake() const;
  inline void clear_handshake();
  static const int kHandshakeFieldNumber = 2;
  inline ::google::protobuf::uint32 handshake() const;
  inline void set_handshake(::google::protobuf::uint32 value);

  // optional string pub_key = 3;
  inline bool has_pub_key() const;
  inline void clear_pub_key();
  static const int kPubKeyFieldNumber = 3;
  inline const ::std::string& pub_key() const;
  inline void set_pub_key(const ::std::string& value);
  inline void set_pub_key(const char* value);
  inline void set_pub_key(const char* value, size_t size);
  inline ::std::string* mutable_pub_key();
  inline ::std::string* release_pub_key();
  inline void set_allocated_pub_key(::std::string* pub_key);

  // optional .ecu.lapi.pb.VpnMessage.VpnMode originator = 4;
  inline bool has_originator() const;
  inline void clear_originator();
  static const int kOriginatorFieldNumber = 4;
  inline ::ecu::lapi::pb::VpnMessage_VpnMode originator() const;
  inline void set_originator(::ecu::lapi::pb::VpnMessage_VpnMode value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.VpnMessage)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_handshake();
  inline void clear_has_handshake();
  inline void set_has_pub_key();
  inline void clear_has_pub_key();
  inline void set_has_originator();
  inline void clear_has_originator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* pub_key_;
  ::google::protobuf::uint32 handshake_;
  int originator_;
  friend void  protobuf_AddDesc_vpn_2eproto();
  friend void protobuf_AssignDesc_vpn_2eproto();
  friend void protobuf_ShutdownFile_vpn_2eproto();

  void InitAsDefaultInstance();
  static VpnMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// VpnMessage

// optional uint64 timestamp = 1;
inline bool VpnMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VpnMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VpnMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VpnMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 VpnMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.VpnMessage.timestamp)
  return timestamp_;
}
inline void VpnMessage::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.VpnMessage.timestamp)
}

// optional uint32 handshake = 2;
inline bool VpnMessage::has_handshake() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VpnMessage::set_has_handshake() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VpnMessage::clear_has_handshake() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VpnMessage::clear_handshake() {
  handshake_ = 0u;
  clear_has_handshake();
}
inline ::google::protobuf::uint32 VpnMessage::handshake() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.VpnMessage.handshake)
  return handshake_;
}
inline void VpnMessage::set_handshake(::google::protobuf::uint32 value) {
  set_has_handshake();
  handshake_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.VpnMessage.handshake)
}

// optional string pub_key = 3;
inline bool VpnMessage::has_pub_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VpnMessage::set_has_pub_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VpnMessage::clear_has_pub_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VpnMessage::clear_pub_key() {
  if (pub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pub_key_->clear();
  }
  clear_has_pub_key();
}
inline const ::std::string& VpnMessage::pub_key() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.VpnMessage.pub_key)
  return *pub_key_;
}
inline void VpnMessage::set_pub_key(const ::std::string& value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.VpnMessage.pub_key)
}
inline void VpnMessage::set_pub_key(const char* value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.VpnMessage.pub_key)
}
inline void VpnMessage::set_pub_key(const char* value, size_t size) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.VpnMessage.pub_key)
}
inline ::std::string* VpnMessage::mutable_pub_key() {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pub_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.VpnMessage.pub_key)
  return pub_key_;
}
inline ::std::string* VpnMessage::release_pub_key() {
  clear_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pub_key_;
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VpnMessage::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pub_key_;
  }
  if (pub_key) {
    set_has_pub_key();
    pub_key_ = pub_key;
  } else {
    clear_has_pub_key();
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.VpnMessage.pub_key)
}

// optional .ecu.lapi.pb.VpnMessage.VpnMode originator = 4;
inline bool VpnMessage::has_originator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VpnMessage::set_has_originator() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VpnMessage::clear_has_originator() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VpnMessage::clear_originator() {
  originator_ = 0;
  clear_has_originator();
}
inline ::ecu::lapi::pb::VpnMessage_VpnMode VpnMessage::originator() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.VpnMessage.originator)
  return static_cast< ::ecu::lapi::pb::VpnMessage_VpnMode >(originator_);
}
inline void VpnMessage::set_originator(::ecu::lapi::pb::VpnMessage_VpnMode value) {
  assert(::ecu::lapi::pb::VpnMessage_VpnMode_IsValid(value));
  set_has_originator();
  originator_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.VpnMessage.originator)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecu::lapi::pb::VpnMessage_VpnMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::VpnMessage_VpnMode>() {
  return ::ecu::lapi::pb::VpnMessage_VpnMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vpn_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* RtSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  RtSignal_descriptor_ = file->message_type(0);
  static const int RtSignal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSignal, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSignal, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSignal, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSignal, originator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSignal, set_signals_),
  };
  RtSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtSignal_descriptor_,
      RtSignal::default_instance_,
      RtSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtSignal));
  SubscriptionMessage_descriptor_ = file->message_type(1);
  static const int SubscriptionMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMessage, topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMessage, client_name_),
  };
  SubscriptionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionMessage_descriptor_,
      SubscriptionMessage::default_instance_,
      SubscriptionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionMessage));
  SubscriptionStatus_descriptor_ = file->message_type(2);
  static const int SubscriptionStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionStatus, topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionStatus, num_available_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionStatus, num_subscribed_topics_),
  };
  SubscriptionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionStatus_descriptor_,
      SubscriptionStatus::default_instance_,
      SubscriptionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionStatus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtSignal_descriptor_, &RtSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionMessage_descriptor_, &SubscriptionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionStatus_descriptor_, &SubscriptionStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete RtSignal::default_instance_;
  delete RtSignal_reflection_;
  delete SubscriptionMessage::default_instance_;
  delete SubscriptionMessage_reflection_;
  delete SubscriptionStatus::default_instance_;
  delete SubscriptionStatus_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\013ecu.lapi.pb\"d\n\010RtSignal"
    "\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004data\030\002 \001(\014\022\016\n\006sta"
    "tus\030\003 \001(\r\022\022\n\noriginator\030\004 \001(\t\022\023\n\013set_sig"
    "nals\030\005 \003(\t\":\n\023SubscriptionMessage\022\016\n\006top"
    "ics\030\001 \003(\t\022\023\n\013client_name\030\002 \001(\t\"a\n\022Subscr"
    "iptionStatus\022\016\n\006topics\030\001 \003(\t\022\034\n\024num_avai"
    "lable_topics\030\002 \001(\r\022\035\n\025num_subscribed_top"
    "ics\030\003 \001(\r", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  RtSignal::default_instance_ = new RtSignal();
  SubscriptionMessage::default_instance_ = new SubscriptionMessage();
  SubscriptionStatus::default_instance_ = new SubscriptionStatus();
  RtSignal::default_instance_->InitAsDefaultInstance();
  SubscriptionMessage::default_instance_->InitAsDefaultInstance();
  SubscriptionStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RtSignal::kTimestampFieldNumber;
const int RtSignal::kDataFieldNumber;
const int RtSignal::kStatusFieldNumber;
const int RtSignal::kOriginatorFieldNumber;
const int RtSignal::kSetSignalsFieldNumber;
#endif  // !_MSC_VER

RtSignal::RtSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.RtSignal)
}

void RtSignal::InitAsDefaultInstance() {
}

RtSignal::RtSignal(const RtSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.RtSignal)
}

void RtSignal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  originator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtSignal::~RtSignal() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.RtSignal)
  SharedDtor();
}

void RtSignal::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (originator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete originator_;
  }
  if (this != default_instance_) {
  }
}

void RtSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtSignal_descriptor_;
}

const RtSignal& RtSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RtSignal* RtSignal::default_instance_ = NULL;

RtSignal* RtSignal::New() const {
  return new RtSignal;
}

void RtSignal::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    status_ = 0u;
    if (has_originator()) {
      if (originator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        originator_->clear();
      }
    }
  }
  set_signals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.RtSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_originator;
        break;
      }

      // optional string originator = 4;
      case 4: {
        if (tag == 34) {
         parse_originator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originator().data(), this->originator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "originator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_set_signals;
        break;
      }

      // repeated string set_signals = 5;
      case 5: {
        if (tag == 42) {
         parse_set_signals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_set_signals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->set_signals(this->set_signals_size() - 1).data(),
            this->set_signals(this->set_signals_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "set_signals");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_set_signals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.RtSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.RtSignal)
  return false;
#undef DO_
}

void RtSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.RtSignal)
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional string originator = 4;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originator().data(), this->originator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->originator(), output);
  }

  // repeated string set_signals = 5;
  for (int i = 0; i < this->set_signals_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->set_signals(i).data(), this->set_signals(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "set_signals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->set_signals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.RtSignal)
}

::google::protobuf::uint8* RtSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.RtSignal)
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional string originator = 4;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originator().data(), this->originator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->originator(), target);
  }

  // repeated string set_signals = 5;
  for (int i = 0; i < this->set_signals_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->set_signals(i).data(), this->set_signals(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "set_signals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->set_signals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.RtSignal)
  return target;
}

int RtSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional string originator = 4;
    if (has_originator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originator());
    }

  }
  // repeated string set_signals = 5;
  total_size += 1 * this->set_signals_size();
  for (int i = 0; i < this->set_signals_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->set_signals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtSignal::MergeFrom(const RtSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  set_signals_.MergeFrom(from.set_signals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_originator()) {
      set_originator(from.originator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtSignal::CopyFrom(const RtSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtSignal::IsInitialized() const {

  return true;
}

void RtSignal::Swap(RtSignal* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(data_, other->data_);
    std::swap(status_, other->status_);
    std::swap(originator_, other->originator_);
    set_signals_.Swap(&other->set_signals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtSignal_descriptor_;
  metadata.reflection = RtSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionMessage::kTopicsFieldNumber;
const int SubscriptionMessage::kClientNameFieldNumber;
#endif  // !_MSC_VER

SubscriptionMessage::SubscriptionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.SubscriptionMessage)
}

void SubscriptionMessage::InitAsDefaultInstance() {
}

SubscriptionMessage::SubscriptionMessage(const SubscriptionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.SubscriptionMessage)
}

void SubscriptionMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionMessage::~SubscriptionMessage() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.SubscriptionMessage)
  SharedDtor();
}

void SubscriptionMessage::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionMessage_descriptor_;
}

const SubscriptionMessage& SubscriptionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

SubscriptionMessage* SubscriptionMessage::default_instance_ = NULL;

SubscriptionMessage* SubscriptionMessage::New() const {
  return new SubscriptionMessage;
}

void SubscriptionMessage::Clear() {
  if (has_client_name()) {
    if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      client_name_->clear();
    }
  }
  topics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.SubscriptionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topics = 1;
      case 1: {
        if (tag == 10) {
         parse_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topics(this->topics_size() - 1).data(),
            this->topics(this->topics_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topics");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topics;
        if (input->ExpectTag(18)) goto parse_client_name;
        break;
      }

      // optional string client_name = 2;
      case 2: {
        if (tag == 18) {
         parse_client_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.SubscriptionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.SubscriptionMessage)
  return false;
#undef DO_
}

void SubscriptionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.SubscriptionMessage)
  // repeated string topics = 1;
  for (int i = 0; i < this->topics_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->topics(i).data(), this->topics(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topics(i), output);
  }

  // optional string client_name = 2;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.SubscriptionMessage)
}

::google::protobuf::uint8* SubscriptionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.SubscriptionMessage)
  // repeated string topics = 1;
  for (int i = 0; i < this->topics_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topics(i).data(), this->topics(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topics(i), target);
  }

  // optional string client_name = 2;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.SubscriptionMessage)
  return target;
}

int SubscriptionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string client_name = 2;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

  }
  // repeated string topics = 1;
  total_size += 1 * this->topics_size();
  for (int i = 0; i < this->topics_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionMessage::MergeFrom(const SubscriptionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  topics_.MergeFrom(from.topics_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionMessage::CopyFrom(const SubscriptionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionMessage::IsInitialized() const {

  return true;
}

void SubscriptionMessage::Swap(SubscriptionMessage* other) {
  if (other != this) {
    topics_.Swap(&other->topics_);
    std::swap(client_name_, other->client_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionMessage_descriptor_;
  metadata.reflection = SubscriptionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionStatus::kTopicsFieldNumber;
const int SubscriptionStatus::kNumAvailableTopicsFieldNumber;
const int SubscriptionStatus::kNumSubscribedTopicsFieldNumber;
#endif  // !_MSC_VER

SubscriptionStatus::SubscriptionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.SubscriptionStatus)
}

void SubscriptionStatus::InitAsDefaultInstance() {
}

SubscriptionStatus::SubscriptionStatus(const SubscriptionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.SubscriptionStatus)
}

void SubscriptionStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_available_topics_ = 0u;
  num_subscribed_topics_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionStatus::~SubscriptionStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.SubscriptionStatus)
  SharedDtor();
}

void SubscriptionStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionStatus_descriptor_;
}

const SubscriptionStatus& SubscriptionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

SubscriptionStatus* SubscriptionStatus::default_instance_ = NULL;

SubscriptionStatus* SubscriptionStatus::New() const {
  return new SubscriptionStatus;
}

void SubscriptionStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubscriptionStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_available_topics_, num_subscribed_topics_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  topics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.SubscriptionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topics = 1;
      case 1: {
        if (tag == 10) {
         parse_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topics(this->topics_size() - 1).data(),
            this->topics(this->topics_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topics");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topics;
        if (input->ExpectTag(16)) goto parse_num_available_topics;
        break;
      }

      // optional uint32 num_available_topics = 2;
      case 2: {
        if (tag == 16) {
         parse_num_available_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_available_topics_)));
          set_has_num_available_topics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_subscribed_topics;
        break;
      }

      // optional uint32 num_subscribed_topics = 3;
      case 3: {
        if (tag == 24) {
         parse_num_subscribed_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_subscribed_topics_)));
          set_has_num_subscribed_topics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.SubscriptionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.SubscriptionStatus)
  return false;
#undef DO_
}

void SubscriptionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.SubscriptionStatus)
  // repeated string topics = 1;
  for (int i = 0; i < this->topics_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->topics(i).data(), this->topics(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topics(i), output);
  }

  // optional uint32 num_available_topics = 2;
  if (has_num_available_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_available_topics(), output);
  }

  // optional uint32 num_subscribed_topics = 3;
  if (has_num_subscribed_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_subscribed_topics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.SubscriptionStatus)
}

::google::protobuf::uint8* SubscriptionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.SubscriptionStatus)
  // repeated string topics = 1;
  for (int i = 0; i < this->topics_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topics(i).data(), this->topics(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topics(i), target);
  }

  // optional uint32 num_available_topics = 2;
  if (has_num_available_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_available_topics(), target);
  }

  // optional uint32 num_subscribed_topics = 3;
  if (has_num_subscribed_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_subscribed_topics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.SubscriptionStatus)
  return target;
}

int SubscriptionStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 num_available_topics = 2;
    if (has_num_available_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_available_topics());
    }

    // optional uint32 num_subscribed_topics = 3;
    if (has_num_subscribed_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_subscribed_topics());
    }

  }
  // repeated string topics = 1;
  total_size += 1 * this->topics_size();
  for (int i = 0; i < this->topics_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionStatus::MergeFrom(const SubscriptionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  topics_.MergeFrom(from.topics_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_num_available_topics()) {
      set_num_available_topics(from.num_available_topics());
    }
    if (from.has_num_subscribed_topics()) {
      set_num_subscribed_topics(from.num_subscribed_topics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionStatus::CopyFrom(const SubscriptionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionStatus::IsInitialized() const {

  return true;
}

void SubscriptionStatus::Swap(SubscriptionStatus* other) {
  if (other != this) {
    topics_.Swap(&other->topics_);
    std::swap(num_available_topics_, other->num_available_topics_);
    std::swap(num_subscribed_topics_, other->num_subscribed_topics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionStatus_descriptor_;
  metadata.reflection = SubscriptionStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tpa.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tpa.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* TPAStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPAStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPANetworkStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPANetworkStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPANetworkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPANetworkRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tpa_2eproto() {
  protobuf_AddDesc_tpa_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tpa.proto");
  GOOGLE_CHECK(file != NULL);
  TPAStatus_descriptor_ = file->message_type(0);
  static const int TPAStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPAStatus, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPAStatus, started_),
  };
  TPAStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPAStatus_descriptor_,
      TPAStatus::default_instance_,
      TPAStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPAStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPAStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPAStatus));
  TPANetworkStatus_descriptor_ = file->message_type(1);
  static const int TPANetworkStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPANetworkStatus, blocked_),
  };
  TPANetworkStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPANetworkStatus_descriptor_,
      TPANetworkStatus::default_instance_,
      TPANetworkStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPANetworkStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPANetworkStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPANetworkStatus));
  TPANetworkRequest_descriptor_ = file->message_type(2);
  static const int TPANetworkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPANetworkRequest, block_),
  };
  TPANetworkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPANetworkRequest_descriptor_,
      TPANetworkRequest::default_instance_,
      TPANetworkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPANetworkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPANetworkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPANetworkRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tpa_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPAStatus_descriptor_, &TPAStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPANetworkStatus_descriptor_, &TPANetworkStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPANetworkRequest_descriptor_, &TPANetworkRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tpa_2eproto() {
  delete TPAStatus::default_instance_;
  delete TPAStatus_reflection_;
  delete TPANetworkStatus::default_instance_;
  delete TPANetworkStatus_reflection_;
  delete TPANetworkRequest::default_instance_;
  delete TPANetworkRequest_reflection_;
}

void protobuf_AddDesc_tpa_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttpa.proto\022\013ecu.lapi.pb\"/\n\tTPAStatus\022\021\n"
    "\tavailable\030\001 \001(\010\022\017\n\007started\030\002 \001(\010\"#\n\020TPA"
    "NetworkStatus\022\017\n\007blocked\030\001 \001(\010\"\"\n\021TPANet"
    "workRequest\022\r\n\005block\030\001 \001(\010", 146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tpa.proto", &protobuf_RegisterTypes);
  TPAStatus::default_instance_ = new TPAStatus();
  TPANetworkStatus::default_instance_ = new TPANetworkStatus();
  TPANetworkRequest::default_instance_ = new TPANetworkRequest();
  TPAStatus::default_instance_->InitAsDefaultInstance();
  TPANetworkStatus::default_instance_->InitAsDefaultInstance();
  TPANetworkRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tpa_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tpa_2eproto {
  StaticDescriptorInitializer_tpa_2eproto() {
    protobuf_AddDesc_tpa_2eproto();
  }
} static_descriptor_initializer_tpa_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TPAStatus::kAvailableFieldNumber;
const int TPAStatus::kStartedFieldNumber;
#endif  // !_MSC_VER

TPAStatus::TPAStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.TPAStatus)
}

void TPAStatus::InitAsDefaultInstance() {
}

TPAStatus::TPAStatus(const TPAStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.TPAStatus)
}

void TPAStatus::SharedCtor() {
  _cached_size_ = 0;
  available_ = false;
  started_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPAStatus::~TPAStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.TPAStatus)
  SharedDtor();
}

void TPAStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPAStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPAStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPAStatus_descriptor_;
}

const TPAStatus& TPAStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tpa_2eproto();
  return *default_instance_;
}

TPAStatus* TPAStatus::default_instance_ = NULL;

TPAStatus* TPAStatus::New() const {
  return new TPAStatus;
}

void TPAStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPAStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(available_, started_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPAStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.TPAStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool available = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_started;
        break;
      }

      // optional bool started = 2;
      case 2: {
        if (tag == 16) {
         parse_started:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &started_)));
          set_has_started();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.TPAStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.TPAStatus)
  return false;
#undef DO_
}

void TPAStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.TPAStatus)
  // optional bool available = 1;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->available(), output);
  }

  // optional bool started = 2;
  if (has_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->started(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.TPAStatus)
}

::google::protobuf::uint8* TPAStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.TPAStatus)
  // optional bool available = 1;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->available(), target);
  }

  // optional bool started = 2;
  if (has_started()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->started(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.TPAStatus)
  return target;
}

int TPAStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool available = 1;
    if (has_available()) {
      total_size += 1 + 1;
    }

    // optional bool started = 2;
    if (has_started()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPAStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPAStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPAStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPAStatus::MergeFrom(const TPAStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_started()) {
      set_started(from.started());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPAStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPAStatus::CopyFrom(const TPAStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPAStatus::IsInitialized() const {

  return true;
}

void TPAStatus::Swap(TPAStatus* other) {
  if (other != this) {
    std::swap(available_, other->available_);
    std::swap(started_, other->started_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPAStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPAStatus_descriptor_;
  metadata.reflection = TPAStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPANetworkStatus::kBlockedFieldNumber;
#endif  // !_MSC_VER

TPANetworkStatus::TPANetworkStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.TPANetworkStatus)
}

void TPANetworkStatus::InitAsDefaultInstance() {
}

TPANetworkStatus::TPANetworkStatus(const TPANetworkStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.TPANetworkStatus)
}

void TPANetworkStatus::SharedCtor() {
  _cached_size_ = 0;
  blocked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPANetworkStatus::~TPANetworkStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.TPANetworkStatus)
  SharedDtor();
}

void TPANetworkStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPANetworkStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPANetworkStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPANetworkStatus_descriptor_;
}

const TPANetworkStatus& TPANetworkStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tpa_2eproto();
  return *default_instance_;
}

TPANetworkStatus* TPANetworkStatus::default_instance_ = NULL;

TPANetworkStatus* TPANetworkStatus::New() const {
  return new TPANetworkStatus;
}

void TPANetworkStatus::Clear() {
  blocked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPANetworkStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.TPANetworkStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool blocked = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blocked_)));
          set_has_blocked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.TPANetworkStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.TPANetworkStatus)
  return false;
#undef DO_
}

void TPANetworkStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.TPANetworkStatus)
  // optional bool blocked = 1;
  if (has_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->blocked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.TPANetworkStatus)
}

::google::protobuf::uint8* TPANetworkStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.TPANetworkStatus)
  // optional bool blocked = 1;
  if (has_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->blocked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.TPANetworkStatus)
  return target;
}

int TPANetworkStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool blocked = 1;
    if (has_blocked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPANetworkStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPANetworkStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPANetworkStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPANetworkStatus::MergeFrom(const TPANetworkStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocked()) {
      set_blocked(from.blocked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPANetworkStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPANetworkStatus::CopyFrom(const TPANetworkStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPANetworkStatus::IsInitialized() const {

  return true;
}

void TPANetworkStatus::Swap(TPANetworkStatus* other) {
  if (other != this) {
    std::swap(blocked_, other->blocked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPANetworkStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPANetworkStatus_descriptor_;
  metadata.reflection = TPANetworkStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPANetworkRequest::kBlockFieldNumber;
#endif  // !_MSC_VER

TPANetworkRequest::TPANetworkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.TPANetworkRequest)
}

void TPANetworkRequest::InitAsDefaultInstance() {
}

TPANetworkRequest::TPANetworkRequest(const TPANetworkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.TPANetworkRequest)
}

void TPANetworkRequest::SharedCtor() {
  _cached_size_ = 0;
  block_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPANetworkRequest::~TPANetworkRequest() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.TPANetworkRequest)
  SharedDtor();
}

void TPANetworkRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPANetworkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPANetworkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPANetworkRequest_descriptor_;
}

const TPANetworkRequest& TPANetworkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tpa_2eproto();
  return *default_instance_;
}

TPANetworkRequest* TPANetworkRequest::default_instance_ = NULL;

TPANetworkRequest* TPANetworkRequest::New() const {
  return new TPANetworkRequest;
}

void TPANetworkRequest::Clear() {
  block_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPANetworkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.TPANetworkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool block = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.TPANetworkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.TPANetworkRequest)
  return false;
#undef DO_
}

void TPANetworkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.TPANetworkRequest)
  // optional bool block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.TPANetworkRequest)
}

::google::protobuf::uint8* TPANetworkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.TPANetworkRequest)
  // optional bool block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.TPANetworkRequest)
  return target;
}

int TPANetworkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool block = 1;
    if (has_block()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPANetworkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPANetworkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPANetworkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPANetworkRequest::MergeFrom(const TPANetworkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      set_block(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPANetworkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPANetworkRequest::CopyFrom(const TPANetworkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPANetworkRequest::IsInitialized() const {

  return true;
}

void TPANetworkRequest::Swap(TPANetworkRequest* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPANetworkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPANetworkRequest_descriptor_;
  metadata.reflection = TPANetworkRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

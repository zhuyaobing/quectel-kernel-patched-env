// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: platform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "platform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* ApplicationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplicationStatus_RunState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplicationStatus_InstallState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_platform_2eproto() {
  protobuf_AddDesc_platform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "platform.proto");
  GOOGLE_CHECK(file != NULL);
  ApplicationStatus_descriptor_ = file->message_type(0);
  static const int ApplicationStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, install_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, run_state_),
  };
  ApplicationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationStatus_descriptor_,
      ApplicationStatus::default_instance_,
      ApplicationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationStatus));
  ApplicationStatus_RunState_descriptor_ = ApplicationStatus_descriptor_->enum_type(0);
  ApplicationStatus_InstallState_descriptor_ = ApplicationStatus_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_platform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationStatus_descriptor_, &ApplicationStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_platform_2eproto() {
  delete ApplicationStatus::default_instance_;
  delete ApplicationStatus_reflection_;
}

void protobuf_AddDesc_platform_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016platform.proto\022\013ecu.lapi.pb\"\312\003\n\021Applic"
    "ationStatus\022B\n\rinstall_state\030\001 \001(\0162+.ecu"
    ".lapi.pb.ApplicationStatus.InstallState\022"
    ":\n\trun_state\030\002 \001(\0162\'.ecu.lapi.pb.Applica"
    "tionStatus.RunState\"\201\001\n\010RunState\022\014\n\010RS_E"
    "RROR\020\000\022\r\n\tRS_ACTIVE\020\001\022\021\n\rRS_ACTIVATING\020\002"
    "\022\023\n\017RS_DEACTIVATING\020\003\022\020\n\014RS_RELOADING\020\004\022"
    "\017\n\013RS_INACTIVE\020\005\022\r\n\tRS_FAILED\020\006\"\260\001\n\014Inst"
    "allState\022\014\n\010IS_ERROR\020\000\022\017\n\013IS_DISABLED\020\001\022"
    "\016\n\nIS_ENABLED\020\002\022\026\n\022IS_ENABLED_RUNTIME\020\003\022"
    "\r\n\tIS_LINKED\020\004\022\025\n\021IS_LINKED_RUNTIME\020\005\022\r\n"
    "\tIS_MASKED\020\006\022\025\n\021IS_MASKED_RUNTIME\020\007\022\r\n\tI"
    "S_STATIC\020\010", 490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "platform.proto", &protobuf_RegisterTypes);
  ApplicationStatus::default_instance_ = new ApplicationStatus();
  ApplicationStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_platform_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_platform_2eproto {
  StaticDescriptorInitializer_platform_2eproto() {
    protobuf_AddDesc_platform_2eproto();
  }
} static_descriptor_initializer_platform_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ApplicationStatus_RunState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationStatus_RunState_descriptor_;
}
bool ApplicationStatus_RunState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ApplicationStatus_RunState ApplicationStatus::RS_ERROR;
const ApplicationStatus_RunState ApplicationStatus::RS_ACTIVE;
const ApplicationStatus_RunState ApplicationStatus::RS_ACTIVATING;
const ApplicationStatus_RunState ApplicationStatus::RS_DEACTIVATING;
const ApplicationStatus_RunState ApplicationStatus::RS_RELOADING;
const ApplicationStatus_RunState ApplicationStatus::RS_INACTIVE;
const ApplicationStatus_RunState ApplicationStatus::RS_FAILED;
const ApplicationStatus_RunState ApplicationStatus::RunState_MIN;
const ApplicationStatus_RunState ApplicationStatus::RunState_MAX;
const int ApplicationStatus::RunState_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ApplicationStatus_InstallState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationStatus_InstallState_descriptor_;
}
bool ApplicationStatus_InstallState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ApplicationStatus_InstallState ApplicationStatus::IS_ERROR;
const ApplicationStatus_InstallState ApplicationStatus::IS_DISABLED;
const ApplicationStatus_InstallState ApplicationStatus::IS_ENABLED;
const ApplicationStatus_InstallState ApplicationStatus::IS_ENABLED_RUNTIME;
const ApplicationStatus_InstallState ApplicationStatus::IS_LINKED;
const ApplicationStatus_InstallState ApplicationStatus::IS_LINKED_RUNTIME;
const ApplicationStatus_InstallState ApplicationStatus::IS_MASKED;
const ApplicationStatus_InstallState ApplicationStatus::IS_MASKED_RUNTIME;
const ApplicationStatus_InstallState ApplicationStatus::IS_STATIC;
const ApplicationStatus_InstallState ApplicationStatus::InstallState_MIN;
const ApplicationStatus_InstallState ApplicationStatus::InstallState_MAX;
const int ApplicationStatus::InstallState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ApplicationStatus::kInstallStateFieldNumber;
const int ApplicationStatus::kRunStateFieldNumber;
#endif  // !_MSC_VER

ApplicationStatus::ApplicationStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.ApplicationStatus)
}

void ApplicationStatus::InitAsDefaultInstance() {
}

ApplicationStatus::ApplicationStatus(const ApplicationStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.ApplicationStatus)
}

void ApplicationStatus::SharedCtor() {
  _cached_size_ = 0;
  install_state_ = 0;
  run_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationStatus::~ApplicationStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.ApplicationStatus)
  SharedDtor();
}

void ApplicationStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplicationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationStatus_descriptor_;
}

const ApplicationStatus& ApplicationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_platform_2eproto();
  return *default_instance_;
}

ApplicationStatus* ApplicationStatus::default_instance_ = NULL;

ApplicationStatus* ApplicationStatus::New() const {
  return new ApplicationStatus;
}

void ApplicationStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ApplicationStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(install_state_, run_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.ApplicationStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.ApplicationStatus.InstallState install_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::ApplicationStatus_InstallState_IsValid(value)) {
            set_install_state(static_cast< ::ecu::lapi::pb::ApplicationStatus_InstallState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_run_state;
        break;
      }

      // optional .ecu.lapi.pb.ApplicationStatus.RunState run_state = 2;
      case 2: {
        if (tag == 16) {
         parse_run_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::ApplicationStatus_RunState_IsValid(value)) {
            set_run_state(static_cast< ::ecu::lapi::pb::ApplicationStatus_RunState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.ApplicationStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.ApplicationStatus)
  return false;
#undef DO_
}

void ApplicationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.ApplicationStatus)
  // optional .ecu.lapi.pb.ApplicationStatus.InstallState install_state = 1;
  if (has_install_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->install_state(), output);
  }

  // optional .ecu.lapi.pb.ApplicationStatus.RunState run_state = 2;
  if (has_run_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->run_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.ApplicationStatus)
}

::google::protobuf::uint8* ApplicationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.ApplicationStatus)
  // optional .ecu.lapi.pb.ApplicationStatus.InstallState install_state = 1;
  if (has_install_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->install_state(), target);
  }

  // optional .ecu.lapi.pb.ApplicationStatus.RunState run_state = 2;
  if (has_run_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->run_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.ApplicationStatus)
  return target;
}

int ApplicationStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.ApplicationStatus.InstallState install_state = 1;
    if (has_install_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->install_state());
    }

    // optional .ecu.lapi.pb.ApplicationStatus.RunState run_state = 2;
    if (has_run_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->run_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationStatus::MergeFrom(const ApplicationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_install_state()) {
      set_install_state(from.install_state());
    }
    if (from.has_run_state()) {
      set_run_state(from.run_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationStatus::CopyFrom(const ApplicationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationStatus::IsInitialized() const {

  return true;
}

void ApplicationStatus::Swap(ApplicationStatus* other) {
  if (other != this) {
    std::swap(install_state_, other->install_state_);
    std::swap(run_state_, other->run_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationStatus_descriptor_;
  metadata.reflection = ApplicationStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

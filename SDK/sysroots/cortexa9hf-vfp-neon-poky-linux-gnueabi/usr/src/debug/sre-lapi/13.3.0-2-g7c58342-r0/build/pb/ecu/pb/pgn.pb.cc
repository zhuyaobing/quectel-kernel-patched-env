// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pgn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pgn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* PgnRequestTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PgnRequestTokenRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PgnRequestTokenRequest_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PgnRequestTokenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PgnRequestTokenResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PgnRequestTokenResponse_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pgn_2eproto() {
  protobuf_AddDesc_pgn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pgn.proto");
  GOOGLE_CHECK(file != NULL);
  PgnRequestTokenRequest_descriptor_ = file->message_type(0);
  static const int PgnRequestTokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenRequest, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenRequest, client_name_),
  };
  PgnRequestTokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PgnRequestTokenRequest_descriptor_,
      PgnRequestTokenRequest::default_instance_,
      PgnRequestTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PgnRequestTokenRequest));
  PgnRequestTokenRequest_Action_descriptor_ = PgnRequestTokenRequest_descriptor_->enum_type(0);
  PgnRequestTokenResponse_descriptor_ = file->message_type(1);
  static const int PgnRequestTokenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenResponse, requested_ecu_topic_),
  };
  PgnRequestTokenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PgnRequestTokenResponse_descriptor_,
      PgnRequestTokenResponse::default_instance_,
      PgnRequestTokenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgnRequestTokenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PgnRequestTokenResponse));
  PgnRequestTokenResponse_Result_descriptor_ = PgnRequestTokenResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pgn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PgnRequestTokenRequest_descriptor_, &PgnRequestTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PgnRequestTokenResponse_descriptor_, &PgnRequestTokenResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pgn_2eproto() {
  delete PgnRequestTokenRequest::default_instance_;
  delete PgnRequestTokenRequest_reflection_;
  delete PgnRequestTokenResponse::default_instance_;
  delete PgnRequestTokenResponse_reflection_;
}

void protobuf_AddDesc_pgn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpgn.proto\022\013ecu.lapi.pb\"\263\001\n\026PgnRequestT"
    "okenRequest\022:\n\006action\030\001 \001(\0162*.ecu.lapi.p"
    "b.PgnRequestTokenRequest.Action\022\r\n\005topic"
    "\030\002 \001(\t\022\023\n\013client_name\030\003 \001(\t\"9\n\006Action\022\r\n"
    "\tUNDEFINED\020\000\022\r\n\tGET_TOKEN\020\001\022\021\n\rRELEASE_T"
    "OKEN\020\002\"\325\001\n\027PgnRequestTokenResponse\022;\n\006re"
    "sult\030\001 \001(\0162+.ecu.lapi.pb.PgnRequestToken"
    "Response.Result\022\033\n\023requested_ecu_topic\030\002"
    " \001(\t\"`\n\006Result\022\r\n\tUNDEFINED\020\000\022\030\n\024ACTION_"
    "NOT_SUPPORTED\020\001\022\017\n\013ECU_UNKNOWN\020\002\022\022\n\016TOKE"
    "N_ACQUIRED\020\003\022\010\n\004BUSY\020\004", 422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pgn.proto", &protobuf_RegisterTypes);
  PgnRequestTokenRequest::default_instance_ = new PgnRequestTokenRequest();
  PgnRequestTokenResponse::default_instance_ = new PgnRequestTokenResponse();
  PgnRequestTokenRequest::default_instance_->InitAsDefaultInstance();
  PgnRequestTokenResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pgn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pgn_2eproto {
  StaticDescriptorInitializer_pgn_2eproto() {
    protobuf_AddDesc_pgn_2eproto();
  }
} static_descriptor_initializer_pgn_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PgnRequestTokenRequest_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PgnRequestTokenRequest_Action_descriptor_;
}
bool PgnRequestTokenRequest_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PgnRequestTokenRequest_Action PgnRequestTokenRequest::UNDEFINED;
const PgnRequestTokenRequest_Action PgnRequestTokenRequest::GET_TOKEN;
const PgnRequestTokenRequest_Action PgnRequestTokenRequest::RELEASE_TOKEN;
const PgnRequestTokenRequest_Action PgnRequestTokenRequest::Action_MIN;
const PgnRequestTokenRequest_Action PgnRequestTokenRequest::Action_MAX;
const int PgnRequestTokenRequest::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PgnRequestTokenRequest::kActionFieldNumber;
const int PgnRequestTokenRequest::kTopicFieldNumber;
const int PgnRequestTokenRequest::kClientNameFieldNumber;
#endif  // !_MSC_VER

PgnRequestTokenRequest::PgnRequestTokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.PgnRequestTokenRequest)
}

void PgnRequestTokenRequest::InitAsDefaultInstance() {
}

PgnRequestTokenRequest::PgnRequestTokenRequest(const PgnRequestTokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.PgnRequestTokenRequest)
}

void PgnRequestTokenRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  action_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PgnRequestTokenRequest::~PgnRequestTokenRequest() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.PgnRequestTokenRequest)
  SharedDtor();
}

void PgnRequestTokenRequest::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (this != default_instance_) {
  }
}

void PgnRequestTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PgnRequestTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PgnRequestTokenRequest_descriptor_;
}

const PgnRequestTokenRequest& PgnRequestTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pgn_2eproto();
  return *default_instance_;
}

PgnRequestTokenRequest* PgnRequestTokenRequest::default_instance_ = NULL;

PgnRequestTokenRequest* PgnRequestTokenRequest::New() const {
  return new PgnRequestTokenRequest;
}

void PgnRequestTokenRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    action_ = 0;
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_client_name()) {
      if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PgnRequestTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.PgnRequestTokenRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.PgnRequestTokenRequest.Action action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::PgnRequestTokenRequest_Action_IsValid(value)) {
            set_action(static_cast< ::ecu::lapi::pb::PgnRequestTokenRequest_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic;
        break;
      }

      // optional string topic = 2;
      case 2: {
        if (tag == 18) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_name;
        break;
      }

      // optional string client_name = 3;
      case 3: {
        if (tag == 26) {
         parse_client_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.PgnRequestTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.PgnRequestTokenRequest)
  return false;
#undef DO_
}

void PgnRequestTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.PgnRequestTokenRequest)
  // optional .ecu.lapi.pb.PgnRequestTokenRequest.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // optional string client_name = 3;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.PgnRequestTokenRequest)
}

::google::protobuf::uint8* PgnRequestTokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.PgnRequestTokenRequest)
  // optional .ecu.lapi.pb.PgnRequestTokenRequest.Action action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // optional string client_name = 3;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.PgnRequestTokenRequest)
  return target;
}

int PgnRequestTokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.PgnRequestTokenRequest.Action action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional string topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string client_name = 3;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PgnRequestTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PgnRequestTokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PgnRequestTokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PgnRequestTokenRequest::MergeFrom(const PgnRequestTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PgnRequestTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PgnRequestTokenRequest::CopyFrom(const PgnRequestTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PgnRequestTokenRequest::IsInitialized() const {

  return true;
}

void PgnRequestTokenRequest::Swap(PgnRequestTokenRequest* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(topic_, other->topic_);
    std::swap(client_name_, other->client_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PgnRequestTokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PgnRequestTokenRequest_descriptor_;
  metadata.reflection = PgnRequestTokenRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PgnRequestTokenResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PgnRequestTokenResponse_Result_descriptor_;
}
bool PgnRequestTokenResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PgnRequestTokenResponse_Result PgnRequestTokenResponse::UNDEFINED;
const PgnRequestTokenResponse_Result PgnRequestTokenResponse::ACTION_NOT_SUPPORTED;
const PgnRequestTokenResponse_Result PgnRequestTokenResponse::ECU_UNKNOWN;
const PgnRequestTokenResponse_Result PgnRequestTokenResponse::TOKEN_ACQUIRED;
const PgnRequestTokenResponse_Result PgnRequestTokenResponse::BUSY;
const PgnRequestTokenResponse_Result PgnRequestTokenResponse::Result_MIN;
const PgnRequestTokenResponse_Result PgnRequestTokenResponse::Result_MAX;
const int PgnRequestTokenResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PgnRequestTokenResponse::kResultFieldNumber;
const int PgnRequestTokenResponse::kRequestedEcuTopicFieldNumber;
#endif  // !_MSC_VER

PgnRequestTokenResponse::PgnRequestTokenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.PgnRequestTokenResponse)
}

void PgnRequestTokenResponse::InitAsDefaultInstance() {
}

PgnRequestTokenResponse::PgnRequestTokenResponse(const PgnRequestTokenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.PgnRequestTokenResponse)
}

void PgnRequestTokenResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  requested_ecu_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PgnRequestTokenResponse::~PgnRequestTokenResponse() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.PgnRequestTokenResponse)
  SharedDtor();
}

void PgnRequestTokenResponse::SharedDtor() {
  if (requested_ecu_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requested_ecu_topic_;
  }
  if (this != default_instance_) {
  }
}

void PgnRequestTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PgnRequestTokenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PgnRequestTokenResponse_descriptor_;
}

const PgnRequestTokenResponse& PgnRequestTokenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pgn_2eproto();
  return *default_instance_;
}

PgnRequestTokenResponse* PgnRequestTokenResponse::default_instance_ = NULL;

PgnRequestTokenResponse* PgnRequestTokenResponse::New() const {
  return new PgnRequestTokenResponse;
}

void PgnRequestTokenResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0;
    if (has_requested_ecu_topic()) {
      if (requested_ecu_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requested_ecu_topic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PgnRequestTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.PgnRequestTokenResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.PgnRequestTokenResponse.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::PgnRequestTokenResponse_Result_IsValid(value)) {
            set_result(static_cast< ::ecu::lapi::pb::PgnRequestTokenResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requested_ecu_topic;
        break;
      }

      // optional string requested_ecu_topic = 2;
      case 2: {
        if (tag == 18) {
         parse_requested_ecu_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requested_ecu_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requested_ecu_topic().data(), this->requested_ecu_topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requested_ecu_topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.PgnRequestTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.PgnRequestTokenResponse)
  return false;
#undef DO_
}

void PgnRequestTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.PgnRequestTokenResponse)
  // optional .ecu.lapi.pb.PgnRequestTokenResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string requested_ecu_topic = 2;
  if (has_requested_ecu_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requested_ecu_topic().data(), this->requested_ecu_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requested_ecu_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requested_ecu_topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.PgnRequestTokenResponse)
}

::google::protobuf::uint8* PgnRequestTokenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.PgnRequestTokenResponse)
  // optional .ecu.lapi.pb.PgnRequestTokenResponse.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string requested_ecu_topic = 2;
  if (has_requested_ecu_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requested_ecu_topic().data(), this->requested_ecu_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requested_ecu_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requested_ecu_topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.PgnRequestTokenResponse)
  return target;
}

int PgnRequestTokenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.PgnRequestTokenResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string requested_ecu_topic = 2;
    if (has_requested_ecu_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requested_ecu_topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PgnRequestTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PgnRequestTokenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PgnRequestTokenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PgnRequestTokenResponse::MergeFrom(const PgnRequestTokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_requested_ecu_topic()) {
      set_requested_ecu_topic(from.requested_ecu_topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PgnRequestTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PgnRequestTokenResponse::CopyFrom(const PgnRequestTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PgnRequestTokenResponse::IsInitialized() const {

  return true;
}

void PgnRequestTokenResponse::Swap(PgnRequestTokenResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(requested_ecu_topic_, other->requested_ecu_topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PgnRequestTokenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PgnRequestTokenResponse_descriptor_;
  metadata.reflection = PgnRequestTokenResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bootflags.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bootflags.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* BootFlags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootFlags_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BootFlags_BankSwitchCause_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BootFlags_BootBank_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BootFlags_BootMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bootflags_2eproto() {
  protobuf_AddDesc_bootflags_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bootflags.proto");
  GOOGLE_CHECK(file != NULL);
  BootFlags_descriptor_ = file->message_type(0);
  static const int BootFlags_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, current_bank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, boot_bank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, valid_bank0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, valid_bank1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, boot_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, bank_switch_cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, boot_mode_),
  };
  BootFlags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BootFlags_descriptor_,
      BootFlags::default_instance_,
      BootFlags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootFlags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BootFlags));
  BootFlags_BankSwitchCause_descriptor_ = BootFlags_descriptor_->enum_type(0);
  BootFlags_BootBank_descriptor_ = BootFlags_descriptor_->enum_type(1);
  BootFlags_BootMode_descriptor_ = BootFlags_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bootflags_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BootFlags_descriptor_, &BootFlags::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bootflags_2eproto() {
  delete BootFlags::default_instance_;
  delete BootFlags_reflection_;
}

void protobuf_AddDesc_bootflags_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017bootflags.proto\022\013ecu.lapi.pb\"\312\006\n\tBootF"
    "lags\0225\n\014current_bank\030\001 \001(\0162\037.ecu.lapi.pb"
    ".BootFlags.BootBank\0222\n\tboot_bank\030\002 \001(\0162\037"
    ".ecu.lapi.pb.BootFlags.BootBank\022\023\n\013valid"
    "_bank0\030\003 \001(\010\022\023\n\013valid_bank1\030\004 \001(\010\022\024\n\014boo"
    "t_counter\030\005 \001(\r\022A\n\021bank_switch_cause\030\006 \001"
    "(\0162&.ecu.lapi.pb.BootFlags.BankSwitchCau"
    "se\0222\n\tboot_mode\030\007 \001(\0162\037.ecu.lapi.pb.Boot"
    "Flags.BootMode\"\215\003\n\017BankSwitchCause\022\030\n\023CA"
    "USE_UNINITIALIZED\020\377\001\022\030\n\024CAUSE_NEVER_SWIT"
    "CHED\020\000\022\027\n\023CAUSE_UBOOT_UNKNOWN\020\001\022\023\n\017CAUSE"
    "_UBOOT_POR\020\002\022\022\n\016CAUSE_UBOOT_WD\020\003\022\024\n\020CAUS"
    "E_UBOOT_WARM\020\004\022\027\n\023CAUSE_CSP_SW_UPDATE\020\005\022"
    "\016\n\nCAUSE_LAPI\020\006\022\020\n\014CAUSE_LAPI_0\020\007\022\020\n\014CAU"
    "SE_LAPI_1\020\010\022\020\n\014CAUSE_LAPI_2\020\t\022\020\n\014CAUSE_L"
    "API_3\020\n\022\020\n\014CAUSE_LAPI_4\020\013\022\020\n\014CAUSE_LAPI_"
    "5\020\014\022\020\n\014CAUSE_LAPI_6\020\r\022\020\n\014CAUSE_LAPI_7\020\016\022"
    "\020\n\014CAUSE_LAPI_8\020\017\022\020\n\014CAUSE_LAPI_9\020\020\022\021\n\rC"
    "AUSE_UNKNOWN\020\021\";\n\010BootBank\022\027\n\022BANK_UNINI"
    "TIALIZED\020\377\001\022\n\n\006BANK_0\020\000\022\n\n\006BANK_1\020\001\"N\n\010B"
    "ootMode\022\027\n\022MODE_UNINITIALIZED\020\377\001\022\017\n\013MODE"
    "_NORMAL\020\000\022\030\n\024MODE_PRODUCTION_TEST\020\001", 875);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bootflags.proto", &protobuf_RegisterTypes);
  BootFlags::default_instance_ = new BootFlags();
  BootFlags::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bootflags_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bootflags_2eproto {
  StaticDescriptorInitializer_bootflags_2eproto() {
    protobuf_AddDesc_bootflags_2eproto();
  }
} static_descriptor_initializer_bootflags_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BootFlags_BankSwitchCause_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootFlags_BankSwitchCause_descriptor_;
}
bool BootFlags_BankSwitchCause_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BootFlags_BankSwitchCause BootFlags::CAUSE_UNINITIALIZED;
const BootFlags_BankSwitchCause BootFlags::CAUSE_NEVER_SWITCHED;
const BootFlags_BankSwitchCause BootFlags::CAUSE_UBOOT_UNKNOWN;
const BootFlags_BankSwitchCause BootFlags::CAUSE_UBOOT_POR;
const BootFlags_BankSwitchCause BootFlags::CAUSE_UBOOT_WD;
const BootFlags_BankSwitchCause BootFlags::CAUSE_UBOOT_WARM;
const BootFlags_BankSwitchCause BootFlags::CAUSE_CSP_SW_UPDATE;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_0;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_1;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_2;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_3;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_4;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_5;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_6;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_7;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_8;
const BootFlags_BankSwitchCause BootFlags::CAUSE_LAPI_9;
const BootFlags_BankSwitchCause BootFlags::CAUSE_UNKNOWN;
const BootFlags_BankSwitchCause BootFlags::BankSwitchCause_MIN;
const BootFlags_BankSwitchCause BootFlags::BankSwitchCause_MAX;
const int BootFlags::BankSwitchCause_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BootFlags_BootBank_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootFlags_BootBank_descriptor_;
}
bool BootFlags_BootBank_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BootFlags_BootBank BootFlags::BANK_UNINITIALIZED;
const BootFlags_BootBank BootFlags::BANK_0;
const BootFlags_BootBank BootFlags::BANK_1;
const BootFlags_BootBank BootFlags::BootBank_MIN;
const BootFlags_BootBank BootFlags::BootBank_MAX;
const int BootFlags::BootBank_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BootFlags_BootMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootFlags_BootMode_descriptor_;
}
bool BootFlags_BootMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BootFlags_BootMode BootFlags::MODE_UNINITIALIZED;
const BootFlags_BootMode BootFlags::MODE_NORMAL;
const BootFlags_BootMode BootFlags::MODE_PRODUCTION_TEST;
const BootFlags_BootMode BootFlags::BootMode_MIN;
const BootFlags_BootMode BootFlags::BootMode_MAX;
const int BootFlags::BootMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BootFlags::kCurrentBankFieldNumber;
const int BootFlags::kBootBankFieldNumber;
const int BootFlags::kValidBank0FieldNumber;
const int BootFlags::kValidBank1FieldNumber;
const int BootFlags::kBootCounterFieldNumber;
const int BootFlags::kBankSwitchCauseFieldNumber;
const int BootFlags::kBootModeFieldNumber;
#endif  // !_MSC_VER

BootFlags::BootFlags()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BootFlags)
}

void BootFlags::InitAsDefaultInstance() {
}

BootFlags::BootFlags(const BootFlags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BootFlags)
}

void BootFlags::SharedCtor() {
  _cached_size_ = 0;
  current_bank_ = 255;
  boot_bank_ = 255;
  valid_bank0_ = false;
  valid_bank1_ = false;
  boot_counter_ = 0u;
  bank_switch_cause_ = 255;
  boot_mode_ = 255;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BootFlags::~BootFlags() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BootFlags)
  SharedDtor();
}

void BootFlags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BootFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootFlags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootFlags_descriptor_;
}

const BootFlags& BootFlags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bootflags_2eproto();
  return *default_instance_;
}

BootFlags* BootFlags::default_instance_ = NULL;

BootFlags* BootFlags::New() const {
  return new BootFlags;
}

void BootFlags::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BootFlags*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(valid_bank0_, boot_counter_);
    current_bank_ = 255;
    boot_bank_ = 255;
    bank_switch_cause_ = 255;
    boot_mode_ = 255;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BootFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BootFlags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.BootFlags.BootBank current_bank = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BootFlags_BootBank_IsValid(value)) {
            set_current_bank(static_cast< ::ecu::lapi::pb::BootFlags_BootBank >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_boot_bank;
        break;
      }

      // optional .ecu.lapi.pb.BootFlags.BootBank boot_bank = 2;
      case 2: {
        if (tag == 16) {
         parse_boot_bank:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BootFlags_BootBank_IsValid(value)) {
            set_boot_bank(static_cast< ::ecu::lapi::pb::BootFlags_BootBank >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_valid_bank0;
        break;
      }

      // optional bool valid_bank0 = 3;
      case 3: {
        if (tag == 24) {
         parse_valid_bank0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_bank0_)));
          set_has_valid_bank0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_valid_bank1;
        break;
      }

      // optional bool valid_bank1 = 4;
      case 4: {
        if (tag == 32) {
         parse_valid_bank1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_bank1_)));
          set_has_valid_bank1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_boot_counter;
        break;
      }

      // optional uint32 boot_counter = 5;
      case 5: {
        if (tag == 40) {
         parse_boot_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boot_counter_)));
          set_has_boot_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bank_switch_cause;
        break;
      }

      // optional .ecu.lapi.pb.BootFlags.BankSwitchCause bank_switch_cause = 6;
      case 6: {
        if (tag == 48) {
         parse_bank_switch_cause:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BootFlags_BankSwitchCause_IsValid(value)) {
            set_bank_switch_cause(static_cast< ::ecu::lapi::pb::BootFlags_BankSwitchCause >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_boot_mode;
        break;
      }

      // optional .ecu.lapi.pb.BootFlags.BootMode boot_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_boot_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BootFlags_BootMode_IsValid(value)) {
            set_boot_mode(static_cast< ::ecu::lapi::pb::BootFlags_BootMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BootFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BootFlags)
  return false;
#undef DO_
}

void BootFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BootFlags)
  // optional .ecu.lapi.pb.BootFlags.BootBank current_bank = 1;
  if (has_current_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->current_bank(), output);
  }

  // optional .ecu.lapi.pb.BootFlags.BootBank boot_bank = 2;
  if (has_boot_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->boot_bank(), output);
  }

  // optional bool valid_bank0 = 3;
  if (has_valid_bank0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->valid_bank0(), output);
  }

  // optional bool valid_bank1 = 4;
  if (has_valid_bank1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->valid_bank1(), output);
  }

  // optional uint32 boot_counter = 5;
  if (has_boot_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->boot_counter(), output);
  }

  // optional .ecu.lapi.pb.BootFlags.BankSwitchCause bank_switch_cause = 6;
  if (has_bank_switch_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->bank_switch_cause(), output);
  }

  // optional .ecu.lapi.pb.BootFlags.BootMode boot_mode = 7;
  if (has_boot_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->boot_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BootFlags)
}

::google::protobuf::uint8* BootFlags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BootFlags)
  // optional .ecu.lapi.pb.BootFlags.BootBank current_bank = 1;
  if (has_current_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->current_bank(), target);
  }

  // optional .ecu.lapi.pb.BootFlags.BootBank boot_bank = 2;
  if (has_boot_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->boot_bank(), target);
  }

  // optional bool valid_bank0 = 3;
  if (has_valid_bank0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->valid_bank0(), target);
  }

  // optional bool valid_bank1 = 4;
  if (has_valid_bank1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->valid_bank1(), target);
  }

  // optional uint32 boot_counter = 5;
  if (has_boot_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->boot_counter(), target);
  }

  // optional .ecu.lapi.pb.BootFlags.BankSwitchCause bank_switch_cause = 6;
  if (has_bank_switch_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->bank_switch_cause(), target);
  }

  // optional .ecu.lapi.pb.BootFlags.BootMode boot_mode = 7;
  if (has_boot_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->boot_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BootFlags)
  return target;
}

int BootFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.BootFlags.BootBank current_bank = 1;
    if (has_current_bank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_bank());
    }

    // optional .ecu.lapi.pb.BootFlags.BootBank boot_bank = 2;
    if (has_boot_bank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->boot_bank());
    }

    // optional bool valid_bank0 = 3;
    if (has_valid_bank0()) {
      total_size += 1 + 1;
    }

    // optional bool valid_bank1 = 4;
    if (has_valid_bank1()) {
      total_size += 1 + 1;
    }

    // optional uint32 boot_counter = 5;
    if (has_boot_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boot_counter());
    }

    // optional .ecu.lapi.pb.BootFlags.BankSwitchCause bank_switch_cause = 6;
    if (has_bank_switch_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bank_switch_cause());
    }

    // optional .ecu.lapi.pb.BootFlags.BootMode boot_mode = 7;
    if (has_boot_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->boot_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootFlags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BootFlags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BootFlags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BootFlags::MergeFrom(const BootFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_bank()) {
      set_current_bank(from.current_bank());
    }
    if (from.has_boot_bank()) {
      set_boot_bank(from.boot_bank());
    }
    if (from.has_valid_bank0()) {
      set_valid_bank0(from.valid_bank0());
    }
    if (from.has_valid_bank1()) {
      set_valid_bank1(from.valid_bank1());
    }
    if (from.has_boot_counter()) {
      set_boot_counter(from.boot_counter());
    }
    if (from.has_bank_switch_cause()) {
      set_bank_switch_cause(from.bank_switch_cause());
    }
    if (from.has_boot_mode()) {
      set_boot_mode(from.boot_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BootFlags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootFlags::CopyFrom(const BootFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootFlags::IsInitialized() const {

  return true;
}

void BootFlags::Swap(BootFlags* other) {
  if (other != this) {
    std::swap(current_bank_, other->current_bank_);
    std::swap(boot_bank_, other->boot_bank_);
    std::swap(valid_bank0_, other->valid_bank0_);
    std::swap(valid_bank1_, other->valid_bank1_);
    std::swap(boot_counter_, other->boot_counter_);
    std::swap(bank_switch_cause_, other->bank_switch_cause_);
    std::swap(boot_mode_, other->boot_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BootFlags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BootFlags_descriptor_;
  metadata.reflection = BootFlags_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

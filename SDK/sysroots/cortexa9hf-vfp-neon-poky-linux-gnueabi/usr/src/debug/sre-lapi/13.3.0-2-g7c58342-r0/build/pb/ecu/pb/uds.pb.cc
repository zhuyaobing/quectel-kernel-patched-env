// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* UdsInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdsInterface_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UdsInterface_TransportProtocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UdsInterface_PhysicalInterface_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UdsInterfaceAllocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdsInterfaceAllocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* UdsInterfaceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdsInterfaceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UdsInterfaceRequest_FlowStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UdsInterfaceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdsInterfaceResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UdsInterfaceResponse_StatusCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UdsInterfaceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdsInterfaceStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UdsInterfaceStatus_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UdsIfMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdsIfMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_uds_2eproto() {
  protobuf_AddDesc_uds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uds.proto");
  GOOGLE_CHECK(file != NULL);
  UdsInterface_descriptor_ = file->message_type(0);
  static const int UdsInterface_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterface, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterface, phyif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterface, target_),
  };
  UdsInterface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdsInterface_descriptor_,
      UdsInterface::default_instance_,
      UdsInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdsInterface));
  UdsInterface_TransportProtocol_descriptor_ = UdsInterface_descriptor_->enum_type(0);
  UdsInterface_PhysicalInterface_descriptor_ = UdsInterface_descriptor_->enum_type(1);
  UdsInterfaceAllocation_descriptor_ = file->message_type(1);
  static const int UdsInterfaceAllocation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceAllocation, client_name_),
  };
  UdsInterfaceAllocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdsInterfaceAllocation_descriptor_,
      UdsInterfaceAllocation::default_instance_,
      UdsInterfaceAllocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceAllocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceAllocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdsInterfaceAllocation));
  UdsInterfaceRequest_descriptor_ = file->message_type(2);
  static const int UdsInterfaceRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, client_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, st_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, st_min_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, block_size_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, flow_status_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, timeout_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, max_len_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, p2_timeout_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, p2star_timeout_ms_),
  };
  UdsInterfaceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdsInterfaceRequest_descriptor_,
      UdsInterfaceRequest::default_instance_,
      UdsInterfaceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdsInterfaceRequest));
  UdsInterfaceRequest_FlowStatus_descriptor_ = UdsInterfaceRequest_descriptor_->enum_type(0);
  UdsInterfaceResponse_descriptor_ = file->message_type(3);
  static const int UdsInterfaceResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceResponse, trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceResponse, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceResponse, data_),
  };
  UdsInterfaceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdsInterfaceResponse_descriptor_,
      UdsInterfaceResponse::default_instance_,
      UdsInterfaceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdsInterfaceResponse));
  UdsInterfaceResponse_StatusCode_descriptor_ = UdsInterfaceResponse_descriptor_->enum_type(0);
  UdsInterfaceStatus_descriptor_ = file->message_type(4);
  static const int UdsInterfaceStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceStatus, used_by_),
  };
  UdsInterfaceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdsInterfaceStatus_descriptor_,
      UdsInterfaceStatus::default_instance_,
      UdsInterfaceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsInterfaceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdsInterfaceStatus));
  UdsInterfaceStatus_State_descriptor_ = UdsInterfaceStatus_descriptor_->enum_type(0);
  UdsIfMessage_descriptor_ = file->message_type(5);
  static const int UdsIfMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsIfMessage, interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsIfMessage, allocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsIfMessage, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsIfMessage, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsIfMessage, status_),
  };
  UdsIfMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdsIfMessage_descriptor_,
      UdsIfMessage::default_instance_,
      UdsIfMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsIfMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdsIfMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdsIfMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdsInterface_descriptor_, &UdsInterface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdsInterfaceAllocation_descriptor_, &UdsInterfaceAllocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdsInterfaceRequest_descriptor_, &UdsInterfaceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdsInterfaceResponse_descriptor_, &UdsInterfaceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdsInterfaceStatus_descriptor_, &UdsInterfaceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdsIfMessage_descriptor_, &UdsIfMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uds_2eproto() {
  delete UdsInterface::default_instance_;
  delete UdsInterface_reflection_;
  delete UdsInterfaceAllocation::default_instance_;
  delete UdsInterfaceAllocation_reflection_;
  delete UdsInterfaceRequest::default_instance_;
  delete UdsInterfaceRequest_reflection_;
  delete UdsInterfaceResponse::default_instance_;
  delete UdsInterfaceResponse_reflection_;
  delete UdsInterfaceStatus::default_instance_;
  delete UdsInterfaceStatus_reflection_;
  delete UdsIfMessage::default_instance_;
  delete UdsIfMessage_reflection_;
}

void protobuf_AddDesc_uds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tuds.proto\022\013ecu.lapi.pb\"\211\002\n\014UdsInterfac"
    "e\022=\n\010protocol\030\001 \001(\0162+.ecu.lapi.pb.UdsInt"
    "erface.TransportProtocol\022:\n\005phyif\030\002 \001(\0162"
    "+.ecu.lapi.pb.UdsInterface.PhysicalInter"
    "face\022\016\n\006target\030\003 \001(\r\"/\n\021TransportProtoco"
    "l\022\016\n\nTP_UNKNOWN\020\n\022\n\n\006TP_ISO\020\000\"=\n\021Physica"
    "lInterface\022\016\n\nIF_UNKNOWN\020\n\022\013\n\007IF_CAN1\020\000\022"
    "\013\n\007IF_CAN2\020\001\"-\n\026UdsInterfaceAllocation\022\023"
    "\n\013client_name\030\001 \001(\t\"\244\003\n\023UdsInterfaceRequ"
    "est\022\023\n\013client_name\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\022\023"
    "\n\006source\030\005 \001(\r:\003255\022\023\n\006st_min\030\003 \001(\r:\003255"
    "\022\027\n\nst_min_res\030\006 \001(\r:\003255\022\033\n\016block_size_"
    "res\030\007 \001(\r:\003256\022L\n\017flow_status_res\030\010 \001(\0162"
    "+.ecu.lapi.pb.UdsInterfaceRequest.FlowSt"
    "atus:\006FS_CTS\022\032\n\ntimeout_ms\030\004 \001(\r:\006150000"
    "\022\032\n\014max_len_resp\030\t \001(\r:\0044096\022\032\n\rp2_timeo"
    "ut_ms\030\n \001(\r:\003150\022\037\n\021p2star_timeout_ms\030\013 "
    "\001(\r:\0045000\"G\n\nFlowStatus\022\n\n\006FS_CTS\020\000\022\013\n\007F"
    "S_WAIT\020\001\022\017\n\013FS_SUPPRESS\020\002\022\017\n\013FS_OVERFLOW"
    "\020\003\"\300\003\n\024UdsInterfaceResponse\022<\n\006status\030\001 "
    "\001(\0162,.ecu.lapi.pb.UdsInterfaceResponse.S"
    "tatusCode\022\020\n\010trans_id\030\002 \001(\004\022\016\n\006source\030\003 "
    "\001(\r\022\014\n\004data\030\004 \001(\014\"\271\002\n\nStatusCode\022\021\n\rUNKN"
    "OWN_ERROR\020\036\022\006\n\002OK\020\001\022\013\n\007TIMEOUT\020\002\022\010\n\004BUSY"
    "\020\003\022\017\n\013INTERRUPTED\020\004\022\020\n\014LENGTH_ERROR\020\005\022\016\n"
    "\nOVERFLOWED\020\006\022\014\n\010REJECTED\020\007\022\020\n\014RT_CAN_ER"
    "ROR\020\n\022\017\n\013RT_POWEROFF\020\013\022\016\n\nRT_TIMEOUT\020\014\022\021"
    "\n\rRT_P2_TIMEOUT\020\r\022\025\n\021RT_P2STAR_TIMEOUT\020\016"
    "\022\026\n\022LINUX_IF_NOT_ALLOC\020\024\022\022\n\016LINUX_TX_ERR"
    "OR\020\025\022\026\n\022LINUX_PB_SER_ERROR\020\026\022\027\n\023LINUX_UN"
    "KNOWN_ERROR\020\027\"\255\001\n\022UdsInterfaceStatus\0224\n\005"
    "state\030\001 \001(\0162%.ecu.lapi.pb.UdsInterfaceSt"
    "atus.State\022\017\n\007used_by\030\002 \001(\t\"P\n\005State\022\013\n\007"
    "UNKNOWN\020\025\022\010\n\004FREE\020\000\022\t\n\005READY\020\001\022\010\n\004BUSY\020\002"
    "\022\013\n\007TIMEOUT\020\003\022\016\n\nPROCESSING\020\004\"\216\002\n\014UdsIfM"
    "essage\022,\n\tinterface\030\001 \001(\0132\031.ecu.lapi.pb."
    "UdsInterface\0227\n\nallocation\030\002 \001(\0132#.ecu.l"
    "api.pb.UdsInterfaceAllocation\0221\n\007request"
    "\030\003 \001(\0132 .ecu.lapi.pb.UdsInterfaceRequest"
    "\0223\n\010response\030\004 \001(\0132!.ecu.lapi.pb.UdsInte"
    "rfaceResponse\022/\n\006status\030\005 \001(\0132\037.ecu.lapi"
    ".pb.UdsInterfaceStatus", 1662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uds.proto", &protobuf_RegisterTypes);
  UdsInterface::default_instance_ = new UdsInterface();
  UdsInterfaceAllocation::default_instance_ = new UdsInterfaceAllocation();
  UdsInterfaceRequest::default_instance_ = new UdsInterfaceRequest();
  UdsInterfaceResponse::default_instance_ = new UdsInterfaceResponse();
  UdsInterfaceStatus::default_instance_ = new UdsInterfaceStatus();
  UdsIfMessage::default_instance_ = new UdsIfMessage();
  UdsInterface::default_instance_->InitAsDefaultInstance();
  UdsInterfaceAllocation::default_instance_->InitAsDefaultInstance();
  UdsInterfaceRequest::default_instance_->InitAsDefaultInstance();
  UdsInterfaceResponse::default_instance_->InitAsDefaultInstance();
  UdsInterfaceStatus::default_instance_->InitAsDefaultInstance();
  UdsIfMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uds_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uds_2eproto {
  StaticDescriptorInitializer_uds_2eproto() {
    protobuf_AddDesc_uds_2eproto();
  }
} static_descriptor_initializer_uds_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* UdsInterface_TransportProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterface_TransportProtocol_descriptor_;
}
bool UdsInterface_TransportProtocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UdsInterface_TransportProtocol UdsInterface::TP_UNKNOWN;
const UdsInterface_TransportProtocol UdsInterface::TP_ISO;
const UdsInterface_TransportProtocol UdsInterface::TransportProtocol_MIN;
const UdsInterface_TransportProtocol UdsInterface::TransportProtocol_MAX;
const int UdsInterface::TransportProtocol_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* UdsInterface_PhysicalInterface_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterface_PhysicalInterface_descriptor_;
}
bool UdsInterface_PhysicalInterface_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UdsInterface_PhysicalInterface UdsInterface::IF_UNKNOWN;
const UdsInterface_PhysicalInterface UdsInterface::IF_CAN1;
const UdsInterface_PhysicalInterface UdsInterface::IF_CAN2;
const UdsInterface_PhysicalInterface UdsInterface::PhysicalInterface_MIN;
const UdsInterface_PhysicalInterface UdsInterface::PhysicalInterface_MAX;
const int UdsInterface::PhysicalInterface_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UdsInterface::kProtocolFieldNumber;
const int UdsInterface::kPhyifFieldNumber;
const int UdsInterface::kTargetFieldNumber;
#endif  // !_MSC_VER

UdsInterface::UdsInterface()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.UdsInterface)
}

void UdsInterface::InitAsDefaultInstance() {
}

UdsInterface::UdsInterface(const UdsInterface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.UdsInterface)
}

void UdsInterface::SharedCtor() {
  _cached_size_ = 0;
  protocol_ = 10;
  phyif_ = 10;
  target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdsInterface::~UdsInterface() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.UdsInterface)
  SharedDtor();
}

void UdsInterface::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UdsInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdsInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterface_descriptor_;
}

const UdsInterface& UdsInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uds_2eproto();
  return *default_instance_;
}

UdsInterface* UdsInterface::default_instance_ = NULL;

UdsInterface* UdsInterface::New() const {
  return new UdsInterface;
}

void UdsInterface::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    protocol_ = 10;
    phyif_ = 10;
    target_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdsInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.UdsInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.UdsInterface.TransportProtocol protocol = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::UdsInterface_TransportProtocol_IsValid(value)) {
            set_protocol(static_cast< ::ecu::lapi::pb::UdsInterface_TransportProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_phyif;
        break;
      }

      // optional .ecu.lapi.pb.UdsInterface.PhysicalInterface phyif = 2;
      case 2: {
        if (tag == 16) {
         parse_phyif:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::UdsInterface_PhysicalInterface_IsValid(value)) {
            set_phyif(static_cast< ::ecu::lapi::pb::UdsInterface_PhysicalInterface >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // optional uint32 target = 3;
      case 3: {
        if (tag == 24) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.UdsInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.UdsInterface)
  return false;
#undef DO_
}

void UdsInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.UdsInterface)
  // optional .ecu.lapi.pb.UdsInterface.TransportProtocol protocol = 1;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol(), output);
  }

  // optional .ecu.lapi.pb.UdsInterface.PhysicalInterface phyif = 2;
  if (has_phyif()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->phyif(), output);
  }

  // optional uint32 target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.UdsInterface)
}

::google::protobuf::uint8* UdsInterface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.UdsInterface)
  // optional .ecu.lapi.pb.UdsInterface.TransportProtocol protocol = 1;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protocol(), target);
  }

  // optional .ecu.lapi.pb.UdsInterface.PhysicalInterface phyif = 2;
  if (has_phyif()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->phyif(), target);
  }

  // optional uint32 target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.UdsInterface)
  return target;
}

int UdsInterface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.UdsInterface.TransportProtocol protocol = 1;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // optional .ecu.lapi.pb.UdsInterface.PhysicalInterface phyif = 2;
    if (has_phyif()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phyif());
    }

    // optional uint32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdsInterface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdsInterface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdsInterface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdsInterface::MergeFrom(const UdsInterface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_phyif()) {
      set_phyif(from.phyif());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdsInterface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsInterface::CopyFrom(const UdsInterface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsInterface::IsInitialized() const {

  return true;
}

void UdsInterface::Swap(UdsInterface* other) {
  if (other != this) {
    std::swap(protocol_, other->protocol_);
    std::swap(phyif_, other->phyif_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdsInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdsInterface_descriptor_;
  metadata.reflection = UdsInterface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UdsInterfaceAllocation::kClientNameFieldNumber;
#endif  // !_MSC_VER

UdsInterfaceAllocation::UdsInterfaceAllocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.UdsInterfaceAllocation)
}

void UdsInterfaceAllocation::InitAsDefaultInstance() {
}

UdsInterfaceAllocation::UdsInterfaceAllocation(const UdsInterfaceAllocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.UdsInterfaceAllocation)
}

void UdsInterfaceAllocation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdsInterfaceAllocation::~UdsInterfaceAllocation() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.UdsInterfaceAllocation)
  SharedDtor();
}

void UdsInterfaceAllocation::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (this != default_instance_) {
  }
}

void UdsInterfaceAllocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdsInterfaceAllocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterfaceAllocation_descriptor_;
}

const UdsInterfaceAllocation& UdsInterfaceAllocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uds_2eproto();
  return *default_instance_;
}

UdsInterfaceAllocation* UdsInterfaceAllocation::default_instance_ = NULL;

UdsInterfaceAllocation* UdsInterfaceAllocation::New() const {
  return new UdsInterfaceAllocation;
}

void UdsInterfaceAllocation::Clear() {
  if (has_client_name()) {
    if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      client_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdsInterfaceAllocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.UdsInterfaceAllocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.UdsInterfaceAllocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.UdsInterfaceAllocation)
  return false;
#undef DO_
}

void UdsInterfaceAllocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.UdsInterfaceAllocation)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.UdsInterfaceAllocation)
}

::google::protobuf::uint8* UdsInterfaceAllocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.UdsInterfaceAllocation)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.UdsInterfaceAllocation)
  return target;
}

int UdsInterfaceAllocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_name = 1;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdsInterfaceAllocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdsInterfaceAllocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdsInterfaceAllocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdsInterfaceAllocation::MergeFrom(const UdsInterfaceAllocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdsInterfaceAllocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsInterfaceAllocation::CopyFrom(const UdsInterfaceAllocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsInterfaceAllocation::IsInitialized() const {

  return true;
}

void UdsInterfaceAllocation::Swap(UdsInterfaceAllocation* other) {
  if (other != this) {
    std::swap(client_name_, other->client_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdsInterfaceAllocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdsInterfaceAllocation_descriptor_;
  metadata.reflection = UdsInterfaceAllocation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UdsInterfaceRequest_FlowStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterfaceRequest_FlowStatus_descriptor_;
}
bool UdsInterfaceRequest_FlowStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UdsInterfaceRequest_FlowStatus UdsInterfaceRequest::FS_CTS;
const UdsInterfaceRequest_FlowStatus UdsInterfaceRequest::FS_WAIT;
const UdsInterfaceRequest_FlowStatus UdsInterfaceRequest::FS_SUPPRESS;
const UdsInterfaceRequest_FlowStatus UdsInterfaceRequest::FS_OVERFLOW;
const UdsInterfaceRequest_FlowStatus UdsInterfaceRequest::FlowStatus_MIN;
const UdsInterfaceRequest_FlowStatus UdsInterfaceRequest::FlowStatus_MAX;
const int UdsInterfaceRequest::FlowStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UdsInterfaceRequest::kClientNameFieldNumber;
const int UdsInterfaceRequest::kDataFieldNumber;
const int UdsInterfaceRequest::kSourceFieldNumber;
const int UdsInterfaceRequest::kStMinFieldNumber;
const int UdsInterfaceRequest::kStMinResFieldNumber;
const int UdsInterfaceRequest::kBlockSizeResFieldNumber;
const int UdsInterfaceRequest::kFlowStatusResFieldNumber;
const int UdsInterfaceRequest::kTimeoutMsFieldNumber;
const int UdsInterfaceRequest::kMaxLenRespFieldNumber;
const int UdsInterfaceRequest::kP2TimeoutMsFieldNumber;
const int UdsInterfaceRequest::kP2StarTimeoutMsFieldNumber;
#endif  // !_MSC_VER

UdsInterfaceRequest::UdsInterfaceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.UdsInterfaceRequest)
}

void UdsInterfaceRequest::InitAsDefaultInstance() {
}

UdsInterfaceRequest::UdsInterfaceRequest(const UdsInterfaceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.UdsInterfaceRequest)
}

void UdsInterfaceRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = 255u;
  st_min_ = 255u;
  st_min_res_ = 255u;
  block_size_res_ = 256u;
  flow_status_res_ = 0;
  timeout_ms_ = 150000u;
  max_len_resp_ = 4096u;
  p2_timeout_ms_ = 150u;
  p2star_timeout_ms_ = 5000u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdsInterfaceRequest::~UdsInterfaceRequest() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.UdsInterfaceRequest)
  SharedDtor();
}

void UdsInterfaceRequest::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void UdsInterfaceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdsInterfaceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterfaceRequest_descriptor_;
}

const UdsInterfaceRequest& UdsInterfaceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uds_2eproto();
  return *default_instance_;
}

UdsInterfaceRequest* UdsInterfaceRequest::default_instance_ = NULL;

UdsInterfaceRequest* UdsInterfaceRequest::New() const {
  return new UdsInterfaceRequest;
}

void UdsInterfaceRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_client_name()) {
      if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    source_ = 255u;
    st_min_ = 255u;
    st_min_res_ = 255u;
    block_size_res_ = 256u;
    flow_status_res_ = 0;
    timeout_ms_ = 150000u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    max_len_resp_ = 4096u;
    p2_timeout_ms_ = 150u;
    p2star_timeout_ms_ = 5000u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdsInterfaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.UdsInterfaceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_st_min;
        break;
      }

      // optional uint32 st_min = 3 [default = 255];
      case 3: {
        if (tag == 24) {
         parse_st_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_min_)));
          set_has_st_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeout_ms;
        break;
      }

      // optional uint32 timeout_ms = 4 [default = 150000];
      case 4: {
        if (tag == 32) {
         parse_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_ms_)));
          set_has_timeout_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_source;
        break;
      }

      // optional uint32 source = 5 [default = 255];
      case 5: {
        if (tag == 40) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_st_min_res;
        break;
      }

      // optional uint32 st_min_res = 6 [default = 255];
      case 6: {
        if (tag == 48) {
         parse_st_min_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_min_res_)));
          set_has_st_min_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_block_size_res;
        break;
      }

      // optional uint32 block_size_res = 7 [default = 256];
      case 7: {
        if (tag == 56) {
         parse_block_size_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_size_res_)));
          set_has_block_size_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flow_status_res;
        break;
      }

      // optional .ecu.lapi.pb.UdsInterfaceRequest.FlowStatus flow_status_res = 8 [default = FS_CTS];
      case 8: {
        if (tag == 64) {
         parse_flow_status_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::UdsInterfaceRequest_FlowStatus_IsValid(value)) {
            set_flow_status_res(static_cast< ::ecu::lapi::pb::UdsInterfaceRequest_FlowStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_len_resp;
        break;
      }

      // optional uint32 max_len_resp = 9 [default = 4096];
      case 9: {
        if (tag == 72) {
         parse_max_len_resp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_len_resp_)));
          set_has_max_len_resp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_p2_timeout_ms;
        break;
      }

      // optional uint32 p2_timeout_ms = 10 [default = 150];
      case 10: {
        if (tag == 80) {
         parse_p2_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p2_timeout_ms_)));
          set_has_p2_timeout_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_p2star_timeout_ms;
        break;
      }

      // optional uint32 p2star_timeout_ms = 11 [default = 5000];
      case 11: {
        if (tag == 88) {
         parse_p2star_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p2star_timeout_ms_)));
          set_has_p2star_timeout_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.UdsInterfaceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.UdsInterfaceRequest)
  return false;
#undef DO_
}

void UdsInterfaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.UdsInterfaceRequest)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_name(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional uint32 st_min = 3 [default = 255];
  if (has_st_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->st_min(), output);
  }

  // optional uint32 timeout_ms = 4 [default = 150000];
  if (has_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout_ms(), output);
  }

  // optional uint32 source = 5 [default = 255];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source(), output);
  }

  // optional uint32 st_min_res = 6 [default = 255];
  if (has_st_min_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->st_min_res(), output);
  }

  // optional uint32 block_size_res = 7 [default = 256];
  if (has_block_size_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->block_size_res(), output);
  }

  // optional .ecu.lapi.pb.UdsInterfaceRequest.FlowStatus flow_status_res = 8 [default = FS_CTS];
  if (has_flow_status_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->flow_status_res(), output);
  }

  // optional uint32 max_len_resp = 9 [default = 4096];
  if (has_max_len_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_len_resp(), output);
  }

  // optional uint32 p2_timeout_ms = 10 [default = 150];
  if (has_p2_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->p2_timeout_ms(), output);
  }

  // optional uint32 p2star_timeout_ms = 11 [default = 5000];
  if (has_p2star_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->p2star_timeout_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.UdsInterfaceRequest)
}

::google::protobuf::uint8* UdsInterfaceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.UdsInterfaceRequest)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_name(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional uint32 st_min = 3 [default = 255];
  if (has_st_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->st_min(), target);
  }

  // optional uint32 timeout_ms = 4 [default = 150000];
  if (has_timeout_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout_ms(), target);
  }

  // optional uint32 source = 5 [default = 255];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source(), target);
  }

  // optional uint32 st_min_res = 6 [default = 255];
  if (has_st_min_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->st_min_res(), target);
  }

  // optional uint32 block_size_res = 7 [default = 256];
  if (has_block_size_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->block_size_res(), target);
  }

  // optional .ecu.lapi.pb.UdsInterfaceRequest.FlowStatus flow_status_res = 8 [default = FS_CTS];
  if (has_flow_status_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->flow_status_res(), target);
  }

  // optional uint32 max_len_resp = 9 [default = 4096];
  if (has_max_len_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_len_resp(), target);
  }

  // optional uint32 p2_timeout_ms = 10 [default = 150];
  if (has_p2_timeout_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->p2_timeout_ms(), target);
  }

  // optional uint32 p2star_timeout_ms = 11 [default = 5000];
  if (has_p2star_timeout_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->p2star_timeout_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.UdsInterfaceRequest)
  return target;
}

int UdsInterfaceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_name = 1;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 source = 5 [default = 255];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 st_min = 3 [default = 255];
    if (has_st_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_min());
    }

    // optional uint32 st_min_res = 6 [default = 255];
    if (has_st_min_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_min_res());
    }

    // optional uint32 block_size_res = 7 [default = 256];
    if (has_block_size_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_size_res());
    }

    // optional .ecu.lapi.pb.UdsInterfaceRequest.FlowStatus flow_status_res = 8 [default = FS_CTS];
    if (has_flow_status_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flow_status_res());
    }

    // optional uint32 timeout_ms = 4 [default = 150000];
    if (has_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout_ms());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 max_len_resp = 9 [default = 4096];
    if (has_max_len_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_len_resp());
    }

    // optional uint32 p2_timeout_ms = 10 [default = 150];
    if (has_p2_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p2_timeout_ms());
    }

    // optional uint32 p2star_timeout_ms = 11 [default = 5000];
    if (has_p2star_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p2star_timeout_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdsInterfaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdsInterfaceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdsInterfaceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdsInterfaceRequest::MergeFrom(const UdsInterfaceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_st_min()) {
      set_st_min(from.st_min());
    }
    if (from.has_st_min_res()) {
      set_st_min_res(from.st_min_res());
    }
    if (from.has_block_size_res()) {
      set_block_size_res(from.block_size_res());
    }
    if (from.has_flow_status_res()) {
      set_flow_status_res(from.flow_status_res());
    }
    if (from.has_timeout_ms()) {
      set_timeout_ms(from.timeout_ms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_len_resp()) {
      set_max_len_resp(from.max_len_resp());
    }
    if (from.has_p2_timeout_ms()) {
      set_p2_timeout_ms(from.p2_timeout_ms());
    }
    if (from.has_p2star_timeout_ms()) {
      set_p2star_timeout_ms(from.p2star_timeout_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdsInterfaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsInterfaceRequest::CopyFrom(const UdsInterfaceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsInterfaceRequest::IsInitialized() const {

  return true;
}

void UdsInterfaceRequest::Swap(UdsInterfaceRequest* other) {
  if (other != this) {
    std::swap(client_name_, other->client_name_);
    std::swap(data_, other->data_);
    std::swap(source_, other->source_);
    std::swap(st_min_, other->st_min_);
    std::swap(st_min_res_, other->st_min_res_);
    std::swap(block_size_res_, other->block_size_res_);
    std::swap(flow_status_res_, other->flow_status_res_);
    std::swap(timeout_ms_, other->timeout_ms_);
    std::swap(max_len_resp_, other->max_len_resp_);
    std::swap(p2_timeout_ms_, other->p2_timeout_ms_);
    std::swap(p2star_timeout_ms_, other->p2star_timeout_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdsInterfaceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdsInterfaceRequest_descriptor_;
  metadata.reflection = UdsInterfaceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UdsInterfaceResponse_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterfaceResponse_StatusCode_descriptor_;
}
bool UdsInterfaceResponse_StatusCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::UNKNOWN_ERROR;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::OK;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::TIMEOUT;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::BUSY;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::INTERRUPTED;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::LENGTH_ERROR;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::OVERFLOWED;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::REJECTED;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::RT_CAN_ERROR;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::RT_POWEROFF;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::RT_TIMEOUT;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::RT_P2_TIMEOUT;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::RT_P2STAR_TIMEOUT;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::LINUX_IF_NOT_ALLOC;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::LINUX_TX_ERROR;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::LINUX_PB_SER_ERROR;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::LINUX_UNKNOWN_ERROR;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::StatusCode_MIN;
const UdsInterfaceResponse_StatusCode UdsInterfaceResponse::StatusCode_MAX;
const int UdsInterfaceResponse::StatusCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UdsInterfaceResponse::kStatusFieldNumber;
const int UdsInterfaceResponse::kTransIdFieldNumber;
const int UdsInterfaceResponse::kSourceFieldNumber;
const int UdsInterfaceResponse::kDataFieldNumber;
#endif  // !_MSC_VER

UdsInterfaceResponse::UdsInterfaceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.UdsInterfaceResponse)
}

void UdsInterfaceResponse::InitAsDefaultInstance() {
}

UdsInterfaceResponse::UdsInterfaceResponse(const UdsInterfaceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.UdsInterfaceResponse)
}

void UdsInterfaceResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 30;
  trans_id_ = GOOGLE_ULONGLONG(0);
  source_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdsInterfaceResponse::~UdsInterfaceResponse() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.UdsInterfaceResponse)
  SharedDtor();
}

void UdsInterfaceResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void UdsInterfaceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdsInterfaceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterfaceResponse_descriptor_;
}

const UdsInterfaceResponse& UdsInterfaceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uds_2eproto();
  return *default_instance_;
}

UdsInterfaceResponse* UdsInterfaceResponse::default_instance_ = NULL;

UdsInterfaceResponse* UdsInterfaceResponse::New() const {
  return new UdsInterfaceResponse;
}

void UdsInterfaceResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    status_ = 30;
    trans_id_ = GOOGLE_ULONGLONG(0);
    source_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdsInterfaceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.UdsInterfaceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.UdsInterfaceResponse.StatusCode status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::UdsInterfaceResponse_StatusCode_IsValid(value)) {
            set_status(static_cast< ::ecu::lapi::pb::UdsInterfaceResponse_StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trans_id;
        break;
      }

      // optional uint64 trans_id = 2;
      case 2: {
        if (tag == 16) {
         parse_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trans_id_)));
          set_has_trans_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }

      // optional uint32 source = 3;
      case 3: {
        if (tag == 24) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.UdsInterfaceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.UdsInterfaceResponse)
  return false;
#undef DO_
}

void UdsInterfaceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.UdsInterfaceResponse)
  // optional .ecu.lapi.pb.UdsInterfaceResponse.StatusCode status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint64 trans_id = 2;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->trans_id(), output);
  }

  // optional uint32 source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.UdsInterfaceResponse)
}

::google::protobuf::uint8* UdsInterfaceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.UdsInterfaceResponse)
  // optional .ecu.lapi.pb.UdsInterfaceResponse.StatusCode status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint64 trans_id = 2;
  if (has_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->trans_id(), target);
  }

  // optional uint32 source = 3;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.UdsInterfaceResponse)
  return target;
}

int UdsInterfaceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.UdsInterfaceResponse.StatusCode status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 trans_id = 2;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trans_id());
    }

    // optional uint32 source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdsInterfaceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdsInterfaceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdsInterfaceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdsInterfaceResponse::MergeFrom(const UdsInterfaceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdsInterfaceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsInterfaceResponse::CopyFrom(const UdsInterfaceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsInterfaceResponse::IsInitialized() const {

  return true;
}

void UdsInterfaceResponse::Swap(UdsInterfaceResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(source_, other->source_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdsInterfaceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdsInterfaceResponse_descriptor_;
  metadata.reflection = UdsInterfaceResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UdsInterfaceStatus_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterfaceStatus_State_descriptor_;
}
bool UdsInterfaceStatus_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UdsInterfaceStatus_State UdsInterfaceStatus::UNKNOWN;
const UdsInterfaceStatus_State UdsInterfaceStatus::FREE;
const UdsInterfaceStatus_State UdsInterfaceStatus::READY;
const UdsInterfaceStatus_State UdsInterfaceStatus::BUSY;
const UdsInterfaceStatus_State UdsInterfaceStatus::TIMEOUT;
const UdsInterfaceStatus_State UdsInterfaceStatus::PROCESSING;
const UdsInterfaceStatus_State UdsInterfaceStatus::State_MIN;
const UdsInterfaceStatus_State UdsInterfaceStatus::State_MAX;
const int UdsInterfaceStatus::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UdsInterfaceStatus::kStateFieldNumber;
const int UdsInterfaceStatus::kUsedByFieldNumber;
#endif  // !_MSC_VER

UdsInterfaceStatus::UdsInterfaceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.UdsInterfaceStatus)
}

void UdsInterfaceStatus::InitAsDefaultInstance() {
}

UdsInterfaceStatus::UdsInterfaceStatus(const UdsInterfaceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.UdsInterfaceStatus)
}

void UdsInterfaceStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 21;
  used_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdsInterfaceStatus::~UdsInterfaceStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.UdsInterfaceStatus)
  SharedDtor();
}

void UdsInterfaceStatus::SharedDtor() {
  if (used_by_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete used_by_;
  }
  if (this != default_instance_) {
  }
}

void UdsInterfaceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdsInterfaceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsInterfaceStatus_descriptor_;
}

const UdsInterfaceStatus& UdsInterfaceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uds_2eproto();
  return *default_instance_;
}

UdsInterfaceStatus* UdsInterfaceStatus::default_instance_ = NULL;

UdsInterfaceStatus* UdsInterfaceStatus::New() const {
  return new UdsInterfaceStatus;
}

void UdsInterfaceStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 21;
    if (has_used_by()) {
      if (used_by_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        used_by_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdsInterfaceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.UdsInterfaceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.UdsInterfaceStatus.State state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::UdsInterfaceStatus_State_IsValid(value)) {
            set_state(static_cast< ::ecu::lapi::pb::UdsInterfaceStatus_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_used_by;
        break;
      }

      // optional string used_by = 2;
      case 2: {
        if (tag == 18) {
         parse_used_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_used_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->used_by().data(), this->used_by().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "used_by");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.UdsInterfaceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.UdsInterfaceStatus)
  return false;
#undef DO_
}

void UdsInterfaceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.UdsInterfaceStatus)
  // optional .ecu.lapi.pb.UdsInterfaceStatus.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional string used_by = 2;
  if (has_used_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->used_by().data(), this->used_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "used_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->used_by(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.UdsInterfaceStatus)
}

::google::protobuf::uint8* UdsInterfaceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.UdsInterfaceStatus)
  // optional .ecu.lapi.pb.UdsInterfaceStatus.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional string used_by = 2;
  if (has_used_by()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->used_by().data(), this->used_by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "used_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->used_by(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.UdsInterfaceStatus)
  return target;
}

int UdsInterfaceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.UdsInterfaceStatus.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string used_by = 2;
    if (has_used_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->used_by());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdsInterfaceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdsInterfaceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdsInterfaceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdsInterfaceStatus::MergeFrom(const UdsInterfaceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_used_by()) {
      set_used_by(from.used_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdsInterfaceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsInterfaceStatus::CopyFrom(const UdsInterfaceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsInterfaceStatus::IsInitialized() const {

  return true;
}

void UdsInterfaceStatus::Swap(UdsInterfaceStatus* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(used_by_, other->used_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdsInterfaceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdsInterfaceStatus_descriptor_;
  metadata.reflection = UdsInterfaceStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UdsIfMessage::kInterfaceFieldNumber;
const int UdsIfMessage::kAllocationFieldNumber;
const int UdsIfMessage::kRequestFieldNumber;
const int UdsIfMessage::kResponseFieldNumber;
const int UdsIfMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

UdsIfMessage::UdsIfMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.UdsIfMessage)
}

void UdsIfMessage::InitAsDefaultInstance() {
  interface_ = const_cast< ::ecu::lapi::pb::UdsInterface*>(&::ecu::lapi::pb::UdsInterface::default_instance());
  allocation_ = const_cast< ::ecu::lapi::pb::UdsInterfaceAllocation*>(&::ecu::lapi::pb::UdsInterfaceAllocation::default_instance());
  request_ = const_cast< ::ecu::lapi::pb::UdsInterfaceRequest*>(&::ecu::lapi::pb::UdsInterfaceRequest::default_instance());
  response_ = const_cast< ::ecu::lapi::pb::UdsInterfaceResponse*>(&::ecu::lapi::pb::UdsInterfaceResponse::default_instance());
  status_ = const_cast< ::ecu::lapi::pb::UdsInterfaceStatus*>(&::ecu::lapi::pb::UdsInterfaceStatus::default_instance());
}

UdsIfMessage::UdsIfMessage(const UdsIfMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.UdsIfMessage)
}

void UdsIfMessage::SharedCtor() {
  _cached_size_ = 0;
  interface_ = NULL;
  allocation_ = NULL;
  request_ = NULL;
  response_ = NULL;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdsIfMessage::~UdsIfMessage() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.UdsIfMessage)
  SharedDtor();
}

void UdsIfMessage::SharedDtor() {
  if (this != default_instance_) {
    delete interface_;
    delete allocation_;
    delete request_;
    delete response_;
    delete status_;
  }
}

void UdsIfMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdsIfMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdsIfMessage_descriptor_;
}

const UdsIfMessage& UdsIfMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uds_2eproto();
  return *default_instance_;
}

UdsIfMessage* UdsIfMessage::default_instance_ = NULL;

UdsIfMessage* UdsIfMessage::New() const {
  return new UdsIfMessage;
}

void UdsIfMessage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_interface()) {
      if (interface_ != NULL) interface_->::ecu::lapi::pb::UdsInterface::Clear();
    }
    if (has_allocation()) {
      if (allocation_ != NULL) allocation_->::ecu::lapi::pb::UdsInterfaceAllocation::Clear();
    }
    if (has_request()) {
      if (request_ != NULL) request_->::ecu::lapi::pb::UdsInterfaceRequest::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::ecu::lapi::pb::UdsInterfaceResponse::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::ecu::lapi::pb::UdsInterfaceStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdsIfMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.UdsIfMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.UdsInterface interface = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_allocation;
        break;
      }

      // optional .ecu.lapi.pb.UdsInterfaceAllocation allocation = 2;
      case 2: {
        if (tag == 18) {
         parse_allocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allocation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // optional .ecu.lapi.pb.UdsInterfaceRequest request = 3;
      case 3: {
        if (tag == 26) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_response;
        break;
      }

      // optional .ecu.lapi.pb.UdsInterfaceResponse response = 4;
      case 4: {
        if (tag == 34) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_status;
        break;
      }

      // optional .ecu.lapi.pb.UdsInterfaceStatus status = 5;
      case 5: {
        if (tag == 42) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.UdsIfMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.UdsIfMessage)
  return false;
#undef DO_
}

void UdsIfMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.UdsIfMessage)
  // optional .ecu.lapi.pb.UdsInterface interface = 1;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->interface(), output);
  }

  // optional .ecu.lapi.pb.UdsInterfaceAllocation allocation = 2;
  if (has_allocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allocation(), output);
  }

  // optional .ecu.lapi.pb.UdsInterfaceRequest request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->request(), output);
  }

  // optional .ecu.lapi.pb.UdsInterfaceResponse response = 4;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->response(), output);
  }

  // optional .ecu.lapi.pb.UdsInterfaceStatus status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.UdsIfMessage)
}

::google::protobuf::uint8* UdsIfMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.UdsIfMessage)
  // optional .ecu.lapi.pb.UdsInterface interface = 1;
  if (has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->interface(), target);
  }

  // optional .ecu.lapi.pb.UdsInterfaceAllocation allocation = 2;
  if (has_allocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allocation(), target);
  }

  // optional .ecu.lapi.pb.UdsInterfaceRequest request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->request(), target);
  }

  // optional .ecu.lapi.pb.UdsInterfaceResponse response = 4;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->response(), target);
  }

  // optional .ecu.lapi.pb.UdsInterfaceStatus status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.UdsIfMessage)
  return target;
}

int UdsIfMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.UdsInterface interface = 1;
    if (has_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interface());
    }

    // optional .ecu.lapi.pb.UdsInterfaceAllocation allocation = 2;
    if (has_allocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allocation());
    }

    // optional .ecu.lapi.pb.UdsInterfaceRequest request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .ecu.lapi.pb.UdsInterfaceResponse response = 4;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .ecu.lapi.pb.UdsInterfaceStatus status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdsIfMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdsIfMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdsIfMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdsIfMessage::MergeFrom(const UdsIfMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interface()) {
      mutable_interface()->::ecu::lapi::pb::UdsInterface::MergeFrom(from.interface());
    }
    if (from.has_allocation()) {
      mutable_allocation()->::ecu::lapi::pb::UdsInterfaceAllocation::MergeFrom(from.allocation());
    }
    if (from.has_request()) {
      mutable_request()->::ecu::lapi::pb::UdsInterfaceRequest::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::ecu::lapi::pb::UdsInterfaceResponse::MergeFrom(from.response());
    }
    if (from.has_status()) {
      mutable_status()->::ecu::lapi::pb::UdsInterfaceStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdsIfMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsIfMessage::CopyFrom(const UdsIfMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsIfMessage::IsInitialized() const {

  return true;
}

void UdsIfMessage::Swap(UdsIfMessage* other) {
  if (other != this) {
    std::swap(interface_, other->interface_);
    std::swap(allocation_, other->allocation_);
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdsIfMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdsIfMessage_descriptor_;
  metadata.reflection = UdsIfMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

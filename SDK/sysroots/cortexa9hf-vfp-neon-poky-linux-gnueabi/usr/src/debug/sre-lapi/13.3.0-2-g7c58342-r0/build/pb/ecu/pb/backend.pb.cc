// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "backend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* BackendProxyStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackendProxyStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BackendProxyStatus_ConnectionState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BackendProxyQueueStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackendProxyQueueStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackendProxyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackendProxyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BackendProxyResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BackendProxyTransmit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackendProxyTransmit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_backend_2eproto() {
  protobuf_AddDesc_backend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "backend.proto");
  GOOGLE_CHECK(file != NULL);
  BackendProxyStatus_descriptor_ = file->message_type(0);
  static const int BackendProxyStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyStatus, con_state_),
  };
  BackendProxyStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackendProxyStatus_descriptor_,
      BackendProxyStatus::default_instance_,
      BackendProxyStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackendProxyStatus));
  BackendProxyStatus_ConnectionState_descriptor_ = BackendProxyStatus_descriptor_->enum_type(0);
  BackendProxyQueueStatus_descriptor_ = file->message_type(1);
  static const int BackendProxyQueueStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyQueueStatus, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyQueueStatus, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyQueueStatus, in_flight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyQueueStatus, kl30robust_),
  };
  BackendProxyQueueStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackendProxyQueueStatus_descriptor_,
      BackendProxyQueueStatus::default_instance_,
      BackendProxyQueueStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyQueueStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyQueueStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackendProxyQueueStatus));
  BackendProxyResponse_descriptor_ = file->message_type(2);
  static const int BackendProxyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyResponse, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyResponse, status_),
  };
  BackendProxyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackendProxyResponse_descriptor_,
      BackendProxyResponse::default_instance_,
      BackendProxyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackendProxyResponse));
  BackendProxyResponse_Status_descriptor_ = BackendProxyResponse_descriptor_->enum_type(0);
  BackendProxyTransmit_descriptor_ = file->message_type(3);
  static const int BackendProxyTransmit_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, req_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, req_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, content_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, kl15robust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, kl30robust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, add_driver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, payload_),
  };
  BackendProxyTransmit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackendProxyTransmit_descriptor_,
      BackendProxyTransmit::default_instance_,
      BackendProxyTransmit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendProxyTransmit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackendProxyTransmit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_backend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackendProxyStatus_descriptor_, &BackendProxyStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackendProxyQueueStatus_descriptor_, &BackendProxyQueueStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackendProxyResponse_descriptor_, &BackendProxyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackendProxyTransmit_descriptor_, &BackendProxyTransmit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_backend_2eproto() {
  delete BackendProxyStatus::default_instance_;
  delete BackendProxyStatus_reflection_;
  delete BackendProxyQueueStatus::default_instance_;
  delete BackendProxyQueueStatus_reflection_;
  delete BackendProxyResponse::default_instance_;
  delete BackendProxyResponse_reflection_;
  delete BackendProxyTransmit::default_instance_;
  delete BackendProxyTransmit_reflection_;
}

void protobuf_AddDesc_backend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rbackend.proto\022\013ecu.lapi.pb\"\227\001\n\022Backend"
    "ProxyStatus\022B\n\tcon_state\030\001 \001(\0162/.ecu.lap"
    "i.pb.BackendProxyStatus.ConnectionState\""
    "=\n\017ConnectionState\022\t\n\005ERROR\020\000\022\020\n\014DISCONN"
    "ECTED\020\001\022\r\n\tCONNECTED\020\002\"a\n\027BackendProxyQu"
    "eueStatus\022\014\n\004size\030\001 \001(\r\022\021\n\tavailable\030\002 \001"
    "(\r\022\021\n\tin_flight\030\003 \001(\r\022\022\n\nkl30robust\030\004 \001("
    "\r\"\230\001\n\024BackendProxyResponse\022\016\n\006req_id\030\001 \001"
    "(\004\0228\n\006status\030\002 \001(\0162(.ecu.lapi.pb.Backend"
    "ProxyResponse.Status\"6\n\006Status\022\t\n\005ERROR\020"
    "\000\022\010\n\004SENT\020\001\022\n\n\006QUEUED\020\002\022\013\n\007DROPPED\020\003\"\327\001\n"
    "\024BackendProxyTransmit\022\016\n\006req_id\030\001 \001(\004\022\022\n"
    "\nreq_client\030\002 \001(\t\022\024\n\014req_response\030\003 \001(\010\022"
    "\022\n\ncontent_id\030\t \001(\r\022\017\n\007timeout\030\013 \001(\004\022\020\n\010"
    "priority\030\014 \001(\005\022\022\n\nkl15robust\030\017 \001(\010\022\022\n\nkl"
    "30robust\030\016 \001(\010\022\025\n\radd_driver_id\030\020 \001(\010\022\017\n"
    "\007payload\030\026 \001(\014", 654);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "backend.proto", &protobuf_RegisterTypes);
  BackendProxyStatus::default_instance_ = new BackendProxyStatus();
  BackendProxyQueueStatus::default_instance_ = new BackendProxyQueueStatus();
  BackendProxyResponse::default_instance_ = new BackendProxyResponse();
  BackendProxyTransmit::default_instance_ = new BackendProxyTransmit();
  BackendProxyStatus::default_instance_->InitAsDefaultInstance();
  BackendProxyQueueStatus::default_instance_->InitAsDefaultInstance();
  BackendProxyResponse::default_instance_->InitAsDefaultInstance();
  BackendProxyTransmit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_backend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_backend_2eproto {
  StaticDescriptorInitializer_backend_2eproto() {
    protobuf_AddDesc_backend_2eproto();
  }
} static_descriptor_initializer_backend_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BackendProxyStatus_ConnectionState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackendProxyStatus_ConnectionState_descriptor_;
}
bool BackendProxyStatus_ConnectionState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BackendProxyStatus_ConnectionState BackendProxyStatus::ERROR;
const BackendProxyStatus_ConnectionState BackendProxyStatus::DISCONNECTED;
const BackendProxyStatus_ConnectionState BackendProxyStatus::CONNECTED;
const BackendProxyStatus_ConnectionState BackendProxyStatus::ConnectionState_MIN;
const BackendProxyStatus_ConnectionState BackendProxyStatus::ConnectionState_MAX;
const int BackendProxyStatus::ConnectionState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BackendProxyStatus::kConStateFieldNumber;
#endif  // !_MSC_VER

BackendProxyStatus::BackendProxyStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BackendProxyStatus)
}

void BackendProxyStatus::InitAsDefaultInstance() {
}

BackendProxyStatus::BackendProxyStatus(const BackendProxyStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BackendProxyStatus)
}

void BackendProxyStatus::SharedCtor() {
  _cached_size_ = 0;
  con_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackendProxyStatus::~BackendProxyStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BackendProxyStatus)
  SharedDtor();
}

void BackendProxyStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackendProxyStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackendProxyStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackendProxyStatus_descriptor_;
}

const BackendProxyStatus& BackendProxyStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

BackendProxyStatus* BackendProxyStatus::default_instance_ = NULL;

BackendProxyStatus* BackendProxyStatus::New() const {
  return new BackendProxyStatus;
}

void BackendProxyStatus::Clear() {
  con_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackendProxyStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BackendProxyStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.BackendProxyStatus.ConnectionState con_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BackendProxyStatus_ConnectionState_IsValid(value)) {
            set_con_state(static_cast< ::ecu::lapi::pb::BackendProxyStatus_ConnectionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BackendProxyStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BackendProxyStatus)
  return false;
#undef DO_
}

void BackendProxyStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BackendProxyStatus)
  // optional .ecu.lapi.pb.BackendProxyStatus.ConnectionState con_state = 1;
  if (has_con_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->con_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BackendProxyStatus)
}

::google::protobuf::uint8* BackendProxyStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BackendProxyStatus)
  // optional .ecu.lapi.pb.BackendProxyStatus.ConnectionState con_state = 1;
  if (has_con_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->con_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BackendProxyStatus)
  return target;
}

int BackendProxyStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.BackendProxyStatus.ConnectionState con_state = 1;
    if (has_con_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->con_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackendProxyStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackendProxyStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackendProxyStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackendProxyStatus::MergeFrom(const BackendProxyStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_con_state()) {
      set_con_state(from.con_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackendProxyStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackendProxyStatus::CopyFrom(const BackendProxyStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackendProxyStatus::IsInitialized() const {

  return true;
}

void BackendProxyStatus::Swap(BackendProxyStatus* other) {
  if (other != this) {
    std::swap(con_state_, other->con_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackendProxyStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackendProxyStatus_descriptor_;
  metadata.reflection = BackendProxyStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackendProxyQueueStatus::kSizeFieldNumber;
const int BackendProxyQueueStatus::kAvailableFieldNumber;
const int BackendProxyQueueStatus::kInFlightFieldNumber;
const int BackendProxyQueueStatus::kKl30RobustFieldNumber;
#endif  // !_MSC_VER

BackendProxyQueueStatus::BackendProxyQueueStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BackendProxyQueueStatus)
}

void BackendProxyQueueStatus::InitAsDefaultInstance() {
}

BackendProxyQueueStatus::BackendProxyQueueStatus(const BackendProxyQueueStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BackendProxyQueueStatus)
}

void BackendProxyQueueStatus::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0u;
  available_ = 0u;
  in_flight_ = 0u;
  kl30robust_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackendProxyQueueStatus::~BackendProxyQueueStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BackendProxyQueueStatus)
  SharedDtor();
}

void BackendProxyQueueStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackendProxyQueueStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackendProxyQueueStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackendProxyQueueStatus_descriptor_;
}

const BackendProxyQueueStatus& BackendProxyQueueStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

BackendProxyQueueStatus* BackendProxyQueueStatus::default_instance_ = NULL;

BackendProxyQueueStatus* BackendProxyQueueStatus::New() const {
  return new BackendProxyQueueStatus;
}

void BackendProxyQueueStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BackendProxyQueueStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(size_, kl30robust_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackendProxyQueueStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BackendProxyQueueStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }

      // optional uint32 available = 2;
      case 2: {
        if (tag == 16) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_in_flight;
        break;
      }

      // optional uint32 in_flight = 3;
      case 3: {
        if (tag == 24) {
         parse_in_flight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_flight_)));
          set_has_in_flight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kl30robust;
        break;
      }

      // optional uint32 kl30robust = 4;
      case 4: {
        if (tag == 32) {
         parse_kl30robust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kl30robust_)));
          set_has_kl30robust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BackendProxyQueueStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BackendProxyQueueStatus)
  return false;
#undef DO_
}

void BackendProxyQueueStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BackendProxyQueueStatus)
  // optional uint32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size(), output);
  }

  // optional uint32 available = 2;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->available(), output);
  }

  // optional uint32 in_flight = 3;
  if (has_in_flight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_flight(), output);
  }

  // optional uint32 kl30robust = 4;
  if (has_kl30robust()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kl30robust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BackendProxyQueueStatus)
}

::google::protobuf::uint8* BackendProxyQueueStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BackendProxyQueueStatus)
  // optional uint32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size(), target);
  }

  // optional uint32 available = 2;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->available(), target);
  }

  // optional uint32 in_flight = 3;
  if (has_in_flight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_flight(), target);
  }

  // optional uint32 kl30robust = 4;
  if (has_kl30robust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kl30robust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BackendProxyQueueStatus)
  return target;
}

int BackendProxyQueueStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional uint32 available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available());
    }

    // optional uint32 in_flight = 3;
    if (has_in_flight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_flight());
    }

    // optional uint32 kl30robust = 4;
    if (has_kl30robust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kl30robust());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackendProxyQueueStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackendProxyQueueStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackendProxyQueueStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackendProxyQueueStatus::MergeFrom(const BackendProxyQueueStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_in_flight()) {
      set_in_flight(from.in_flight());
    }
    if (from.has_kl30robust()) {
      set_kl30robust(from.kl30robust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackendProxyQueueStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackendProxyQueueStatus::CopyFrom(const BackendProxyQueueStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackendProxyQueueStatus::IsInitialized() const {

  return true;
}

void BackendProxyQueueStatus::Swap(BackendProxyQueueStatus* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(available_, other->available_);
    std::swap(in_flight_, other->in_flight_);
    std::swap(kl30robust_, other->kl30robust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackendProxyQueueStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackendProxyQueueStatus_descriptor_;
  metadata.reflection = BackendProxyQueueStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BackendProxyResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackendProxyResponse_Status_descriptor_;
}
bool BackendProxyResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BackendProxyResponse_Status BackendProxyResponse::ERROR;
const BackendProxyResponse_Status BackendProxyResponse::SENT;
const BackendProxyResponse_Status BackendProxyResponse::QUEUED;
const BackendProxyResponse_Status BackendProxyResponse::DROPPED;
const BackendProxyResponse_Status BackendProxyResponse::Status_MIN;
const BackendProxyResponse_Status BackendProxyResponse::Status_MAX;
const int BackendProxyResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BackendProxyResponse::kReqIdFieldNumber;
const int BackendProxyResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

BackendProxyResponse::BackendProxyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BackendProxyResponse)
}

void BackendProxyResponse::InitAsDefaultInstance() {
}

BackendProxyResponse::BackendProxyResponse(const BackendProxyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BackendProxyResponse)
}

void BackendProxyResponse::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackendProxyResponse::~BackendProxyResponse() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BackendProxyResponse)
  SharedDtor();
}

void BackendProxyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackendProxyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackendProxyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackendProxyResponse_descriptor_;
}

const BackendProxyResponse& BackendProxyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

BackendProxyResponse* BackendProxyResponse::default_instance_ = NULL;

BackendProxyResponse* BackendProxyResponse::New() const {
  return new BackendProxyResponse;
}

void BackendProxyResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BackendProxyResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(req_id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackendProxyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BackendProxyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .ecu.lapi.pb.BackendProxyResponse.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BackendProxyResponse_Status_IsValid(value)) {
            set_status(static_cast< ::ecu::lapi::pb::BackendProxyResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BackendProxyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BackendProxyResponse)
  return false;
#undef DO_
}

void BackendProxyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BackendProxyResponse)
  // optional uint64 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // optional .ecu.lapi.pb.BackendProxyResponse.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BackendProxyResponse)
}

::google::protobuf::uint8* BackendProxyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BackendProxyResponse)
  // optional uint64 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // optional .ecu.lapi.pb.BackendProxyResponse.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BackendProxyResponse)
  return target;
}

int BackendProxyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->req_id());
    }

    // optional .ecu.lapi.pb.BackendProxyResponse.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackendProxyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackendProxyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackendProxyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackendProxyResponse::MergeFrom(const BackendProxyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackendProxyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackendProxyResponse::CopyFrom(const BackendProxyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackendProxyResponse::IsInitialized() const {

  return true;
}

void BackendProxyResponse::Swap(BackendProxyResponse* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackendProxyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackendProxyResponse_descriptor_;
  metadata.reflection = BackendProxyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackendProxyTransmit::kReqIdFieldNumber;
const int BackendProxyTransmit::kReqClientFieldNumber;
const int BackendProxyTransmit::kReqResponseFieldNumber;
const int BackendProxyTransmit::kContentIdFieldNumber;
const int BackendProxyTransmit::kTimeoutFieldNumber;
const int BackendProxyTransmit::kPriorityFieldNumber;
const int BackendProxyTransmit::kKl15RobustFieldNumber;
const int BackendProxyTransmit::kKl30RobustFieldNumber;
const int BackendProxyTransmit::kAddDriverIdFieldNumber;
const int BackendProxyTransmit::kPayloadFieldNumber;
#endif  // !_MSC_VER

BackendProxyTransmit::BackendProxyTransmit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BackendProxyTransmit)
}

void BackendProxyTransmit::InitAsDefaultInstance() {
}

BackendProxyTransmit::BackendProxyTransmit(const BackendProxyTransmit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BackendProxyTransmit)
}

void BackendProxyTransmit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_id_ = GOOGLE_ULONGLONG(0);
  req_client_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_response_ = false;
  content_id_ = 0u;
  timeout_ = GOOGLE_ULONGLONG(0);
  priority_ = 0;
  kl15robust_ = false;
  kl30robust_ = false;
  add_driver_id_ = false;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackendProxyTransmit::~BackendProxyTransmit() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BackendProxyTransmit)
  SharedDtor();
}

void BackendProxyTransmit::SharedDtor() {
  if (req_client_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_client_;
  }
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void BackendProxyTransmit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackendProxyTransmit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackendProxyTransmit_descriptor_;
}

const BackendProxyTransmit& BackendProxyTransmit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

BackendProxyTransmit* BackendProxyTransmit::default_instance_ = NULL;

BackendProxyTransmit* BackendProxyTransmit::New() const {
  return new BackendProxyTransmit;
}

void BackendProxyTransmit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BackendProxyTransmit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(timeout_, priority_);
    ZR_(req_response_, kl30robust_);
    req_id_ = GOOGLE_ULONGLONG(0);
    if (has_req_client()) {
      if (req_client_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        req_client_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    add_driver_id_ = false;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackendProxyTransmit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BackendProxyTransmit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_req_client;
        break;
      }

      // optional string req_client = 2;
      case 2: {
        if (tag == 18) {
         parse_req_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_client()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->req_client().data(), this->req_client().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "req_client");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_response;
        break;
      }

      // optional bool req_response = 3;
      case 3: {
        if (tag == 24) {
         parse_req_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &req_response_)));
          set_has_req_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_content_id;
        break;
      }

      // optional uint32 content_id = 9;
      case 9: {
        if (tag == 72) {
         parse_content_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_id_)));
          set_has_content_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_timeout;
        break;
      }

      // optional uint64 timeout = 11;
      case 11: {
        if (tag == 88) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_priority;
        break;
      }

      // optional int32 priority = 12;
      case 12: {
        if (tag == 96) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_kl30robust;
        break;
      }

      // optional bool kl30robust = 14;
      case 14: {
        if (tag == 112) {
         parse_kl30robust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kl30robust_)));
          set_has_kl30robust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_kl15robust;
        break;
      }

      // optional bool kl15robust = 15;
      case 15: {
        if (tag == 120) {
         parse_kl15robust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kl15robust_)));
          set_has_kl15robust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_add_driver_id;
        break;
      }

      // optional bool add_driver_id = 16;
      case 16: {
        if (tag == 128) {
         parse_add_driver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_driver_id_)));
          set_has_add_driver_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_payload;
        break;
      }

      // optional bytes payload = 22;
      case 22: {
        if (tag == 178) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BackendProxyTransmit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BackendProxyTransmit)
  return false;
#undef DO_
}

void BackendProxyTransmit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BackendProxyTransmit)
  // optional uint64 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // optional string req_client = 2;
  if (has_req_client()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_client().data(), this->req_client().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "req_client");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->req_client(), output);
  }

  // optional bool req_response = 3;
  if (has_req_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->req_response(), output);
  }

  // optional uint32 content_id = 9;
  if (has_content_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->content_id(), output);
  }

  // optional uint64 timeout = 11;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->timeout(), output);
  }

  // optional int32 priority = 12;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->priority(), output);
  }

  // optional bool kl30robust = 14;
  if (has_kl30robust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->kl30robust(), output);
  }

  // optional bool kl15robust = 15;
  if (has_kl15robust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->kl15robust(), output);
  }

  // optional bool add_driver_id = 16;
  if (has_add_driver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->add_driver_id(), output);
  }

  // optional bytes payload = 22;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BackendProxyTransmit)
}

::google::protobuf::uint8* BackendProxyTransmit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BackendProxyTransmit)
  // optional uint64 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // optional string req_client = 2;
  if (has_req_client()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_client().data(), this->req_client().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "req_client");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->req_client(), target);
  }

  // optional bool req_response = 3;
  if (has_req_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->req_response(), target);
  }

  // optional uint32 content_id = 9;
  if (has_content_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->content_id(), target);
  }

  // optional uint64 timeout = 11;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->timeout(), target);
  }

  // optional int32 priority = 12;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->priority(), target);
  }

  // optional bool kl30robust = 14;
  if (has_kl30robust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->kl30robust(), target);
  }

  // optional bool kl15robust = 15;
  if (has_kl15robust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->kl15robust(), target);
  }

  // optional bool add_driver_id = 16;
  if (has_add_driver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->add_driver_id(), target);
  }

  // optional bytes payload = 22;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BackendProxyTransmit)
  return target;
}

int BackendProxyTransmit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->req_id());
    }

    // optional string req_client = 2;
    if (has_req_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_client());
    }

    // optional bool req_response = 3;
    if (has_req_response()) {
      total_size += 1 + 1;
    }

    // optional uint32 content_id = 9;
    if (has_content_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_id());
    }

    // optional uint64 timeout = 11;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeout());
    }

    // optional int32 priority = 12;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional bool kl15robust = 15;
    if (has_kl15robust()) {
      total_size += 1 + 1;
    }

    // optional bool kl30robust = 14;
    if (has_kl30robust()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool add_driver_id = 16;
    if (has_add_driver_id()) {
      total_size += 2 + 1;
    }

    // optional bytes payload = 22;
    if (has_payload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackendProxyTransmit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackendProxyTransmit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackendProxyTransmit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackendProxyTransmit::MergeFrom(const BackendProxyTransmit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_req_client()) {
      set_req_client(from.req_client());
    }
    if (from.has_req_response()) {
      set_req_response(from.req_response());
    }
    if (from.has_content_id()) {
      set_content_id(from.content_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_kl15robust()) {
      set_kl15robust(from.kl15robust());
    }
    if (from.has_kl30robust()) {
      set_kl30robust(from.kl30robust());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_add_driver_id()) {
      set_add_driver_id(from.add_driver_id());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackendProxyTransmit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackendProxyTransmit::CopyFrom(const BackendProxyTransmit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackendProxyTransmit::IsInitialized() const {

  return true;
}

void BackendProxyTransmit::Swap(BackendProxyTransmit* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(req_client_, other->req_client_);
    std::swap(req_response_, other->req_response_);
    std::swap(content_id_, other->content_id_);
    std::swap(timeout_, other->timeout_);
    std::swap(priority_, other->priority_);
    std::swap(kl15robust_, other->kl15robust_);
    std::swap(kl30robust_, other->kl30robust_);
    std::swap(add_driver_id_, other->add_driver_id_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackendProxyTransmit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackendProxyTransmit_descriptor_;
  metadata.reflection = BackendProxyTransmit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

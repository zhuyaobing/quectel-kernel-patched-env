// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* LogConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogConfig_LogModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogConfig_LogModule_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogConfig_LogMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogConfig_LogLevel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_2eproto() {
  protobuf_AddDesc_log_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log.proto");
  GOOGLE_CHECK(file != NULL);
  LogConfig_descriptor_ = file->message_type(0);
  static const int LogConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig, modules_),
  };
  LogConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogConfig_descriptor_,
      LogConfig::default_instance_,
      LogConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogConfig));
  LogConfig_LogModule_descriptor_ = LogConfig_descriptor_->nested_type(0);
  static const int LogConfig_LogModule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig_LogModule, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig_LogModule, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig_LogModule, recursive_),
  };
  LogConfig_LogModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogConfig_LogModule_descriptor_,
      LogConfig_LogModule::default_instance_,
      LogConfig_LogModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig_LogModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogConfig_LogModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogConfig_LogModule));
  LogConfig_LogMode_descriptor_ = LogConfig_descriptor_->enum_type(0);
  LogConfig_LogLevel_descriptor_ = LogConfig_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogConfig_descriptor_, &LogConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogConfig_LogModule_descriptor_, &LogConfig_LogModule::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_2eproto() {
  delete LogConfig::default_instance_;
  delete LogConfig_reflection_;
  delete LogConfig_LogModule::default_instance_;
  delete LogConfig_LogModule_reflection_;
}

void protobuf_AddDesc_log_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tlog.proto\022\013ecu.lapi.pb\"\247\003\n\tLogConfig\022,"
    "\n\004mode\030\001 \001(\0162\036.ecu.lapi.pb.LogConfig.Log"
    "Mode\022.\n\005level\030\002 \001(\0162\037.ecu.lapi.pb.LogCon"
    "fig.LogLevel\0221\n\007modules\030\003 \003(\0132 .ecu.lapi"
    ".pb.LogConfig.LogModule\032=\n\tLogModule\022\014\n\004"
    "name\030\001 \001(\t\022\017\n\007enabled\030\002 \001(\010\022\021\n\trecursive"
    "\030\003 \001(\010\"<\n\007LogMode\022\017\n\013MODE_SYSLOG\020\000\022\017\n\013MO"
    "DE_STDOUT\020\001\022\017\n\013MODE_STDERR\020\002\"\213\001\n\010LogLeve"
    "l\022\021\n\rLVL_EMERGENCY\020\000\022\r\n\tLVL_ALERT\020\001\022\020\n\014L"
    "VL_CRITICAL\020\002\022\r\n\tLVL_ERROR\020\003\022\017\n\013LVL_WARN"
    "ING\020\004\022\016\n\nLVL_NOTICE\020\005\022\014\n\010LVL_INFO\020\006\022\r\n\tL"
    "VL_DEBUG\020\007", 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log.proto", &protobuf_RegisterTypes);
  LogConfig::default_instance_ = new LogConfig();
  LogConfig_LogModule::default_instance_ = new LogConfig_LogModule();
  LogConfig::default_instance_->InitAsDefaultInstance();
  LogConfig_LogModule::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_2eproto {
  StaticDescriptorInitializer_log_2eproto() {
    protobuf_AddDesc_log_2eproto();
  }
} static_descriptor_initializer_log_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LogConfig_LogMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogConfig_LogMode_descriptor_;
}
bool LogConfig_LogMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogConfig_LogMode LogConfig::MODE_SYSLOG;
const LogConfig_LogMode LogConfig::MODE_STDOUT;
const LogConfig_LogMode LogConfig::MODE_STDERR;
const LogConfig_LogMode LogConfig::LogMode_MIN;
const LogConfig_LogMode LogConfig::LogMode_MAX;
const int LogConfig::LogMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LogConfig_LogLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogConfig_LogLevel_descriptor_;
}
bool LogConfig_LogLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogConfig_LogLevel LogConfig::LVL_EMERGENCY;
const LogConfig_LogLevel LogConfig::LVL_ALERT;
const LogConfig_LogLevel LogConfig::LVL_CRITICAL;
const LogConfig_LogLevel LogConfig::LVL_ERROR;
const LogConfig_LogLevel LogConfig::LVL_WARNING;
const LogConfig_LogLevel LogConfig::LVL_NOTICE;
const LogConfig_LogLevel LogConfig::LVL_INFO;
const LogConfig_LogLevel LogConfig::LVL_DEBUG;
const LogConfig_LogLevel LogConfig::LogLevel_MIN;
const LogConfig_LogLevel LogConfig::LogLevel_MAX;
const int LogConfig::LogLevel_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogConfig_LogModule::kNameFieldNumber;
const int LogConfig_LogModule::kEnabledFieldNumber;
const int LogConfig_LogModule::kRecursiveFieldNumber;
#endif  // !_MSC_VER

LogConfig_LogModule::LogConfig_LogModule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.LogConfig.LogModule)
}

void LogConfig_LogModule::InitAsDefaultInstance() {
}

LogConfig_LogModule::LogConfig_LogModule(const LogConfig_LogModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.LogConfig.LogModule)
}

void LogConfig_LogModule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
  recursive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogConfig_LogModule::~LogConfig_LogModule() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.LogConfig.LogModule)
  SharedDtor();
}

void LogConfig_LogModule::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LogConfig_LogModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogConfig_LogModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogConfig_LogModule_descriptor_;
}

const LogConfig_LogModule& LogConfig_LogModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

LogConfig_LogModule* LogConfig_LogModule::default_instance_ = NULL;

LogConfig_LogModule* LogConfig_LogModule::New() const {
  return new LogConfig_LogModule;
}

void LogConfig_LogModule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogConfig_LogModule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(enabled_, recursive_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogConfig_LogModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.LogConfig.LogModule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recursive;
        break;
      }

      // optional bool recursive = 3;
      case 3: {
        if (tag == 24) {
         parse_recursive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recursive_)));
          set_has_recursive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.LogConfig.LogModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.LogConfig.LogModule)
  return false;
#undef DO_
}

void LogConfig_LogModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.LogConfig.LogModule)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional bool recursive = 3;
  if (has_recursive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->recursive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.LogConfig.LogModule)
}

::google::protobuf::uint8* LogConfig_LogModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.LogConfig.LogModule)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool enabled = 2;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // optional bool recursive = 3;
  if (has_recursive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->recursive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.LogConfig.LogModule)
  return target;
}

int LogConfig_LogModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool recursive = 3;
    if (has_recursive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogConfig_LogModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogConfig_LogModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogConfig_LogModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogConfig_LogModule::MergeFrom(const LogConfig_LogModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_recursive()) {
      set_recursive(from.recursive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogConfig_LogModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogConfig_LogModule::CopyFrom(const LogConfig_LogModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogConfig_LogModule::IsInitialized() const {

  return true;
}

void LogConfig_LogModule::Swap(LogConfig_LogModule* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(enabled_, other->enabled_);
    std::swap(recursive_, other->recursive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogConfig_LogModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogConfig_LogModule_descriptor_;
  metadata.reflection = LogConfig_LogModule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogConfig::kModeFieldNumber;
const int LogConfig::kLevelFieldNumber;
const int LogConfig::kModulesFieldNumber;
#endif  // !_MSC_VER

LogConfig::LogConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.LogConfig)
}

void LogConfig::InitAsDefaultInstance() {
}

LogConfig::LogConfig(const LogConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.LogConfig)
}

void LogConfig::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogConfig::~LogConfig() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.LogConfig)
  SharedDtor();
}

void LogConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogConfig_descriptor_;
}

const LogConfig& LogConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

LogConfig* LogConfig::default_instance_ = NULL;

LogConfig* LogConfig::New() const {
  return new LogConfig;
}

void LogConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mode_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  modules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.LogConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.LogConfig.LogMode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::LogConfig_LogMode_IsValid(value)) {
            set_mode(static_cast< ::ecu::lapi::pb::LogConfig_LogMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional .ecu.lapi.pb.LogConfig.LogLevel level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::LogConfig_LogLevel_IsValid(value)) {
            set_level(static_cast< ::ecu::lapi::pb::LogConfig_LogLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_modules;
        break;
      }

      // repeated .ecu.lapi.pb.LogConfig.LogModule modules = 3;
      case 3: {
        if (tag == 26) {
         parse_modules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_modules;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.LogConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.LogConfig)
  return false;
#undef DO_
}

void LogConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.LogConfig)
  // optional .ecu.lapi.pb.LogConfig.LogMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional .ecu.lapi.pb.LogConfig.LogLevel level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // repeated .ecu.lapi.pb.LogConfig.LogModule modules = 3;
  for (int i = 0; i < this->modules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->modules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.LogConfig)
}

::google::protobuf::uint8* LogConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.LogConfig)
  // optional .ecu.lapi.pb.LogConfig.LogMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional .ecu.lapi.pb.LogConfig.LogLevel level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  // repeated .ecu.lapi.pb.LogConfig.LogModule modules = 3;
  for (int i = 0; i < this->modules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->modules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.LogConfig)
  return target;
}

int LogConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.LogConfig.LogMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .ecu.lapi.pb.LogConfig.LogLevel level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

  }
  // repeated .ecu.lapi.pb.LogConfig.LogModule modules = 3;
  total_size += 1 * this->modules_size();
  for (int i = 0; i < this->modules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->modules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogConfig::MergeFrom(const LogConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  modules_.MergeFrom(from.modules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogConfig::CopyFrom(const LogConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogConfig::IsInitialized() const {

  return true;
}

void LogConfig::Swap(LogConfig* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(level_, other->level_);
    modules_.Swap(&other->modules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogConfig_descriptor_;
  metadata.reflection = LogConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

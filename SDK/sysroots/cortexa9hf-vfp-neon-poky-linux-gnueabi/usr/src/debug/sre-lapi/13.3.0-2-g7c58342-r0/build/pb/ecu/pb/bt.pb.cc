// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* BtDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BtStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BtStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BtDiscoveryResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtDiscoveryResults_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BtDiscoveryResults_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BtDiscoveryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtDiscoveryRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BtDiscoveryRequest_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BtDiscoveryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtDiscoveryResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BtDiscoveryResponse_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bt_2eproto() {
  protobuf_AddDesc_bt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bt.proto");
  GOOGLE_CHECK(file != NULL);
  BtDevice_descriptor_ = file->message_type(0);
  static const int BtDevice_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, paired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, ts_discovered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, ts_last_seen_),
  };
  BtDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtDevice_descriptor_,
      BtDevice::default_instance_,
      BtDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtDevice));
  RpcRequest_descriptor_ = file->message_type(1);
  static const int RpcRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, client_),
  };
  RpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcRequest_descriptor_,
      RpcRequest::default_instance_,
      RpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcRequest));
  RpcResponse_descriptor_ = file->message_type(2);
  static const int RpcResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponse, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponse, status_),
  };
  RpcResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcResponse_descriptor_,
      RpcResponse::default_instance_,
      RpcResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcResponse));
  RpcResponse_Status_descriptor_ = RpcResponse_descriptor_->enum_type(0);
  BtStatus_descriptor_ = file->message_type(3);
  static const int BtStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtStatus, status_),
  };
  BtStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtStatus_descriptor_,
      BtStatus::default_instance_,
      BtStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtStatus));
  BtStatus_Status_descriptor_ = BtStatus_descriptor_->enum_type(0);
  BtDiscoveryResults_descriptor_ = file->message_type(4);
  static const int BtDiscoveryResults_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryResults, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryResults, devices_),
  };
  BtDiscoveryResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtDiscoveryResults_descriptor_,
      BtDiscoveryResults::default_instance_,
      BtDiscoveryResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtDiscoveryResults));
  BtDiscoveryResults_Status_descriptor_ = BtDiscoveryResults_descriptor_->enum_type(0);
  BtDiscoveryRequest_descriptor_ = file->message_type(5);
  static const int BtDiscoveryRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryRequest, rpc_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryRequest, action_),
  };
  BtDiscoveryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtDiscoveryRequest_descriptor_,
      BtDiscoveryRequest::default_instance_,
      BtDiscoveryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtDiscoveryRequest));
  BtDiscoveryRequest_Action_descriptor_ = BtDiscoveryRequest_descriptor_->enum_type(0);
  BtDiscoveryResponse_descriptor_ = file->message_type(6);
  static const int BtDiscoveryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryResponse, rpc_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryResponse, status_),
  };
  BtDiscoveryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtDiscoveryResponse_descriptor_,
      BtDiscoveryResponse::default_instance_,
      BtDiscoveryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtDiscoveryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtDiscoveryResponse));
  BtDiscoveryResponse_Status_descriptor_ = BtDiscoveryResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtDevice_descriptor_, &BtDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcRequest_descriptor_, &RpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcResponse_descriptor_, &RpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtStatus_descriptor_, &BtStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtDiscoveryResults_descriptor_, &BtDiscoveryResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtDiscoveryRequest_descriptor_, &BtDiscoveryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtDiscoveryResponse_descriptor_, &BtDiscoveryResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bt_2eproto() {
  delete BtDevice::default_instance_;
  delete BtDevice_reflection_;
  delete RpcRequest::default_instance_;
  delete RpcRequest_reflection_;
  delete RpcResponse::default_instance_;
  delete RpcResponse_reflection_;
  delete BtStatus::default_instance_;
  delete BtStatus_reflection_;
  delete BtDiscoveryResults::default_instance_;
  delete BtDiscoveryResults_reflection_;
  delete BtDiscoveryRequest::default_instance_;
  delete BtDiscoveryRequest_reflection_;
  delete BtDiscoveryResponse::default_instance_;
  delete BtDiscoveryResponse_reflection_;
}

void protobuf_AddDesc_bt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010bt.proto\022\013ecu.lapi.pb\"\207\001\n\010BtDevice\022\017\n\007"
    "address\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004rssi\030\003 \001("
    "\005\022\016\n\006paired\030\004 \001(\010\022\021\n\tconnected\030\005 \001(\010\022\025\n\r"
    "ts_discovered\030\006 \001(\004\022\024\n\014ts_last_seen\030\007 \001("
    "\004\",\n\nRpcRequest\022\016\n\006req_id\030\001 \001(\004\022\016\n\006clien"
    "t\030\002 \001(\t\"z\n\013RpcResponse\022\016\n\006req_id\030\001 \001(\004\022/"
    "\n\006status\030\002 \001(\0162\037.ecu.lapi.pb.RpcResponse"
    ".Status\"*\n\006Status\022\r\n\tUNDEFINED\020\000\022\006\n\002OK\020\001"
    "\022\t\n\005ERROR\020\002\"~\n\010BtStatus\022,\n\006status\030\001 \001(\0162"
    "\034.ecu.lapi.pb.BtStatus.Status\"D\n\006Status\022"
    "\017\n\013UNAVAILABLE\020\000\022\r\n\tAVAILABLE\020\001\022\017\n\013OPERA"
    "TIONAL\020\002\022\t\n\005ERROR\020\003\"\257\001\n\022BtDiscoveryResul"
    "ts\0226\n\006status\030\001 \001(\0162&.ecu.lapi.pb.BtDisco"
    "veryResults.Status\022&\n\007devices\030\002 \003(\0132\025.ec"
    "u.lapi.pb.BtDevice\"9\n\006Status\022\r\n\tUNDEFINE"
    "D\020\000\022\013\n\007SUCCESS\020\001\022\t\n\005ERROR\020\002\022\010\n\004BUSY\020\003\"\257\001"
    "\n\022BtDiscoveryRequest\022(\n\007rpc_req\030\001 \001(\0132\027."
    "ecu.lapi.pb.RpcRequest\0226\n\006action\030\002 \001(\0162&"
    ".ecu.lapi.pb.BtDiscoveryRequest.Action\"7"
    "\n\006Action\022\r\n\tUNDEFINED\020\000\022\t\n\005START\020\001\022\010\n\004ST"
    "OP\020\002\022\t\n\005QUERY\020\003\"\254\001\n\023BtDiscoveryResponse\022"
    ")\n\007rpc_res\030\001 \001(\0132\030.ecu.lapi.pb.RpcRespon"
    "se\0227\n\006status\030\002 \001(\0162\'.ecu.lapi.pb.BtDisco"
    "veryResponse.Status\"1\n\006Status\022\r\n\tUNDEFIN"
    "ED\020\000\022\013\n\007STARTED\020\001\022\013\n\007STOPPED\020\002", 990);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bt.proto", &protobuf_RegisterTypes);
  BtDevice::default_instance_ = new BtDevice();
  RpcRequest::default_instance_ = new RpcRequest();
  RpcResponse::default_instance_ = new RpcResponse();
  BtStatus::default_instance_ = new BtStatus();
  BtDiscoveryResults::default_instance_ = new BtDiscoveryResults();
  BtDiscoveryRequest::default_instance_ = new BtDiscoveryRequest();
  BtDiscoveryResponse::default_instance_ = new BtDiscoveryResponse();
  BtDevice::default_instance_->InitAsDefaultInstance();
  RpcRequest::default_instance_->InitAsDefaultInstance();
  RpcResponse::default_instance_->InitAsDefaultInstance();
  BtStatus::default_instance_->InitAsDefaultInstance();
  BtDiscoveryResults::default_instance_->InitAsDefaultInstance();
  BtDiscoveryRequest::default_instance_->InitAsDefaultInstance();
  BtDiscoveryResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bt_2eproto {
  StaticDescriptorInitializer_bt_2eproto() {
    protobuf_AddDesc_bt_2eproto();
  }
} static_descriptor_initializer_bt_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BtDevice::kAddressFieldNumber;
const int BtDevice::kNameFieldNumber;
const int BtDevice::kRssiFieldNumber;
const int BtDevice::kPairedFieldNumber;
const int BtDevice::kConnectedFieldNumber;
const int BtDevice::kTsDiscoveredFieldNumber;
const int BtDevice::kTsLastSeenFieldNumber;
#endif  // !_MSC_VER

BtDevice::BtDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BtDevice)
}

void BtDevice::InitAsDefaultInstance() {
}

BtDevice::BtDevice(const BtDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BtDevice)
}

void BtDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rssi_ = 0;
  paired_ = false;
  connected_ = false;
  ts_discovered_ = GOOGLE_ULONGLONG(0);
  ts_last_seen_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtDevice::~BtDevice() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BtDevice)
  SharedDtor();
}

void BtDevice::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BtDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtDevice_descriptor_;
}

const BtDevice& BtDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bt_2eproto();
  return *default_instance_;
}

BtDevice* BtDevice::default_instance_ = NULL;

BtDevice* BtDevice::New() const {
  return new BtDevice;
}

void BtDevice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BtDevice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(rssi_, ts_last_seen_);
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BtDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rssi;
        break;
      }

      // optional int32 rssi = 3;
      case 3: {
        if (tag == 24) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_paired;
        break;
      }

      // optional bool paired = 4;
      case 4: {
        if (tag == 32) {
         parse_paired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paired_)));
          set_has_paired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_connected;
        break;
      }

      // optional bool connected = 5;
      case 5: {
        if (tag == 40) {
         parse_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
          set_has_connected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ts_discovered;
        break;
      }

      // optional uint64 ts_discovered = 6;
      case 6: {
        if (tag == 48) {
         parse_ts_discovered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_discovered_)));
          set_has_ts_discovered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ts_last_seen;
        break;
      }

      // optional uint64 ts_last_seen = 7;
      case 7: {
        if (tag == 56) {
         parse_ts_last_seen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_last_seen_)));
          set_has_ts_last_seen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BtDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BtDevice)
  return false;
#undef DO_
}

void BtDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BtDevice)
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 rssi = 3;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rssi(), output);
  }

  // optional bool paired = 4;
  if (has_paired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->paired(), output);
  }

  // optional bool connected = 5;
  if (has_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->connected(), output);
  }

  // optional uint64 ts_discovered = 6;
  if (has_ts_discovered()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ts_discovered(), output);
  }

  // optional uint64 ts_last_seen = 7;
  if (has_ts_last_seen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->ts_last_seen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BtDevice)
}

::google::protobuf::uint8* BtDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BtDevice)
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 rssi = 3;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rssi(), target);
  }

  // optional bool paired = 4;
  if (has_paired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->paired(), target);
  }

  // optional bool connected = 5;
  if (has_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->connected(), target);
  }

  // optional uint64 ts_discovered = 6;
  if (has_ts_discovered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ts_discovered(), target);
  }

  // optional uint64 ts_last_seen = 7;
  if (has_ts_last_seen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->ts_last_seen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BtDevice)
  return target;
}

int BtDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 rssi = 3;
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rssi());
    }

    // optional bool paired = 4;
    if (has_paired()) {
      total_size += 1 + 1;
    }

    // optional bool connected = 5;
    if (has_connected()) {
      total_size += 1 + 1;
    }

    // optional uint64 ts_discovered = 6;
    if (has_ts_discovered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts_discovered());
    }

    // optional uint64 ts_last_seen = 7;
    if (has_ts_last_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts_last_seen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtDevice::MergeFrom(const BtDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
    if (from.has_paired()) {
      set_paired(from.paired());
    }
    if (from.has_connected()) {
      set_connected(from.connected());
    }
    if (from.has_ts_discovered()) {
      set_ts_discovered(from.ts_discovered());
    }
    if (from.has_ts_last_seen()) {
      set_ts_last_seen(from.ts_last_seen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtDevice::CopyFrom(const BtDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtDevice::IsInitialized() const {

  return true;
}

void BtDevice::Swap(BtDevice* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(name_, other->name_);
    std::swap(rssi_, other->rssi_);
    std::swap(paired_, other->paired_);
    std::swap(connected_, other->connected_);
    std::swap(ts_discovered_, other->ts_discovered_);
    std::swap(ts_last_seen_, other->ts_last_seen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtDevice_descriptor_;
  metadata.reflection = BtDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcRequest::kReqIdFieldNumber;
const int RpcRequest::kClientFieldNumber;
#endif  // !_MSC_VER

RpcRequest::RpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.RpcRequest)
}

void RpcRequest::InitAsDefaultInstance() {
}

RpcRequest::RpcRequest(const RpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.RpcRequest)
}

void RpcRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_id_ = GOOGLE_ULONGLONG(0);
  client_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcRequest::~RpcRequest() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.RpcRequest)
  SharedDtor();
}

void RpcRequest::SharedDtor() {
  if (client_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_;
  }
  if (this != default_instance_) {
  }
}

void RpcRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcRequest_descriptor_;
}

const RpcRequest& RpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bt_2eproto();
  return *default_instance_;
}

RpcRequest* RpcRequest::default_instance_ = NULL;

RpcRequest* RpcRequest::New() const {
  return new RpcRequest;
}

void RpcRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    req_id_ = GOOGLE_ULONGLONG(0);
    if (has_client()) {
      if (client_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.RpcRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // optional string client = 2;
      case 2: {
        if (tag == 18) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client().data(), this->client().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.RpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.RpcRequest)
  return false;
#undef DO_
}

void RpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.RpcRequest)
  // optional uint64 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // optional string client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client().data(), this->client().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.RpcRequest)
}

::google::protobuf::uint8* RpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.RpcRequest)
  // optional uint64 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // optional string client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client().data(), this->client().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.RpcRequest)
  return target;
}

int RpcRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->req_id());
    }

    // optional string client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcRequest::MergeFrom(const RpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_client()) {
      set_client(from.client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequest::CopyFrom(const RpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequest::IsInitialized() const {

  return true;
}

void RpcRequest::Swap(RpcRequest* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(client_, other->client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcRequest_descriptor_;
  metadata.reflection = RpcRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RpcResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcResponse_Status_descriptor_;
}
bool RpcResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpcResponse_Status RpcResponse::UNDEFINED;
const RpcResponse_Status RpcResponse::OK;
const RpcResponse_Status RpcResponse::ERROR;
const RpcResponse_Status RpcResponse::Status_MIN;
const RpcResponse_Status RpcResponse::Status_MAX;
const int RpcResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpcResponse::kReqIdFieldNumber;
const int RpcResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

RpcResponse::RpcResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.RpcResponse)
}

void RpcResponse::InitAsDefaultInstance() {
}

RpcResponse::RpcResponse(const RpcResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.RpcResponse)
}

void RpcResponse::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcResponse::~RpcResponse() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.RpcResponse)
  SharedDtor();
}

void RpcResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpcResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcResponse_descriptor_;
}

const RpcResponse& RpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bt_2eproto();
  return *default_instance_;
}

RpcResponse* RpcResponse::default_instance_ = NULL;

RpcResponse* RpcResponse::New() const {
  return new RpcResponse;
}

void RpcResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpcResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(req_id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.RpcResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .ecu.lapi.pb.RpcResponse.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::RpcResponse_Status_IsValid(value)) {
            set_status(static_cast< ::ecu::lapi::pb::RpcResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.RpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.RpcResponse)
  return false;
#undef DO_
}

void RpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.RpcResponse)
  // optional uint64 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // optional .ecu.lapi.pb.RpcResponse.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.RpcResponse)
}

::google::protobuf::uint8* RpcResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.RpcResponse)
  // optional uint64 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // optional .ecu.lapi.pb.RpcResponse.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.RpcResponse)
  return target;
}

int RpcResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->req_id());
    }

    // optional .ecu.lapi.pb.RpcResponse.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcResponse::MergeFrom(const RpcResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResponse::CopyFrom(const RpcResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponse::IsInitialized() const {

  return true;
}

void RpcResponse::Swap(RpcResponse* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcResponse_descriptor_;
  metadata.reflection = RpcResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BtStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtStatus_Status_descriptor_;
}
bool BtStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BtStatus_Status BtStatus::UNAVAILABLE;
const BtStatus_Status BtStatus::AVAILABLE;
const BtStatus_Status BtStatus::OPERATIONAL;
const BtStatus_Status BtStatus::ERROR;
const BtStatus_Status BtStatus::Status_MIN;
const BtStatus_Status BtStatus::Status_MAX;
const int BtStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BtStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

BtStatus::BtStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BtStatus)
}

void BtStatus::InitAsDefaultInstance() {
}

BtStatus::BtStatus(const BtStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BtStatus)
}

void BtStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtStatus::~BtStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BtStatus)
  SharedDtor();
}

void BtStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BtStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtStatus_descriptor_;
}

const BtStatus& BtStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bt_2eproto();
  return *default_instance_;
}

BtStatus* BtStatus::default_instance_ = NULL;

BtStatus* BtStatus::New() const {
  return new BtStatus;
}

void BtStatus::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BtStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.BtStatus.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BtStatus_Status_IsValid(value)) {
            set_status(static_cast< ::ecu::lapi::pb::BtStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BtStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BtStatus)
  return false;
#undef DO_
}

void BtStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BtStatus)
  // optional .ecu.lapi.pb.BtStatus.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BtStatus)
}

::google::protobuf::uint8* BtStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BtStatus)
  // optional .ecu.lapi.pb.BtStatus.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BtStatus)
  return target;
}

int BtStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.BtStatus.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtStatus::MergeFrom(const BtStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtStatus::CopyFrom(const BtStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtStatus::IsInitialized() const {

  return true;
}

void BtStatus::Swap(BtStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtStatus_descriptor_;
  metadata.reflection = BtStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BtDiscoveryResults_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtDiscoveryResults_Status_descriptor_;
}
bool BtDiscoveryResults_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BtDiscoveryResults_Status BtDiscoveryResults::UNDEFINED;
const BtDiscoveryResults_Status BtDiscoveryResults::SUCCESS;
const BtDiscoveryResults_Status BtDiscoveryResults::ERROR;
const BtDiscoveryResults_Status BtDiscoveryResults::BUSY;
const BtDiscoveryResults_Status BtDiscoveryResults::Status_MIN;
const BtDiscoveryResults_Status BtDiscoveryResults::Status_MAX;
const int BtDiscoveryResults::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BtDiscoveryResults::kStatusFieldNumber;
const int BtDiscoveryResults::kDevicesFieldNumber;
#endif  // !_MSC_VER

BtDiscoveryResults::BtDiscoveryResults()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BtDiscoveryResults)
}

void BtDiscoveryResults::InitAsDefaultInstance() {
}

BtDiscoveryResults::BtDiscoveryResults(const BtDiscoveryResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BtDiscoveryResults)
}

void BtDiscoveryResults::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtDiscoveryResults::~BtDiscoveryResults() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BtDiscoveryResults)
  SharedDtor();
}

void BtDiscoveryResults::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BtDiscoveryResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtDiscoveryResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtDiscoveryResults_descriptor_;
}

const BtDiscoveryResults& BtDiscoveryResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bt_2eproto();
  return *default_instance_;
}

BtDiscoveryResults* BtDiscoveryResults::default_instance_ = NULL;

BtDiscoveryResults* BtDiscoveryResults::New() const {
  return new BtDiscoveryResults;
}

void BtDiscoveryResults::Clear() {
  status_ = 0;
  devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtDiscoveryResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BtDiscoveryResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.BtDiscoveryResults.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BtDiscoveryResults_Status_IsValid(value)) {
            set_status(static_cast< ::ecu::lapi::pb::BtDiscoveryResults_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devices;
        break;
      }

      // repeated .ecu.lapi.pb.BtDevice devices = 2;
      case 2: {
        if (tag == 18) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_devices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BtDiscoveryResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BtDiscoveryResults)
  return false;
#undef DO_
}

void BtDiscoveryResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BtDiscoveryResults)
  // optional .ecu.lapi.pb.BtDiscoveryResults.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .ecu.lapi.pb.BtDevice devices = 2;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BtDiscoveryResults)
}

::google::protobuf::uint8* BtDiscoveryResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BtDiscoveryResults)
  // optional .ecu.lapi.pb.BtDiscoveryResults.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .ecu.lapi.pb.BtDevice devices = 2;
  for (int i = 0; i < this->devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BtDiscoveryResults)
  return target;
}

int BtDiscoveryResults::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.BtDiscoveryResults.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .ecu.lapi.pb.BtDevice devices = 2;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtDiscoveryResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtDiscoveryResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtDiscoveryResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtDiscoveryResults::MergeFrom(const BtDiscoveryResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  devices_.MergeFrom(from.devices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtDiscoveryResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtDiscoveryResults::CopyFrom(const BtDiscoveryResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtDiscoveryResults::IsInitialized() const {

  return true;
}

void BtDiscoveryResults::Swap(BtDiscoveryResults* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    devices_.Swap(&other->devices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtDiscoveryResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtDiscoveryResults_descriptor_;
  metadata.reflection = BtDiscoveryResults_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BtDiscoveryRequest_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtDiscoveryRequest_Action_descriptor_;
}
bool BtDiscoveryRequest_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BtDiscoveryRequest_Action BtDiscoveryRequest::UNDEFINED;
const BtDiscoveryRequest_Action BtDiscoveryRequest::START;
const BtDiscoveryRequest_Action BtDiscoveryRequest::STOP;
const BtDiscoveryRequest_Action BtDiscoveryRequest::QUERY;
const BtDiscoveryRequest_Action BtDiscoveryRequest::Action_MIN;
const BtDiscoveryRequest_Action BtDiscoveryRequest::Action_MAX;
const int BtDiscoveryRequest::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BtDiscoveryRequest::kRpcReqFieldNumber;
const int BtDiscoveryRequest::kActionFieldNumber;
#endif  // !_MSC_VER

BtDiscoveryRequest::BtDiscoveryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BtDiscoveryRequest)
}

void BtDiscoveryRequest::InitAsDefaultInstance() {
  rpc_req_ = const_cast< ::ecu::lapi::pb::RpcRequest*>(&::ecu::lapi::pb::RpcRequest::default_instance());
}

BtDiscoveryRequest::BtDiscoveryRequest(const BtDiscoveryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BtDiscoveryRequest)
}

void BtDiscoveryRequest::SharedCtor() {
  _cached_size_ = 0;
  rpc_req_ = NULL;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtDiscoveryRequest::~BtDiscoveryRequest() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BtDiscoveryRequest)
  SharedDtor();
}

void BtDiscoveryRequest::SharedDtor() {
  if (this != default_instance_) {
    delete rpc_req_;
  }
}

void BtDiscoveryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtDiscoveryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtDiscoveryRequest_descriptor_;
}

const BtDiscoveryRequest& BtDiscoveryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bt_2eproto();
  return *default_instance_;
}

BtDiscoveryRequest* BtDiscoveryRequest::default_instance_ = NULL;

BtDiscoveryRequest* BtDiscoveryRequest::New() const {
  return new BtDiscoveryRequest;
}

void BtDiscoveryRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_rpc_req()) {
      if (rpc_req_ != NULL) rpc_req_->::ecu::lapi::pb::RpcRequest::Clear();
    }
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtDiscoveryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BtDiscoveryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.RpcRequest rpc_req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpc_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional .ecu.lapi.pb.BtDiscoveryRequest.Action action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BtDiscoveryRequest_Action_IsValid(value)) {
            set_action(static_cast< ::ecu::lapi::pb::BtDiscoveryRequest_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BtDiscoveryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BtDiscoveryRequest)
  return false;
#undef DO_
}

void BtDiscoveryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BtDiscoveryRequest)
  // optional .ecu.lapi.pb.RpcRequest rpc_req = 1;
  if (has_rpc_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rpc_req(), output);
  }

  // optional .ecu.lapi.pb.BtDiscoveryRequest.Action action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BtDiscoveryRequest)
}

::google::protobuf::uint8* BtDiscoveryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BtDiscoveryRequest)
  // optional .ecu.lapi.pb.RpcRequest rpc_req = 1;
  if (has_rpc_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rpc_req(), target);
  }

  // optional .ecu.lapi.pb.BtDiscoveryRequest.Action action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BtDiscoveryRequest)
  return target;
}

int BtDiscoveryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.RpcRequest rpc_req = 1;
    if (has_rpc_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rpc_req());
    }

    // optional .ecu.lapi.pb.BtDiscoveryRequest.Action action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtDiscoveryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtDiscoveryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtDiscoveryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtDiscoveryRequest::MergeFrom(const BtDiscoveryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpc_req()) {
      mutable_rpc_req()->::ecu::lapi::pb::RpcRequest::MergeFrom(from.rpc_req());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtDiscoveryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtDiscoveryRequest::CopyFrom(const BtDiscoveryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtDiscoveryRequest::IsInitialized() const {

  return true;
}

void BtDiscoveryRequest::Swap(BtDiscoveryRequest* other) {
  if (other != this) {
    std::swap(rpc_req_, other->rpc_req_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtDiscoveryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtDiscoveryRequest_descriptor_;
  metadata.reflection = BtDiscoveryRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BtDiscoveryResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtDiscoveryResponse_Status_descriptor_;
}
bool BtDiscoveryResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BtDiscoveryResponse_Status BtDiscoveryResponse::UNDEFINED;
const BtDiscoveryResponse_Status BtDiscoveryResponse::STARTED;
const BtDiscoveryResponse_Status BtDiscoveryResponse::STOPPED;
const BtDiscoveryResponse_Status BtDiscoveryResponse::Status_MIN;
const BtDiscoveryResponse_Status BtDiscoveryResponse::Status_MAX;
const int BtDiscoveryResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BtDiscoveryResponse::kRpcResFieldNumber;
const int BtDiscoveryResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

BtDiscoveryResponse::BtDiscoveryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.BtDiscoveryResponse)
}

void BtDiscoveryResponse::InitAsDefaultInstance() {
  rpc_res_ = const_cast< ::ecu::lapi::pb::RpcResponse*>(&::ecu::lapi::pb::RpcResponse::default_instance());
}

BtDiscoveryResponse::BtDiscoveryResponse(const BtDiscoveryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.BtDiscoveryResponse)
}

void BtDiscoveryResponse::SharedCtor() {
  _cached_size_ = 0;
  rpc_res_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtDiscoveryResponse::~BtDiscoveryResponse() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.BtDiscoveryResponse)
  SharedDtor();
}

void BtDiscoveryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rpc_res_;
  }
}

void BtDiscoveryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtDiscoveryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtDiscoveryResponse_descriptor_;
}

const BtDiscoveryResponse& BtDiscoveryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bt_2eproto();
  return *default_instance_;
}

BtDiscoveryResponse* BtDiscoveryResponse::default_instance_ = NULL;

BtDiscoveryResponse* BtDiscoveryResponse::New() const {
  return new BtDiscoveryResponse;
}

void BtDiscoveryResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_rpc_res()) {
      if (rpc_res_ != NULL) rpc_res_->::ecu::lapi::pb::RpcResponse::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtDiscoveryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.BtDiscoveryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.RpcResponse rpc_res = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpc_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .ecu.lapi.pb.BtDiscoveryResponse.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::BtDiscoveryResponse_Status_IsValid(value)) {
            set_status(static_cast< ::ecu::lapi::pb::BtDiscoveryResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.BtDiscoveryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.BtDiscoveryResponse)
  return false;
#undef DO_
}

void BtDiscoveryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.BtDiscoveryResponse)
  // optional .ecu.lapi.pb.RpcResponse rpc_res = 1;
  if (has_rpc_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rpc_res(), output);
  }

  // optional .ecu.lapi.pb.BtDiscoveryResponse.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.BtDiscoveryResponse)
}

::google::protobuf::uint8* BtDiscoveryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.BtDiscoveryResponse)
  // optional .ecu.lapi.pb.RpcResponse rpc_res = 1;
  if (has_rpc_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rpc_res(), target);
  }

  // optional .ecu.lapi.pb.BtDiscoveryResponse.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.BtDiscoveryResponse)
  return target;
}

int BtDiscoveryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.RpcResponse rpc_res = 1;
    if (has_rpc_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rpc_res());
    }

    // optional .ecu.lapi.pb.BtDiscoveryResponse.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtDiscoveryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtDiscoveryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtDiscoveryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtDiscoveryResponse::MergeFrom(const BtDiscoveryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpc_res()) {
      mutable_rpc_res()->::ecu::lapi::pb::RpcResponse::MergeFrom(from.rpc_res());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtDiscoveryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtDiscoveryResponse::CopyFrom(const BtDiscoveryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtDiscoveryResponse::IsInitialized() const {

  return true;
}

void BtDiscoveryResponse::Swap(BtDiscoveryResponse* other) {
  if (other != this) {
    std::swap(rpc_res_, other->rpc_res_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtDiscoveryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtDiscoveryResponse_descriptor_;
  metadata.reflection = BtDiscoveryResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "acl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* AclInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AclInterface_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AclInterface_Protocol_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AclInterfaceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AclInterfaceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AclInterfaceRequest_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AclInterfaceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AclInterfaceResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AclInterfaceResponse_StatusCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AclIfMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AclIfMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_acl_2eproto() {
  protobuf_AddDesc_acl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "acl.proto");
  GOOGLE_CHECK(file != NULL);
  AclInterface_descriptor_ = file->message_type(0);
  static const int AclInterface_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterface, protocol_),
  };
  AclInterface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AclInterface_descriptor_,
      AclInterface::default_instance_,
      AclInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AclInterface));
  AclInterface_Protocol_descriptor_ = AclInterface_descriptor_->enum_type(0);
  AclInterfaceRequest_descriptor_ = file->message_type(1);
  static const int AclInterfaceRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, client_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, timeout_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, sub_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, pub_topics_),
  };
  AclInterfaceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AclInterfaceRequest_descriptor_,
      AclInterfaceRequest::default_instance_,
      AclInterfaceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AclInterfaceRequest));
  AclInterfaceRequest_Action_descriptor_ = AclInterfaceRequest_descriptor_->enum_type(0);
  AclInterfaceResponse_descriptor_ = file->message_type(2);
  static const int AclInterfaceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceResponse, status_),
  };
  AclInterfaceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AclInterfaceResponse_descriptor_,
      AclInterfaceResponse::default_instance_,
      AclInterfaceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclInterfaceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AclInterfaceResponse));
  AclInterfaceResponse_StatusCode_descriptor_ = AclInterfaceResponse_descriptor_->enum_type(0);
  AclIfMessage_descriptor_ = file->message_type(3);
  static const int AclIfMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclIfMessage, interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclIfMessage, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclIfMessage, response_),
  };
  AclIfMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AclIfMessage_descriptor_,
      AclIfMessage::default_instance_,
      AclIfMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclIfMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AclIfMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AclIfMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_acl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AclInterface_descriptor_, &AclInterface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AclInterfaceRequest_descriptor_, &AclInterfaceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AclInterfaceResponse_descriptor_, &AclInterfaceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AclIfMessage_descriptor_, &AclIfMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_acl_2eproto() {
  delete AclInterface::default_instance_;
  delete AclInterface_reflection_;
  delete AclInterfaceRequest::default_instance_;
  delete AclInterfaceRequest_reflection_;
  delete AclInterfaceResponse::default_instance_;
  delete AclInterfaceResponse_reflection_;
  delete AclIfMessage::default_instance_;
  delete AclIfMessage_reflection_;
}

void protobuf_AddDesc_acl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tacl.proto\022\013ecu.lapi.pb\"\210\001\n\014AclInterfac"
    "e\0224\n\010protocol\030\001 \001(\0162\".ecu.lapi.pb.AclInt"
    "erface.Protocol\"B\n\010Protocol\022\r\n\tP_UNKNOWN"
    "\020\000\022\n\n\006P_MQTT\020\001\022\017\n\013P_WEBSOCKET\020\002\022\n\n\006P_RES"
    "T\020\003\"\241\002\n\023AclInterfaceRequest\022\023\n\013client_na"
    "me\030\001 \001(\t\022\032\n\ntimeout_ms\030\002 \001(\r:\006500000\0227\n\006"
    "action\030\003 \001(\0162\'.ecu.lapi.pb.AclInterfaceR"
    "equest.Action\022\014\n\004user\030\004 \001(\t\022\020\n\010password\030"
    "\005 \001(\t\022\014\n\004port\030\006 \001(\r\022\022\n\nsub_topics\030\007 \003(\t\022"
    "\022\n\npub_topics\030\010 \003(\t\"J\n\006Action\022\014\n\010ACT_NON"
    "E\020\000\022\020\n\014ACT_NEW_USER\020\001\022\017\n\013ACT_RM_USER\020\002\022\017"
    "\n\013ACT_NEW_ACL\020\003\"\271\001\n\024AclInterfaceResponse"
    "\022<\n\006status\030\001 \001(\0162,.ecu.lapi.pb.AclInterf"
    "aceResponse.StatusCode\"c\n\nStatusCode\022\024\n\020"
    "SC_UNKNOWN_ERROR\020\000\022\t\n\005SC_OK\020\001\022\016\n\nSC_TIME"
    "OUT\020\002\022\017\n\013SC_REJECTED\020\007\022\023\n\017SC_PB_SER_ERRO"
    "R\020\024\"\244\001\n\014AclIfMessage\022,\n\tinterface\030\001 \001(\0132"
    "\031.ecu.lapi.pb.AclInterface\0221\n\007request\030\003 "
    "\001(\0132 .ecu.lapi.pb.AclInterfaceRequest\0223\n"
    "\010response\030\004 \001(\0132!.ecu.lapi.pb.AclInterfa"
    "ceResponse", 810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "acl.proto", &protobuf_RegisterTypes);
  AclInterface::default_instance_ = new AclInterface();
  AclInterfaceRequest::default_instance_ = new AclInterfaceRequest();
  AclInterfaceResponse::default_instance_ = new AclInterfaceResponse();
  AclIfMessage::default_instance_ = new AclIfMessage();
  AclInterface::default_instance_->InitAsDefaultInstance();
  AclInterfaceRequest::default_instance_->InitAsDefaultInstance();
  AclInterfaceResponse::default_instance_->InitAsDefaultInstance();
  AclIfMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_acl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_acl_2eproto {
  StaticDescriptorInitializer_acl_2eproto() {
    protobuf_AddDesc_acl_2eproto();
  }
} static_descriptor_initializer_acl_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AclInterface_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AclInterface_Protocol_descriptor_;
}
bool AclInterface_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AclInterface_Protocol AclInterface::P_UNKNOWN;
const AclInterface_Protocol AclInterface::P_MQTT;
const AclInterface_Protocol AclInterface::P_WEBSOCKET;
const AclInterface_Protocol AclInterface::P_REST;
const AclInterface_Protocol AclInterface::Protocol_MIN;
const AclInterface_Protocol AclInterface::Protocol_MAX;
const int AclInterface::Protocol_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AclInterface::kProtocolFieldNumber;
#endif  // !_MSC_VER

AclInterface::AclInterface()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.AclInterface)
}

void AclInterface::InitAsDefaultInstance() {
}

AclInterface::AclInterface(const AclInterface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.AclInterface)
}

void AclInterface::SharedCtor() {
  _cached_size_ = 0;
  protocol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AclInterface::~AclInterface() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.AclInterface)
  SharedDtor();
}

void AclInterface::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AclInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AclInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AclInterface_descriptor_;
}

const AclInterface& AclInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acl_2eproto();
  return *default_instance_;
}

AclInterface* AclInterface::default_instance_ = NULL;

AclInterface* AclInterface::New() const {
  return new AclInterface;
}

void AclInterface::Clear() {
  protocol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AclInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.AclInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.AclInterface.Protocol protocol = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::AclInterface_Protocol_IsValid(value)) {
            set_protocol(static_cast< ::ecu::lapi::pb::AclInterface_Protocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.AclInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.AclInterface)
  return false;
#undef DO_
}

void AclInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.AclInterface)
  // optional .ecu.lapi.pb.AclInterface.Protocol protocol = 1;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.AclInterface)
}

::google::protobuf::uint8* AclInterface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.AclInterface)
  // optional .ecu.lapi.pb.AclInterface.Protocol protocol = 1;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protocol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.AclInterface)
  return target;
}

int AclInterface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.AclInterface.Protocol protocol = 1;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AclInterface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AclInterface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AclInterface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AclInterface::MergeFrom(const AclInterface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AclInterface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AclInterface::CopyFrom(const AclInterface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AclInterface::IsInitialized() const {

  return true;
}

void AclInterface::Swap(AclInterface* other) {
  if (other != this) {
    std::swap(protocol_, other->protocol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AclInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AclInterface_descriptor_;
  metadata.reflection = AclInterface_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AclInterfaceRequest_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AclInterfaceRequest_Action_descriptor_;
}
bool AclInterfaceRequest_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AclInterfaceRequest_Action AclInterfaceRequest::ACT_NONE;
const AclInterfaceRequest_Action AclInterfaceRequest::ACT_NEW_USER;
const AclInterfaceRequest_Action AclInterfaceRequest::ACT_RM_USER;
const AclInterfaceRequest_Action AclInterfaceRequest::ACT_NEW_ACL;
const AclInterfaceRequest_Action AclInterfaceRequest::Action_MIN;
const AclInterfaceRequest_Action AclInterfaceRequest::Action_MAX;
const int AclInterfaceRequest::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AclInterfaceRequest::kClientNameFieldNumber;
const int AclInterfaceRequest::kTimeoutMsFieldNumber;
const int AclInterfaceRequest::kActionFieldNumber;
const int AclInterfaceRequest::kUserFieldNumber;
const int AclInterfaceRequest::kPasswordFieldNumber;
const int AclInterfaceRequest::kPortFieldNumber;
const int AclInterfaceRequest::kSubTopicsFieldNumber;
const int AclInterfaceRequest::kPubTopicsFieldNumber;
#endif  // !_MSC_VER

AclInterfaceRequest::AclInterfaceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.AclInterfaceRequest)
}

void AclInterfaceRequest::InitAsDefaultInstance() {
}

AclInterfaceRequest::AclInterfaceRequest(const AclInterfaceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.AclInterfaceRequest)
}

void AclInterfaceRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ms_ = 500000u;
  action_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AclInterfaceRequest::~AclInterfaceRequest() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.AclInterfaceRequest)
  SharedDtor();
}

void AclInterfaceRequest::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void AclInterfaceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AclInterfaceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AclInterfaceRequest_descriptor_;
}

const AclInterfaceRequest& AclInterfaceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acl_2eproto();
  return *default_instance_;
}

AclInterfaceRequest* AclInterfaceRequest::default_instance_ = NULL;

AclInterfaceRequest* AclInterfaceRequest::New() const {
  return new AclInterfaceRequest;
}

void AclInterfaceRequest::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_client_name()) {
      if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_name_->clear();
      }
    }
    timeout_ms_ = 500000u;
    action_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    port_ = 0u;
  }
  sub_topics_.Clear();
  pub_topics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AclInterfaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.AclInterfaceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout_ms;
        break;
      }

      // optional uint32 timeout_ms = 2 [default = 500000];
      case 2: {
        if (tag == 16) {
         parse_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_ms_)));
          set_has_timeout_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .ecu.lapi.pb.AclInterfaceRequest.Action action = 3;
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::AclInterfaceRequest_Action_IsValid(value)) {
            set_action(static_cast< ::ecu::lapi::pb::AclInterfaceRequest_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional string user = 4;
      case 4: {
        if (tag == 34) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }

      // optional string password = 5;
      case 5: {
        if (tag == 42) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional uint32 port = 6;
      case 6: {
        if (tag == 48) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sub_topics;
        break;
      }

      // repeated string sub_topics = 7;
      case 7: {
        if (tag == 58) {
         parse_sub_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sub_topics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub_topics(this->sub_topics_size() - 1).data(),
            this->sub_topics(this->sub_topics_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sub_topics");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sub_topics;
        if (input->ExpectTag(66)) goto parse_pub_topics;
        break;
      }

      // repeated string pub_topics = 8;
      case 8: {
        if (tag == 66) {
         parse_pub_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pub_topics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pub_topics(this->pub_topics_size() - 1).data(),
            this->pub_topics(this->pub_topics_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pub_topics");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pub_topics;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.AclInterfaceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.AclInterfaceRequest)
  return false;
#undef DO_
}

void AclInterfaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.AclInterfaceRequest)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_name(), output);
  }

  // optional uint32 timeout_ms = 2 [default = 500000];
  if (has_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout_ms(), output);
  }

  // optional .ecu.lapi.pb.AclInterfaceRequest.Action action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user(), output);
  }

  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // optional uint32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port(), output);
  }

  // repeated string sub_topics = 7;
  for (int i = 0; i < this->sub_topics_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->sub_topics(i).data(), this->sub_topics(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "sub_topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sub_topics(i), output);
  }

  // repeated string pub_topics = 8;
  for (int i = 0; i < this->pub_topics_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->pub_topics(i).data(), this->pub_topics(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "pub_topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pub_topics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.AclInterfaceRequest)
}

::google::protobuf::uint8* AclInterfaceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.AclInterfaceRequest)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_name(), target);
  }

  // optional uint32 timeout_ms = 2 [default = 500000];
  if (has_timeout_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout_ms(), target);
  }

  // optional .ecu.lapi.pb.AclInterfaceRequest.Action action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // optional uint32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->port(), target);
  }

  // repeated string sub_topics = 7;
  for (int i = 0; i < this->sub_topics_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_topics(i).data(), this->sub_topics(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub_topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->sub_topics(i), target);
  }

  // repeated string pub_topics = 8;
  for (int i = 0; i < this->pub_topics_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pub_topics(i).data(), this->pub_topics(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pub_topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->pub_topics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.AclInterfaceRequest)
  return target;
}

int AclInterfaceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_name = 1;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional uint32 timeout_ms = 2 [default = 500000];
    if (has_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout_ms());
    }

    // optional .ecu.lapi.pb.AclInterfaceRequest.Action action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  // repeated string sub_topics = 7;
  total_size += 1 * this->sub_topics_size();
  for (int i = 0; i < this->sub_topics_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sub_topics(i));
  }

  // repeated string pub_topics = 8;
  total_size += 1 * this->pub_topics_size();
  for (int i = 0; i < this->pub_topics_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pub_topics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AclInterfaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AclInterfaceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AclInterfaceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AclInterfaceRequest::MergeFrom(const AclInterfaceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_topics_.MergeFrom(from.sub_topics_);
  pub_topics_.MergeFrom(from.pub_topics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
    if (from.has_timeout_ms()) {
      set_timeout_ms(from.timeout_ms());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AclInterfaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AclInterfaceRequest::CopyFrom(const AclInterfaceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AclInterfaceRequest::IsInitialized() const {

  return true;
}

void AclInterfaceRequest::Swap(AclInterfaceRequest* other) {
  if (other != this) {
    std::swap(client_name_, other->client_name_);
    std::swap(timeout_ms_, other->timeout_ms_);
    std::swap(action_, other->action_);
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(port_, other->port_);
    sub_topics_.Swap(&other->sub_topics_);
    pub_topics_.Swap(&other->pub_topics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AclInterfaceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AclInterfaceRequest_descriptor_;
  metadata.reflection = AclInterfaceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AclInterfaceResponse_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AclInterfaceResponse_StatusCode_descriptor_;
}
bool AclInterfaceResponse_StatusCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 7:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AclInterfaceResponse_StatusCode AclInterfaceResponse::SC_UNKNOWN_ERROR;
const AclInterfaceResponse_StatusCode AclInterfaceResponse::SC_OK;
const AclInterfaceResponse_StatusCode AclInterfaceResponse::SC_TIMEOUT;
const AclInterfaceResponse_StatusCode AclInterfaceResponse::SC_REJECTED;
const AclInterfaceResponse_StatusCode AclInterfaceResponse::SC_PB_SER_ERROR;
const AclInterfaceResponse_StatusCode AclInterfaceResponse::StatusCode_MIN;
const AclInterfaceResponse_StatusCode AclInterfaceResponse::StatusCode_MAX;
const int AclInterfaceResponse::StatusCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AclInterfaceResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

AclInterfaceResponse::AclInterfaceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.AclInterfaceResponse)
}

void AclInterfaceResponse::InitAsDefaultInstance() {
}

AclInterfaceResponse::AclInterfaceResponse(const AclInterfaceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.AclInterfaceResponse)
}

void AclInterfaceResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AclInterfaceResponse::~AclInterfaceResponse() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.AclInterfaceResponse)
  SharedDtor();
}

void AclInterfaceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AclInterfaceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AclInterfaceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AclInterfaceResponse_descriptor_;
}

const AclInterfaceResponse& AclInterfaceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acl_2eproto();
  return *default_instance_;
}

AclInterfaceResponse* AclInterfaceResponse::default_instance_ = NULL;

AclInterfaceResponse* AclInterfaceResponse::New() const {
  return new AclInterfaceResponse;
}

void AclInterfaceResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AclInterfaceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.AclInterfaceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.AclInterfaceResponse.StatusCode status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::AclInterfaceResponse_StatusCode_IsValid(value)) {
            set_status(static_cast< ::ecu::lapi::pb::AclInterfaceResponse_StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.AclInterfaceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.AclInterfaceResponse)
  return false;
#undef DO_
}

void AclInterfaceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.AclInterfaceResponse)
  // optional .ecu.lapi.pb.AclInterfaceResponse.StatusCode status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.AclInterfaceResponse)
}

::google::protobuf::uint8* AclInterfaceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.AclInterfaceResponse)
  // optional .ecu.lapi.pb.AclInterfaceResponse.StatusCode status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.AclInterfaceResponse)
  return target;
}

int AclInterfaceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.AclInterfaceResponse.StatusCode status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AclInterfaceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AclInterfaceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AclInterfaceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AclInterfaceResponse::MergeFrom(const AclInterfaceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AclInterfaceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AclInterfaceResponse::CopyFrom(const AclInterfaceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AclInterfaceResponse::IsInitialized() const {

  return true;
}

void AclInterfaceResponse::Swap(AclInterfaceResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AclInterfaceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AclInterfaceResponse_descriptor_;
  metadata.reflection = AclInterfaceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AclIfMessage::kInterfaceFieldNumber;
const int AclIfMessage::kRequestFieldNumber;
const int AclIfMessage::kResponseFieldNumber;
#endif  // !_MSC_VER

AclIfMessage::AclIfMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.AclIfMessage)
}

void AclIfMessage::InitAsDefaultInstance() {
  interface_ = const_cast< ::ecu::lapi::pb::AclInterface*>(&::ecu::lapi::pb::AclInterface::default_instance());
  request_ = const_cast< ::ecu::lapi::pb::AclInterfaceRequest*>(&::ecu::lapi::pb::AclInterfaceRequest::default_instance());
  response_ = const_cast< ::ecu::lapi::pb::AclInterfaceResponse*>(&::ecu::lapi::pb::AclInterfaceResponse::default_instance());
}

AclIfMessage::AclIfMessage(const AclIfMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.AclIfMessage)
}

void AclIfMessage::SharedCtor() {
  _cached_size_ = 0;
  interface_ = NULL;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AclIfMessage::~AclIfMessage() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.AclIfMessage)
  SharedDtor();
}

void AclIfMessage::SharedDtor() {
  if (this != default_instance_) {
    delete interface_;
    delete request_;
    delete response_;
  }
}

void AclIfMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AclIfMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AclIfMessage_descriptor_;
}

const AclIfMessage& AclIfMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acl_2eproto();
  return *default_instance_;
}

AclIfMessage* AclIfMessage::default_instance_ = NULL;

AclIfMessage* AclIfMessage::New() const {
  return new AclIfMessage;
}

void AclIfMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_interface()) {
      if (interface_ != NULL) interface_->::ecu::lapi::pb::AclInterface::Clear();
    }
    if (has_request()) {
      if (request_ != NULL) request_->::ecu::lapi::pb::AclInterfaceRequest::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::ecu::lapi::pb::AclInterfaceResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AclIfMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.AclIfMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.AclInterface interface = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // optional .ecu.lapi.pb.AclInterfaceRequest request = 3;
      case 3: {
        if (tag == 26) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_response;
        break;
      }

      // optional .ecu.lapi.pb.AclInterfaceResponse response = 4;
      case 4: {
        if (tag == 34) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.AclIfMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.AclIfMessage)
  return false;
#undef DO_
}

void AclIfMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.AclIfMessage)
  // optional .ecu.lapi.pb.AclInterface interface = 1;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->interface(), output);
  }

  // optional .ecu.lapi.pb.AclInterfaceRequest request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->request(), output);
  }

  // optional .ecu.lapi.pb.AclInterfaceResponse response = 4;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.AclIfMessage)
}

::google::protobuf::uint8* AclIfMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.AclIfMessage)
  // optional .ecu.lapi.pb.AclInterface interface = 1;
  if (has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->interface(), target);
  }

  // optional .ecu.lapi.pb.AclInterfaceRequest request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->request(), target);
  }

  // optional .ecu.lapi.pb.AclInterfaceResponse response = 4;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.AclIfMessage)
  return target;
}

int AclIfMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.AclInterface interface = 1;
    if (has_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interface());
    }

    // optional .ecu.lapi.pb.AclInterfaceRequest request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .ecu.lapi.pb.AclInterfaceResponse response = 4;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AclIfMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AclIfMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AclIfMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AclIfMessage::MergeFrom(const AclIfMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interface()) {
      mutable_interface()->::ecu::lapi::pb::AclInterface::MergeFrom(from.interface());
    }
    if (from.has_request()) {
      mutable_request()->::ecu::lapi::pb::AclInterfaceRequest::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::ecu::lapi::pb::AclInterfaceResponse::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AclIfMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AclIfMessage::CopyFrom(const AclIfMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AclIfMessage::IsInitialized() const {

  return true;
}

void AclIfMessage::Swap(AclIfMessage* other) {
  if (other != this) {
    std::swap(interface_, other->interface_);
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AclIfMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AclIfMessage_descriptor_;
  metadata.reflection = AclIfMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

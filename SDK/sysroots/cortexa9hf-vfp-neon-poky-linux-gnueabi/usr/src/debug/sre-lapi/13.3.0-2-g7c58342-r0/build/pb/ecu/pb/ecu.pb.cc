// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ecu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* EcuState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EcuState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EcuState_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EcuShutdownStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EcuShutdownStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EcuShutdownStatus_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EcuShutdownStatus_Cause_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EcuShutdownPostpone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EcuShutdownPostpone_reflection_ = NULL;
const ::google::protobuf::Descriptor* EcuShutdownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EcuShutdownRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ecu_2eproto() {
  protobuf_AddDesc_ecu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ecu.proto");
  GOOGLE_CHECK(file != NULL);
  EcuState_descriptor_ = file->message_type(0);
  static const int EcuState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuState, state_),
  };
  EcuState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EcuState_descriptor_,
      EcuState::default_instance_,
      EcuState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EcuState));
  EcuState_State_descriptor_ = EcuState_descriptor_->enum_type(0);
  EcuShutdownStatus_descriptor_ = file->message_type(1);
  static const int EcuShutdownStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownStatus, cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownStatus, time_triggered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownStatus, time_imminent_),
  };
  EcuShutdownStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EcuShutdownStatus_descriptor_,
      EcuShutdownStatus::default_instance_,
      EcuShutdownStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EcuShutdownStatus));
  EcuShutdownStatus_State_descriptor_ = EcuShutdownStatus_descriptor_->enum_type(0);
  EcuShutdownStatus_Cause_descriptor_ = EcuShutdownStatus_descriptor_->enum_type(1);
  EcuShutdownPostpone_descriptor_ = file->message_type(2);
  static const int EcuShutdownPostpone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownPostpone, client_name_),
  };
  EcuShutdownPostpone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EcuShutdownPostpone_descriptor_,
      EcuShutdownPostpone::default_instance_,
      EcuShutdownPostpone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownPostpone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownPostpone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EcuShutdownPostpone));
  EcuShutdownRequest_descriptor_ = file->message_type(3);
  static const int EcuShutdownRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownRequest, client_name_),
  };
  EcuShutdownRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EcuShutdownRequest_descriptor_,
      EcuShutdownRequest::default_instance_,
      EcuShutdownRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcuShutdownRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EcuShutdownRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ecu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EcuState_descriptor_, &EcuState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EcuShutdownStatus_descriptor_, &EcuShutdownStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EcuShutdownPostpone_descriptor_, &EcuShutdownPostpone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EcuShutdownRequest_descriptor_, &EcuShutdownRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ecu_2eproto() {
  delete EcuState::default_instance_;
  delete EcuState_reflection_;
  delete EcuShutdownStatus::default_instance_;
  delete EcuShutdownStatus_reflection_;
  delete EcuShutdownPostpone::default_instance_;
  delete EcuShutdownPostpone_reflection_;
  delete EcuShutdownRequest::default_instance_;
  delete EcuShutdownRequest_reflection_;
}

void protobuf_AddDesc_ecu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tecu.proto\022\013ecu.lapi.pb\"\331\001\n\010EcuState\022*\n"
    "\005state\030\001 \001(\0162\033.ecu.lapi.pb.EcuState.Stat"
    "e\"\240\001\n\005State\022\013\n\007UNKNOWN\020\000\022\013\n\007STARTUP\020\001\022\r\n"
    "\tOPERATING\020\002\022\014\n\010SHUTDOWN\020\003\022\030\n\024STARTUP_TO"
    "_OPERATING\020\004\022\031\n\025OPERATING_TO_SHUTDOWN\020\005\022"
    "\031\n\025SHUTDOWN_TO_OPERATING\020\006\022\020\n\014NACHLAUFZE"
    "IT\020\007\"\342\002\n\021EcuShutdownStatus\0223\n\005state\030\001 \001("
    "\0162$.ecu.lapi.pb.EcuShutdownStatus.State\022"
    "3\n\005cause\030\002 \001(\0162$.ecu.lapi.pb.EcuShutdown"
    "Status.Cause\022\026\n\016time_triggered\030\003 \001(\004\022\025\n\r"
    "time_imminent\030\005 \001(\004\"h\n\005State\022\013\n\007UNKNOWN\020"
    "\000\022\r\n\tOPERATING\020\001\022\024\n\020SHUTDOWN_PENDING\020\002\022\026"
    "\n\022SHUTDOWN_POSTPONED\020\003\022\025\n\021SHUTDOWN_IMMIN"
    "ENT\020\004\"J\n\005Cause\022\017\n\013UNSPECIFIED\020\000\022\020\n\014NACHL"
    "AUFZEIT\020\001\022\r\n\tSW_UPDATE\020\002\022\017\n\013APP_REQUEST\020"
    "\003\"*\n\023EcuShutdownPostpone\022\023\n\013client_name\030"
    "\001 \001(\t\")\n\022EcuShutdownRequest\022\023\n\013client_na"
    "me\030\001 \001(\t", 688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ecu.proto", &protobuf_RegisterTypes);
  EcuState::default_instance_ = new EcuState();
  EcuShutdownStatus::default_instance_ = new EcuShutdownStatus();
  EcuShutdownPostpone::default_instance_ = new EcuShutdownPostpone();
  EcuShutdownRequest::default_instance_ = new EcuShutdownRequest();
  EcuState::default_instance_->InitAsDefaultInstance();
  EcuShutdownStatus::default_instance_->InitAsDefaultInstance();
  EcuShutdownPostpone::default_instance_->InitAsDefaultInstance();
  EcuShutdownRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ecu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ecu_2eproto {
  StaticDescriptorInitializer_ecu_2eproto() {
    protobuf_AddDesc_ecu_2eproto();
  }
} static_descriptor_initializer_ecu_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* EcuState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EcuState_State_descriptor_;
}
bool EcuState_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EcuState_State EcuState::UNKNOWN;
const EcuState_State EcuState::STARTUP;
const EcuState_State EcuState::OPERATING;
const EcuState_State EcuState::SHUTDOWN;
const EcuState_State EcuState::STARTUP_TO_OPERATING;
const EcuState_State EcuState::OPERATING_TO_SHUTDOWN;
const EcuState_State EcuState::SHUTDOWN_TO_OPERATING;
const EcuState_State EcuState::NACHLAUFZEIT;
const EcuState_State EcuState::State_MIN;
const EcuState_State EcuState::State_MAX;
const int EcuState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EcuState::kStateFieldNumber;
#endif  // !_MSC_VER

EcuState::EcuState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.EcuState)
}

void EcuState::InitAsDefaultInstance() {
}

EcuState::EcuState(const EcuState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.EcuState)
}

void EcuState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EcuState::~EcuState() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.EcuState)
  SharedDtor();
}

void EcuState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EcuState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EcuState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EcuState_descriptor_;
}

const EcuState& EcuState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ecu_2eproto();
  return *default_instance_;
}

EcuState* EcuState::default_instance_ = NULL;

EcuState* EcuState::New() const {
  return new EcuState;
}

void EcuState::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EcuState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.EcuState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.EcuState.State state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::EcuState_State_IsValid(value)) {
            set_state(static_cast< ::ecu::lapi::pb::EcuState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.EcuState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.EcuState)
  return false;
#undef DO_
}

void EcuState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.EcuState)
  // optional .ecu.lapi.pb.EcuState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.EcuState)
}

::google::protobuf::uint8* EcuState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.EcuState)
  // optional .ecu.lapi.pb.EcuState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.EcuState)
  return target;
}

int EcuState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.EcuState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EcuState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EcuState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EcuState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EcuState::MergeFrom(const EcuState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EcuState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EcuState::CopyFrom(const EcuState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuState::IsInitialized() const {

  return true;
}

void EcuState::Swap(EcuState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EcuState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EcuState_descriptor_;
  metadata.reflection = EcuState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EcuShutdownStatus_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EcuShutdownStatus_State_descriptor_;
}
bool EcuShutdownStatus_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EcuShutdownStatus_State EcuShutdownStatus::UNKNOWN;
const EcuShutdownStatus_State EcuShutdownStatus::OPERATING;
const EcuShutdownStatus_State EcuShutdownStatus::SHUTDOWN_PENDING;
const EcuShutdownStatus_State EcuShutdownStatus::SHUTDOWN_POSTPONED;
const EcuShutdownStatus_State EcuShutdownStatus::SHUTDOWN_IMMINENT;
const EcuShutdownStatus_State EcuShutdownStatus::State_MIN;
const EcuShutdownStatus_State EcuShutdownStatus::State_MAX;
const int EcuShutdownStatus::State_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* EcuShutdownStatus_Cause_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EcuShutdownStatus_Cause_descriptor_;
}
bool EcuShutdownStatus_Cause_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EcuShutdownStatus_Cause EcuShutdownStatus::UNSPECIFIED;
const EcuShutdownStatus_Cause EcuShutdownStatus::NACHLAUFZEIT;
const EcuShutdownStatus_Cause EcuShutdownStatus::SW_UPDATE;
const EcuShutdownStatus_Cause EcuShutdownStatus::APP_REQUEST;
const EcuShutdownStatus_Cause EcuShutdownStatus::Cause_MIN;
const EcuShutdownStatus_Cause EcuShutdownStatus::Cause_MAX;
const int EcuShutdownStatus::Cause_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EcuShutdownStatus::kStateFieldNumber;
const int EcuShutdownStatus::kCauseFieldNumber;
const int EcuShutdownStatus::kTimeTriggeredFieldNumber;
const int EcuShutdownStatus::kTimeImminentFieldNumber;
#endif  // !_MSC_VER

EcuShutdownStatus::EcuShutdownStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.EcuShutdownStatus)
}

void EcuShutdownStatus::InitAsDefaultInstance() {
}

EcuShutdownStatus::EcuShutdownStatus(const EcuShutdownStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.EcuShutdownStatus)
}

void EcuShutdownStatus::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  cause_ = 0;
  time_triggered_ = GOOGLE_ULONGLONG(0);
  time_imminent_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EcuShutdownStatus::~EcuShutdownStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.EcuShutdownStatus)
  SharedDtor();
}

void EcuShutdownStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EcuShutdownStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EcuShutdownStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EcuShutdownStatus_descriptor_;
}

const EcuShutdownStatus& EcuShutdownStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ecu_2eproto();
  return *default_instance_;
}

EcuShutdownStatus* EcuShutdownStatus::default_instance_ = NULL;

EcuShutdownStatus* EcuShutdownStatus::New() const {
  return new EcuShutdownStatus;
}

void EcuShutdownStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EcuShutdownStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, time_imminent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EcuShutdownStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.EcuShutdownStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.EcuShutdownStatus.State state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::EcuShutdownStatus_State_IsValid(value)) {
            set_state(static_cast< ::ecu::lapi::pb::EcuShutdownStatus_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cause;
        break;
      }

      // optional .ecu.lapi.pb.EcuShutdownStatus.Cause cause = 2;
      case 2: {
        if (tag == 16) {
         parse_cause:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::EcuShutdownStatus_Cause_IsValid(value)) {
            set_cause(static_cast< ::ecu::lapi::pb::EcuShutdownStatus_Cause >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_triggered;
        break;
      }

      // optional uint64 time_triggered = 3;
      case 3: {
        if (tag == 24) {
         parse_time_triggered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_triggered_)));
          set_has_time_triggered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time_imminent;
        break;
      }

      // optional uint64 time_imminent = 5;
      case 5: {
        if (tag == 40) {
         parse_time_imminent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_imminent_)));
          set_has_time_imminent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.EcuShutdownStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.EcuShutdownStatus)
  return false;
#undef DO_
}

void EcuShutdownStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.EcuShutdownStatus)
  // optional .ecu.lapi.pb.EcuShutdownStatus.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .ecu.lapi.pb.EcuShutdownStatus.Cause cause = 2;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cause(), output);
  }

  // optional uint64 time_triggered = 3;
  if (has_time_triggered()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_triggered(), output);
  }

  // optional uint64 time_imminent = 5;
  if (has_time_imminent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_imminent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.EcuShutdownStatus)
}

::google::protobuf::uint8* EcuShutdownStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.EcuShutdownStatus)
  // optional .ecu.lapi.pb.EcuShutdownStatus.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional .ecu.lapi.pb.EcuShutdownStatus.Cause cause = 2;
  if (has_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cause(), target);
  }

  // optional uint64 time_triggered = 3;
  if (has_time_triggered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_triggered(), target);
  }

  // optional uint64 time_imminent = 5;
  if (has_time_imminent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_imminent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.EcuShutdownStatus)
  return target;
}

int EcuShutdownStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.EcuShutdownStatus.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .ecu.lapi.pb.EcuShutdownStatus.Cause cause = 2;
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cause());
    }

    // optional uint64 time_triggered = 3;
    if (has_time_triggered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_triggered());
    }

    // optional uint64 time_imminent = 5;
    if (has_time_imminent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_imminent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EcuShutdownStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EcuShutdownStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EcuShutdownStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EcuShutdownStatus::MergeFrom(const EcuShutdownStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cause()) {
      set_cause(from.cause());
    }
    if (from.has_time_triggered()) {
      set_time_triggered(from.time_triggered());
    }
    if (from.has_time_imminent()) {
      set_time_imminent(from.time_imminent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EcuShutdownStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EcuShutdownStatus::CopyFrom(const EcuShutdownStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuShutdownStatus::IsInitialized() const {

  return true;
}

void EcuShutdownStatus::Swap(EcuShutdownStatus* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(cause_, other->cause_);
    std::swap(time_triggered_, other->time_triggered_);
    std::swap(time_imminent_, other->time_imminent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EcuShutdownStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EcuShutdownStatus_descriptor_;
  metadata.reflection = EcuShutdownStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EcuShutdownPostpone::kClientNameFieldNumber;
#endif  // !_MSC_VER

EcuShutdownPostpone::EcuShutdownPostpone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.EcuShutdownPostpone)
}

void EcuShutdownPostpone::InitAsDefaultInstance() {
}

EcuShutdownPostpone::EcuShutdownPostpone(const EcuShutdownPostpone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.EcuShutdownPostpone)
}

void EcuShutdownPostpone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EcuShutdownPostpone::~EcuShutdownPostpone() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.EcuShutdownPostpone)
  SharedDtor();
}

void EcuShutdownPostpone::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (this != default_instance_) {
  }
}

void EcuShutdownPostpone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EcuShutdownPostpone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EcuShutdownPostpone_descriptor_;
}

const EcuShutdownPostpone& EcuShutdownPostpone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ecu_2eproto();
  return *default_instance_;
}

EcuShutdownPostpone* EcuShutdownPostpone::default_instance_ = NULL;

EcuShutdownPostpone* EcuShutdownPostpone::New() const {
  return new EcuShutdownPostpone;
}

void EcuShutdownPostpone::Clear() {
  if (has_client_name()) {
    if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      client_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EcuShutdownPostpone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.EcuShutdownPostpone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.EcuShutdownPostpone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.EcuShutdownPostpone)
  return false;
#undef DO_
}

void EcuShutdownPostpone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.EcuShutdownPostpone)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.EcuShutdownPostpone)
}

::google::protobuf::uint8* EcuShutdownPostpone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.EcuShutdownPostpone)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.EcuShutdownPostpone)
  return target;
}

int EcuShutdownPostpone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_name = 1;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EcuShutdownPostpone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EcuShutdownPostpone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EcuShutdownPostpone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EcuShutdownPostpone::MergeFrom(const EcuShutdownPostpone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EcuShutdownPostpone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EcuShutdownPostpone::CopyFrom(const EcuShutdownPostpone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuShutdownPostpone::IsInitialized() const {

  return true;
}

void EcuShutdownPostpone::Swap(EcuShutdownPostpone* other) {
  if (other != this) {
    std::swap(client_name_, other->client_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EcuShutdownPostpone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EcuShutdownPostpone_descriptor_;
  metadata.reflection = EcuShutdownPostpone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EcuShutdownRequest::kClientNameFieldNumber;
#endif  // !_MSC_VER

EcuShutdownRequest::EcuShutdownRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.EcuShutdownRequest)
}

void EcuShutdownRequest::InitAsDefaultInstance() {
}

EcuShutdownRequest::EcuShutdownRequest(const EcuShutdownRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.EcuShutdownRequest)
}

void EcuShutdownRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EcuShutdownRequest::~EcuShutdownRequest() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.EcuShutdownRequest)
  SharedDtor();
}

void EcuShutdownRequest::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (this != default_instance_) {
  }
}

void EcuShutdownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EcuShutdownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EcuShutdownRequest_descriptor_;
}

const EcuShutdownRequest& EcuShutdownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ecu_2eproto();
  return *default_instance_;
}

EcuShutdownRequest* EcuShutdownRequest::default_instance_ = NULL;

EcuShutdownRequest* EcuShutdownRequest::New() const {
  return new EcuShutdownRequest;
}

void EcuShutdownRequest::Clear() {
  if (has_client_name()) {
    if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      client_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EcuShutdownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.EcuShutdownRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.EcuShutdownRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.EcuShutdownRequest)
  return false;
#undef DO_
}

void EcuShutdownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.EcuShutdownRequest)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.EcuShutdownRequest)
}

::google::protobuf::uint8* EcuShutdownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.EcuShutdownRequest)
  // optional string client_name = 1;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.EcuShutdownRequest)
  return target;
}

int EcuShutdownRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_name = 1;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EcuShutdownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EcuShutdownRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EcuShutdownRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EcuShutdownRequest::MergeFrom(const EcuShutdownRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EcuShutdownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EcuShutdownRequest::CopyFrom(const EcuShutdownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuShutdownRequest::IsInitialized() const {

  return true;
}

void EcuShutdownRequest::Swap(EcuShutdownRequest* other) {
  if (other != this) {
    std::swap(client_name_, other->client_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EcuShutdownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EcuShutdownRequest_descriptor_;
  metadata.reflection = EcuShutdownRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

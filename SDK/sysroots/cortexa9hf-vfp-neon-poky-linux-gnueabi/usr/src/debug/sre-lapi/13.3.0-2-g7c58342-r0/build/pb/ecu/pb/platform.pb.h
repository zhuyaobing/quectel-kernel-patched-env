// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: platform.proto

#ifndef PROTOBUF_platform_2eproto__INCLUDED
#define PROTOBUF_platform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_platform_2eproto();
void protobuf_AssignDesc_platform_2eproto();
void protobuf_ShutdownFile_platform_2eproto();

class ApplicationStatus;

enum ApplicationStatus_RunState {
  ApplicationStatus_RunState_RS_ERROR = 0,
  ApplicationStatus_RunState_RS_ACTIVE = 1,
  ApplicationStatus_RunState_RS_ACTIVATING = 2,
  ApplicationStatus_RunState_RS_DEACTIVATING = 3,
  ApplicationStatus_RunState_RS_RELOADING = 4,
  ApplicationStatus_RunState_RS_INACTIVE = 5,
  ApplicationStatus_RunState_RS_FAILED = 6
};
bool ApplicationStatus_RunState_IsValid(int value);
const ApplicationStatus_RunState ApplicationStatus_RunState_RunState_MIN = ApplicationStatus_RunState_RS_ERROR;
const ApplicationStatus_RunState ApplicationStatus_RunState_RunState_MAX = ApplicationStatus_RunState_RS_FAILED;
const int ApplicationStatus_RunState_RunState_ARRAYSIZE = ApplicationStatus_RunState_RunState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplicationStatus_RunState_descriptor();
inline const ::std::string& ApplicationStatus_RunState_Name(ApplicationStatus_RunState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplicationStatus_RunState_descriptor(), value);
}
inline bool ApplicationStatus_RunState_Parse(
    const ::std::string& name, ApplicationStatus_RunState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplicationStatus_RunState>(
    ApplicationStatus_RunState_descriptor(), name, value);
}
enum ApplicationStatus_InstallState {
  ApplicationStatus_InstallState_IS_ERROR = 0,
  ApplicationStatus_InstallState_IS_DISABLED = 1,
  ApplicationStatus_InstallState_IS_ENABLED = 2,
  ApplicationStatus_InstallState_IS_ENABLED_RUNTIME = 3,
  ApplicationStatus_InstallState_IS_LINKED = 4,
  ApplicationStatus_InstallState_IS_LINKED_RUNTIME = 5,
  ApplicationStatus_InstallState_IS_MASKED = 6,
  ApplicationStatus_InstallState_IS_MASKED_RUNTIME = 7,
  ApplicationStatus_InstallState_IS_STATIC = 8
};
bool ApplicationStatus_InstallState_IsValid(int value);
const ApplicationStatus_InstallState ApplicationStatus_InstallState_InstallState_MIN = ApplicationStatus_InstallState_IS_ERROR;
const ApplicationStatus_InstallState ApplicationStatus_InstallState_InstallState_MAX = ApplicationStatus_InstallState_IS_STATIC;
const int ApplicationStatus_InstallState_InstallState_ARRAYSIZE = ApplicationStatus_InstallState_InstallState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplicationStatus_InstallState_descriptor();
inline const ::std::string& ApplicationStatus_InstallState_Name(ApplicationStatus_InstallState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplicationStatus_InstallState_descriptor(), value);
}
inline bool ApplicationStatus_InstallState_Parse(
    const ::std::string& name, ApplicationStatus_InstallState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplicationStatus_InstallState>(
    ApplicationStatus_InstallState_descriptor(), name, value);
}
// ===================================================================

class ApplicationStatus : public ::google::protobuf::Message {
 public:
  ApplicationStatus();
  virtual ~ApplicationStatus();

  ApplicationStatus(const ApplicationStatus& from);

  inline ApplicationStatus& operator=(const ApplicationStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplicationStatus& default_instance();

  void Swap(ApplicationStatus* other);

  // implements Message ----------------------------------------------

  ApplicationStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplicationStatus& from);
  void MergeFrom(const ApplicationStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ApplicationStatus_RunState RunState;
  static const RunState RS_ERROR = ApplicationStatus_RunState_RS_ERROR;
  static const RunState RS_ACTIVE = ApplicationStatus_RunState_RS_ACTIVE;
  static const RunState RS_ACTIVATING = ApplicationStatus_RunState_RS_ACTIVATING;
  static const RunState RS_DEACTIVATING = ApplicationStatus_RunState_RS_DEACTIVATING;
  static const RunState RS_RELOADING = ApplicationStatus_RunState_RS_RELOADING;
  static const RunState RS_INACTIVE = ApplicationStatus_RunState_RS_INACTIVE;
  static const RunState RS_FAILED = ApplicationStatus_RunState_RS_FAILED;
  static inline bool RunState_IsValid(int value) {
    return ApplicationStatus_RunState_IsValid(value);
  }
  static const RunState RunState_MIN =
    ApplicationStatus_RunState_RunState_MIN;
  static const RunState RunState_MAX =
    ApplicationStatus_RunState_RunState_MAX;
  static const int RunState_ARRAYSIZE =
    ApplicationStatus_RunState_RunState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RunState_descriptor() {
    return ApplicationStatus_RunState_descriptor();
  }
  static inline const ::std::string& RunState_Name(RunState value) {
    return ApplicationStatus_RunState_Name(value);
  }
  static inline bool RunState_Parse(const ::std::string& name,
      RunState* value) {
    return ApplicationStatus_RunState_Parse(name, value);
  }

  typedef ApplicationStatus_InstallState InstallState;
  static const InstallState IS_ERROR = ApplicationStatus_InstallState_IS_ERROR;
  static const InstallState IS_DISABLED = ApplicationStatus_InstallState_IS_DISABLED;
  static const InstallState IS_ENABLED = ApplicationStatus_InstallState_IS_ENABLED;
  static const InstallState IS_ENABLED_RUNTIME = ApplicationStatus_InstallState_IS_ENABLED_RUNTIME;
  static const InstallState IS_LINKED = ApplicationStatus_InstallState_IS_LINKED;
  static const InstallState IS_LINKED_RUNTIME = ApplicationStatus_InstallState_IS_LINKED_RUNTIME;
  static const InstallState IS_MASKED = ApplicationStatus_InstallState_IS_MASKED;
  static const InstallState IS_MASKED_RUNTIME = ApplicationStatus_InstallState_IS_MASKED_RUNTIME;
  static const InstallState IS_STATIC = ApplicationStatus_InstallState_IS_STATIC;
  static inline bool InstallState_IsValid(int value) {
    return ApplicationStatus_InstallState_IsValid(value);
  }
  static const InstallState InstallState_MIN =
    ApplicationStatus_InstallState_InstallState_MIN;
  static const InstallState InstallState_MAX =
    ApplicationStatus_InstallState_InstallState_MAX;
  static const int InstallState_ARRAYSIZE =
    ApplicationStatus_InstallState_InstallState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InstallState_descriptor() {
    return ApplicationStatus_InstallState_descriptor();
  }
  static inline const ::std::string& InstallState_Name(InstallState value) {
    return ApplicationStatus_InstallState_Name(value);
  }
  static inline bool InstallState_Parse(const ::std::string& name,
      InstallState* value) {
    return ApplicationStatus_InstallState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.ApplicationStatus.InstallState install_state = 1;
  inline bool has_install_state() const;
  inline void clear_install_state();
  static const int kInstallStateFieldNumber = 1;
  inline ::ecu::lapi::pb::ApplicationStatus_InstallState install_state() const;
  inline void set_install_state(::ecu::lapi::pb::ApplicationStatus_InstallState value);

  // optional .ecu.lapi.pb.ApplicationStatus.RunState run_state = 2;
  inline bool has_run_state() const;
  inline void clear_run_state();
  static const int kRunStateFieldNumber = 2;
  inline ::ecu::lapi::pb::ApplicationStatus_RunState run_state() const;
  inline void set_run_state(::ecu::lapi::pb::ApplicationStatus_RunState value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.ApplicationStatus)
 private:
  inline void set_has_install_state();
  inline void clear_has_install_state();
  inline void set_has_run_state();
  inline void clear_has_run_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int install_state_;
  int run_state_;
  friend void  protobuf_AddDesc_platform_2eproto();
  friend void protobuf_AssignDesc_platform_2eproto();
  friend void protobuf_ShutdownFile_platform_2eproto();

  void InitAsDefaultInstance();
  static ApplicationStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// ApplicationStatus

// optional .ecu.lapi.pb.ApplicationStatus.InstallState install_state = 1;
inline bool ApplicationStatus::has_install_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplicationStatus::set_has_install_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplicationStatus::clear_has_install_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplicationStatus::clear_install_state() {
  install_state_ = 0;
  clear_has_install_state();
}
inline ::ecu::lapi::pb::ApplicationStatus_InstallState ApplicationStatus::install_state() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.ApplicationStatus.install_state)
  return static_cast< ::ecu::lapi::pb::ApplicationStatus_InstallState >(install_state_);
}
inline void ApplicationStatus::set_install_state(::ecu::lapi::pb::ApplicationStatus_InstallState value) {
  assert(::ecu::lapi::pb::ApplicationStatus_InstallState_IsValid(value));
  set_has_install_state();
  install_state_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.ApplicationStatus.install_state)
}

// optional .ecu.lapi.pb.ApplicationStatus.RunState run_state = 2;
inline bool ApplicationStatus::has_run_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplicationStatus::set_has_run_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApplicationStatus::clear_has_run_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApplicationStatus::clear_run_state() {
  run_state_ = 0;
  clear_has_run_state();
}
inline ::ecu::lapi::pb::ApplicationStatus_RunState ApplicationStatus::run_state() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.ApplicationStatus.run_state)
  return static_cast< ::ecu::lapi::pb::ApplicationStatus_RunState >(run_state_);
}
inline void ApplicationStatus::set_run_state(::ecu::lapi::pb::ApplicationStatus_RunState value) {
  assert(::ecu::lapi::pb::ApplicationStatus_RunState_IsValid(value));
  set_has_run_state();
  run_state_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.ApplicationStatus.run_state)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecu::lapi::pb::ApplicationStatus_RunState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::ApplicationStatus_RunState>() {
  return ::ecu::lapi::pb::ApplicationStatus_RunState_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::ApplicationStatus_InstallState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::ApplicationStatus_InstallState>() {
  return ::ecu::lapi::pb::ApplicationStatus_InstallState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_platform_2eproto__INCLUDED

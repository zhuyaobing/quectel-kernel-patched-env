// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#ifndef PROTOBUF_log_2eproto__INCLUDED
#define PROTOBUF_log_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_2eproto();
void protobuf_AssignDesc_log_2eproto();
void protobuf_ShutdownFile_log_2eproto();

class LogConfig;
class LogConfig_LogModule;

enum LogConfig_LogMode {
  LogConfig_LogMode_MODE_SYSLOG = 0,
  LogConfig_LogMode_MODE_STDOUT = 1,
  LogConfig_LogMode_MODE_STDERR = 2
};
bool LogConfig_LogMode_IsValid(int value);
const LogConfig_LogMode LogConfig_LogMode_LogMode_MIN = LogConfig_LogMode_MODE_SYSLOG;
const LogConfig_LogMode LogConfig_LogMode_LogMode_MAX = LogConfig_LogMode_MODE_STDERR;
const int LogConfig_LogMode_LogMode_ARRAYSIZE = LogConfig_LogMode_LogMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogConfig_LogMode_descriptor();
inline const ::std::string& LogConfig_LogMode_Name(LogConfig_LogMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogConfig_LogMode_descriptor(), value);
}
inline bool LogConfig_LogMode_Parse(
    const ::std::string& name, LogConfig_LogMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogConfig_LogMode>(
    LogConfig_LogMode_descriptor(), name, value);
}
enum LogConfig_LogLevel {
  LogConfig_LogLevel_LVL_EMERGENCY = 0,
  LogConfig_LogLevel_LVL_ALERT = 1,
  LogConfig_LogLevel_LVL_CRITICAL = 2,
  LogConfig_LogLevel_LVL_ERROR = 3,
  LogConfig_LogLevel_LVL_WARNING = 4,
  LogConfig_LogLevel_LVL_NOTICE = 5,
  LogConfig_LogLevel_LVL_INFO = 6,
  LogConfig_LogLevel_LVL_DEBUG = 7
};
bool LogConfig_LogLevel_IsValid(int value);
const LogConfig_LogLevel LogConfig_LogLevel_LogLevel_MIN = LogConfig_LogLevel_LVL_EMERGENCY;
const LogConfig_LogLevel LogConfig_LogLevel_LogLevel_MAX = LogConfig_LogLevel_LVL_DEBUG;
const int LogConfig_LogLevel_LogLevel_ARRAYSIZE = LogConfig_LogLevel_LogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogConfig_LogLevel_descriptor();
inline const ::std::string& LogConfig_LogLevel_Name(LogConfig_LogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogConfig_LogLevel_descriptor(), value);
}
inline bool LogConfig_LogLevel_Parse(
    const ::std::string& name, LogConfig_LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogConfig_LogLevel>(
    LogConfig_LogLevel_descriptor(), name, value);
}
// ===================================================================

class LogConfig_LogModule : public ::google::protobuf::Message {
 public:
  LogConfig_LogModule();
  virtual ~LogConfig_LogModule();

  LogConfig_LogModule(const LogConfig_LogModule& from);

  inline LogConfig_LogModule& operator=(const LogConfig_LogModule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogConfig_LogModule& default_instance();

  void Swap(LogConfig_LogModule* other);

  // implements Message ----------------------------------------------

  LogConfig_LogModule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogConfig_LogModule& from);
  void MergeFrom(const LogConfig_LogModule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool enabled = 2;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // optional bool recursive = 3;
  inline bool has_recursive() const;
  inline void clear_recursive();
  static const int kRecursiveFieldNumber = 3;
  inline bool recursive() const;
  inline void set_recursive(bool value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.LogConfig.LogModule)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_recursive();
  inline void clear_has_recursive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  bool enabled_;
  bool recursive_;
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static LogConfig_LogModule* default_instance_;
};
// -------------------------------------------------------------------

class LogConfig : public ::google::protobuf::Message {
 public:
  LogConfig();
  virtual ~LogConfig();

  LogConfig(const LogConfig& from);

  inline LogConfig& operator=(const LogConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogConfig& default_instance();

  void Swap(LogConfig* other);

  // implements Message ----------------------------------------------

  LogConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogConfig& from);
  void MergeFrom(const LogConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LogConfig_LogModule LogModule;

  typedef LogConfig_LogMode LogMode;
  static const LogMode MODE_SYSLOG = LogConfig_LogMode_MODE_SYSLOG;
  static const LogMode MODE_STDOUT = LogConfig_LogMode_MODE_STDOUT;
  static const LogMode MODE_STDERR = LogConfig_LogMode_MODE_STDERR;
  static inline bool LogMode_IsValid(int value) {
    return LogConfig_LogMode_IsValid(value);
  }
  static const LogMode LogMode_MIN =
    LogConfig_LogMode_LogMode_MIN;
  static const LogMode LogMode_MAX =
    LogConfig_LogMode_LogMode_MAX;
  static const int LogMode_ARRAYSIZE =
    LogConfig_LogMode_LogMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogMode_descriptor() {
    return LogConfig_LogMode_descriptor();
  }
  static inline const ::std::string& LogMode_Name(LogMode value) {
    return LogConfig_LogMode_Name(value);
  }
  static inline bool LogMode_Parse(const ::std::string& name,
      LogMode* value) {
    return LogConfig_LogMode_Parse(name, value);
  }

  typedef LogConfig_LogLevel LogLevel;
  static const LogLevel LVL_EMERGENCY = LogConfig_LogLevel_LVL_EMERGENCY;
  static const LogLevel LVL_ALERT = LogConfig_LogLevel_LVL_ALERT;
  static const LogLevel LVL_CRITICAL = LogConfig_LogLevel_LVL_CRITICAL;
  static const LogLevel LVL_ERROR = LogConfig_LogLevel_LVL_ERROR;
  static const LogLevel LVL_WARNING = LogConfig_LogLevel_LVL_WARNING;
  static const LogLevel LVL_NOTICE = LogConfig_LogLevel_LVL_NOTICE;
  static const LogLevel LVL_INFO = LogConfig_LogLevel_LVL_INFO;
  static const LogLevel LVL_DEBUG = LogConfig_LogLevel_LVL_DEBUG;
  static inline bool LogLevel_IsValid(int value) {
    return LogConfig_LogLevel_IsValid(value);
  }
  static const LogLevel LogLevel_MIN =
    LogConfig_LogLevel_LogLevel_MIN;
  static const LogLevel LogLevel_MAX =
    LogConfig_LogLevel_LogLevel_MAX;
  static const int LogLevel_ARRAYSIZE =
    LogConfig_LogLevel_LogLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogLevel_descriptor() {
    return LogConfig_LogLevel_descriptor();
  }
  static inline const ::std::string& LogLevel_Name(LogLevel value) {
    return LogConfig_LogLevel_Name(value);
  }
  static inline bool LogLevel_Parse(const ::std::string& name,
      LogLevel* value) {
    return LogConfig_LogLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.LogConfig.LogMode mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::ecu::lapi::pb::LogConfig_LogMode mode() const;
  inline void set_mode(::ecu::lapi::pb::LogConfig_LogMode value);

  // optional .ecu.lapi.pb.LogConfig.LogLevel level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::ecu::lapi::pb::LogConfig_LogLevel level() const;
  inline void set_level(::ecu::lapi::pb::LogConfig_LogLevel value);

  // repeated .ecu.lapi.pb.LogConfig.LogModule modules = 3;
  inline int modules_size() const;
  inline void clear_modules();
  static const int kModulesFieldNumber = 3;
  inline const ::ecu::lapi::pb::LogConfig_LogModule& modules(int index) const;
  inline ::ecu::lapi::pb::LogConfig_LogModule* mutable_modules(int index);
  inline ::ecu::lapi::pb::LogConfig_LogModule* add_modules();
  inline const ::google::protobuf::RepeatedPtrField< ::ecu::lapi::pb::LogConfig_LogModule >&
      modules() const;
  inline ::google::protobuf::RepeatedPtrField< ::ecu::lapi::pb::LogConfig_LogModule >*
      mutable_modules();

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.LogConfig)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mode_;
  int level_;
  ::google::protobuf::RepeatedPtrField< ::ecu::lapi::pb::LogConfig_LogModule > modules_;
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static LogConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// LogConfig_LogModule

// optional string name = 1;
inline bool LogConfig_LogModule::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogConfig_LogModule::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogConfig_LogModule::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogConfig_LogModule::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LogConfig_LogModule::name() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.LogConfig.LogModule.name)
  return *name_;
}
inline void LogConfig_LogModule::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.LogConfig.LogModule.name)
}
inline void LogConfig_LogModule::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.LogConfig.LogModule.name)
}
inline void LogConfig_LogModule::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.LogConfig.LogModule.name)
}
inline ::std::string* LogConfig_LogModule::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.LogConfig.LogModule.name)
  return name_;
}
inline ::std::string* LogConfig_LogModule::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogConfig_LogModule::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.LogConfig.LogModule.name)
}

// optional bool enabled = 2;
inline bool LogConfig_LogModule::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogConfig_LogModule::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogConfig_LogModule::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogConfig_LogModule::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool LogConfig_LogModule::enabled() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.LogConfig.LogModule.enabled)
  return enabled_;
}
inline void LogConfig_LogModule::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.LogConfig.LogModule.enabled)
}

// optional bool recursive = 3;
inline bool LogConfig_LogModule::has_recursive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogConfig_LogModule::set_has_recursive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogConfig_LogModule::clear_has_recursive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogConfig_LogModule::clear_recursive() {
  recursive_ = false;
  clear_has_recursive();
}
inline bool LogConfig_LogModule::recursive() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.LogConfig.LogModule.recursive)
  return recursive_;
}
inline void LogConfig_LogModule::set_recursive(bool value) {
  set_has_recursive();
  recursive_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.LogConfig.LogModule.recursive)
}

// -------------------------------------------------------------------

// LogConfig

// optional .ecu.lapi.pb.LogConfig.LogMode mode = 1;
inline bool LogConfig::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogConfig::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogConfig::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogConfig::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::ecu::lapi::pb::LogConfig_LogMode LogConfig::mode() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.LogConfig.mode)
  return static_cast< ::ecu::lapi::pb::LogConfig_LogMode >(mode_);
}
inline void LogConfig::set_mode(::ecu::lapi::pb::LogConfig_LogMode value) {
  assert(::ecu::lapi::pb::LogConfig_LogMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.LogConfig.mode)
}

// optional .ecu.lapi.pb.LogConfig.LogLevel level = 2;
inline bool LogConfig::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogConfig::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogConfig::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::ecu::lapi::pb::LogConfig_LogLevel LogConfig::level() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.LogConfig.level)
  return static_cast< ::ecu::lapi::pb::LogConfig_LogLevel >(level_);
}
inline void LogConfig::set_level(::ecu::lapi::pb::LogConfig_LogLevel value) {
  assert(::ecu::lapi::pb::LogConfig_LogLevel_IsValid(value));
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.LogConfig.level)
}

// repeated .ecu.lapi.pb.LogConfig.LogModule modules = 3;
inline int LogConfig::modules_size() const {
  return modules_.size();
}
inline void LogConfig::clear_modules() {
  modules_.Clear();
}
inline const ::ecu::lapi::pb::LogConfig_LogModule& LogConfig::modules(int index) const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.LogConfig.modules)
  return modules_.Get(index);
}
inline ::ecu::lapi::pb::LogConfig_LogModule* LogConfig::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.LogConfig.modules)
  return modules_.Mutable(index);
}
inline ::ecu::lapi::pb::LogConfig_LogModule* LogConfig::add_modules() {
  // @@protoc_insertion_point(field_add:ecu.lapi.pb.LogConfig.modules)
  return modules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ecu::lapi::pb::LogConfig_LogModule >&
LogConfig::modules() const {
  // @@protoc_insertion_point(field_list:ecu.lapi.pb.LogConfig.modules)
  return modules_;
}
inline ::google::protobuf::RepeatedPtrField< ::ecu::lapi::pb::LogConfig_LogModule >*
LogConfig::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:ecu.lapi.pb.LogConfig.modules)
  return &modules_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecu::lapi::pb::LogConfig_LogMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::LogConfig_LogMode>() {
  return ::ecu::lapi::pb::LogConfig_LogMode_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::LogConfig_LogLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::LogConfig_LogLevel>() {
  return ::ecu::lapi::pb::LogConfig_LogLevel_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_2eproto__INCLUDED

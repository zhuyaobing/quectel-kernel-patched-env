// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: systime.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "systime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* SystemTimeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemTimeStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SystemTimeStatus_TimeSrc_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TimeZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeZone_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeZone_Source_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_systime_2eproto() {
  protobuf_AddDesc_systime_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "systime.proto");
  GOOGLE_CHECK(file != NULL);
  SystemTimeStatus_descriptor_ = file->message_type(0);
  static const int SystemTimeStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemTimeStatus, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemTimeStatus, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemTimeStatus, utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemTimeStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemTimeStatus, diff_),
  };
  SystemTimeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemTimeStatus_descriptor_,
      SystemTimeStatus::default_instance_,
      SystemTimeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemTimeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemTimeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemTimeStatus));
  SystemTimeStatus_TimeSrc_descriptor_ = SystemTimeStatus_descriptor_->enum_type(0);
  TimeZone_descriptor_ = file->message_type(1);
  static const int TimeZone_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeZone, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeZone, local_minute_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeZone, local_hour_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeZone, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeZone, dst_),
  };
  TimeZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeZone_descriptor_,
      TimeZone::default_instance_,
      TimeZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeZone));
  TimeZone_Source_descriptor_ = TimeZone_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_systime_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemTimeStatus_descriptor_, &SystemTimeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeZone_descriptor_, &TimeZone::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_systime_2eproto() {
  delete SystemTimeStatus::default_instance_;
  delete SystemTimeStatus_reflection_;
  delete TimeZone::default_instance_;
  delete TimeZone_reflection_;
}

void protobuf_AddDesc_systime_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsystime.proto\022\013ecu.lapi.pb\"\314\001\n\020SystemT"
    "imeStatus\0222\n\003src\030\001 \001(\0162%.ecu.lapi.pb.Sys"
    "temTimeStatus.TimeSrc\022\021\n\tavailable\030\002 \001(\010"
    "\022\020\n\010utc_time\030\003 \001(\004\022\021\n\ttimestamp\030\004 \001(\004\022\014\n"
    "\004diff\030\005 \001(\003\">\n\007TimeSrc\022\013\n\007unknown\020\000\022\010\n\004g"
    "nss\020\001\022\007\n\003tco\020\002\022\007\n\003gsm\020\003\022\n\n\006server\020\004\"\270\001\n\010"
    "TimeZone\022)\n\003src\030\001 \001(\0162\034.ecu.lapi.pb.Time"
    "Zone.Source\022\033\n\023local_minute_offset\030\002 \001(\005"
    "\022\031\n\021local_hour_offset\030\003 \001(\005\022\020\n\010timezone\030"
    "\004 \001(\t\022\013\n\003dst\030\005 \001(\010\"*\n\006Source\022\013\n\007unknown\020"
    "\000\022\010\n\004gnss\020\001\022\t\n\005cache\020\002", 422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "systime.proto", &protobuf_RegisterTypes);
  SystemTimeStatus::default_instance_ = new SystemTimeStatus();
  TimeZone::default_instance_ = new TimeZone();
  SystemTimeStatus::default_instance_->InitAsDefaultInstance();
  TimeZone::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_systime_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_systime_2eproto {
  StaticDescriptorInitializer_systime_2eproto() {
    protobuf_AddDesc_systime_2eproto();
  }
} static_descriptor_initializer_systime_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SystemTimeStatus_TimeSrc_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemTimeStatus_TimeSrc_descriptor_;
}
bool SystemTimeStatus_TimeSrc_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SystemTimeStatus_TimeSrc SystemTimeStatus::unknown;
const SystemTimeStatus_TimeSrc SystemTimeStatus::gnss;
const SystemTimeStatus_TimeSrc SystemTimeStatus::tco;
const SystemTimeStatus_TimeSrc SystemTimeStatus::gsm;
const SystemTimeStatus_TimeSrc SystemTimeStatus::server;
const SystemTimeStatus_TimeSrc SystemTimeStatus::TimeSrc_MIN;
const SystemTimeStatus_TimeSrc SystemTimeStatus::TimeSrc_MAX;
const int SystemTimeStatus::TimeSrc_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SystemTimeStatus::kSrcFieldNumber;
const int SystemTimeStatus::kAvailableFieldNumber;
const int SystemTimeStatus::kUtcTimeFieldNumber;
const int SystemTimeStatus::kTimestampFieldNumber;
const int SystemTimeStatus::kDiffFieldNumber;
#endif  // !_MSC_VER

SystemTimeStatus::SystemTimeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.SystemTimeStatus)
}

void SystemTimeStatus::InitAsDefaultInstance() {
}

SystemTimeStatus::SystemTimeStatus(const SystemTimeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.SystemTimeStatus)
}

void SystemTimeStatus::SharedCtor() {
  _cached_size_ = 0;
  src_ = 0;
  available_ = false;
  utc_time_ = GOOGLE_ULONGLONG(0);
  timestamp_ = GOOGLE_ULONGLONG(0);
  diff_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemTimeStatus::~SystemTimeStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.SystemTimeStatus)
  SharedDtor();
}

void SystemTimeStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemTimeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemTimeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemTimeStatus_descriptor_;
}

const SystemTimeStatus& SystemTimeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_systime_2eproto();
  return *default_instance_;
}

SystemTimeStatus* SystemTimeStatus::default_instance_ = NULL;

SystemTimeStatus* SystemTimeStatus::New() const {
  return new SystemTimeStatus;
}

void SystemTimeStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SystemTimeStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(src_, diff_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemTimeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.SystemTimeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.SystemTimeStatus.TimeSrc src = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::SystemTimeStatus_TimeSrc_IsValid(value)) {
            set_src(static_cast< ::ecu::lapi::pb::SystemTimeStatus_TimeSrc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }

      // optional bool available = 2;
      case 2: {
        if (tag == 16) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_utc_time;
        break;
      }

      // optional uint64 utc_time = 3;
      case 3: {
        if (tag == 24) {
         parse_utc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_time_)));
          set_has_utc_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_diff;
        break;
      }

      // optional int64 diff = 5;
      case 5: {
        if (tag == 40) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diff_)));
          set_has_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.SystemTimeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.SystemTimeStatus)
  return false;
#undef DO_
}

void SystemTimeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.SystemTimeStatus)
  // optional .ecu.lapi.pb.SystemTimeStatus.TimeSrc src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src(), output);
  }

  // optional bool available = 2;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->available(), output);
  }

  // optional uint64 utc_time = 3;
  if (has_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->utc_time(), output);
  }

  // optional uint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional int64 diff = 5;
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->diff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.SystemTimeStatus)
}

::google::protobuf::uint8* SystemTimeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.SystemTimeStatus)
  // optional .ecu.lapi.pb.SystemTimeStatus.TimeSrc src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src(), target);
  }

  // optional bool available = 2;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->available(), target);
  }

  // optional uint64 utc_time = 3;
  if (has_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->utc_time(), target);
  }

  // optional uint64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional int64 diff = 5;
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->diff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.SystemTimeStatus)
  return target;
}

int SystemTimeStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.SystemTimeStatus.TimeSrc src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src());
    }

    // optional bool available = 2;
    if (has_available()) {
      total_size += 1 + 1;
    }

    // optional uint64 utc_time = 3;
    if (has_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc_time());
    }

    // optional uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional int64 diff = 5;
    if (has_diff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemTimeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemTimeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemTimeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemTimeStatus::MergeFrom(const SystemTimeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_utc_time()) {
      set_utc_time(from.utc_time());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_diff()) {
      set_diff(from.diff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemTimeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemTimeStatus::CopyFrom(const SystemTimeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemTimeStatus::IsInitialized() const {

  return true;
}

void SystemTimeStatus::Swap(SystemTimeStatus* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(available_, other->available_);
    std::swap(utc_time_, other->utc_time_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(diff_, other->diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemTimeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemTimeStatus_descriptor_;
  metadata.reflection = SystemTimeStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TimeZone_Source_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeZone_Source_descriptor_;
}
bool TimeZone_Source_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TimeZone_Source TimeZone::unknown;
const TimeZone_Source TimeZone::gnss;
const TimeZone_Source TimeZone::cache;
const TimeZone_Source TimeZone::Source_MIN;
const TimeZone_Source TimeZone::Source_MAX;
const int TimeZone::Source_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TimeZone::kSrcFieldNumber;
const int TimeZone::kLocalMinuteOffsetFieldNumber;
const int TimeZone::kLocalHourOffsetFieldNumber;
const int TimeZone::kTimezoneFieldNumber;
const int TimeZone::kDstFieldNumber;
#endif  // !_MSC_VER

TimeZone::TimeZone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.TimeZone)
}

void TimeZone::InitAsDefaultInstance() {
}

TimeZone::TimeZone(const TimeZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.TimeZone)
}

void TimeZone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = 0;
  local_minute_offset_ = 0;
  local_hour_offset_ = 0;
  timezone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeZone::~TimeZone() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.TimeZone)
  SharedDtor();
}

void TimeZone::SharedDtor() {
  if (timezone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timezone_;
  }
  if (this != default_instance_) {
  }
}

void TimeZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeZone_descriptor_;
}

const TimeZone& TimeZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_systime_2eproto();
  return *default_instance_;
}

TimeZone* TimeZone::default_instance_ = NULL;

TimeZone* TimeZone::New() const {
  return new TimeZone;
}

void TimeZone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeZone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(src_, local_minute_offset_);
    ZR_(local_hour_offset_, dst_);
    if (has_timezone()) {
      if (timezone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timezone_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.TimeZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.TimeZone.Source src = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::TimeZone_Source_IsValid(value)) {
            set_src(static_cast< ::ecu::lapi::pb::TimeZone_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_local_minute_offset;
        break;
      }

      // optional int32 local_minute_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_local_minute_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_minute_offset_)));
          set_has_local_minute_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_local_hour_offset;
        break;
      }

      // optional int32 local_hour_offset = 3;
      case 3: {
        if (tag == 24) {
         parse_local_hour_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_hour_offset_)));
          set_has_local_hour_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_timezone;
        break;
      }

      // optional string timezone = 4;
      case 4: {
        if (tag == 34) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timezone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dst;
        break;
      }

      // optional bool dst = 5;
      case 5: {
        if (tag == 40) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.TimeZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.TimeZone)
  return false;
#undef DO_
}

void TimeZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.TimeZone)
  // optional .ecu.lapi.pb.TimeZone.Source src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src(), output);
  }

  // optional int32 local_minute_offset = 2;
  if (has_local_minute_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->local_minute_offset(), output);
  }

  // optional int32 local_hour_offset = 3;
  if (has_local_hour_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->local_hour_offset(), output);
  }

  // optional string timezone = 4;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timezone(), output);
  }

  // optional bool dst = 5;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.TimeZone)
}

::google::protobuf::uint8* TimeZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.TimeZone)
  // optional .ecu.lapi.pb.TimeZone.Source src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src(), target);
  }

  // optional int32 local_minute_offset = 2;
  if (has_local_minute_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->local_minute_offset(), target);
  }

  // optional int32 local_hour_offset = 3;
  if (has_local_hour_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->local_hour_offset(), target);
  }

  // optional string timezone = 4;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timezone(), target);
  }

  // optional bool dst = 5;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.TimeZone)
  return target;
}

int TimeZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.TimeZone.Source src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src());
    }

    // optional int32 local_minute_offset = 2;
    if (has_local_minute_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_minute_offset());
    }

    // optional int32 local_hour_offset = 3;
    if (has_local_hour_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_hour_offset());
    }

    // optional string timezone = 4;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional bool dst = 5;
    if (has_dst()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeZone::MergeFrom(const TimeZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_local_minute_offset()) {
      set_local_minute_offset(from.local_minute_offset());
    }
    if (from.has_local_hour_offset()) {
      set_local_hour_offset(from.local_hour_offset());
    }
    if (from.has_timezone()) {
      set_timezone(from.timezone());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeZone::CopyFrom(const TimeZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeZone::IsInitialized() const {

  return true;
}

void TimeZone::Swap(TimeZone* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(local_minute_offset_, other->local_minute_offset_);
    std::swap(local_hour_offset_, other->local_hour_offset_);
    std::swap(timezone_, other->timezone_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeZone_descriptor_;
  metadata.reflection = TimeZone_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pgn.proto

#ifndef PROTOBUF_pgn_2eproto__INCLUDED
#define PROTOBUF_pgn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pgn_2eproto();
void protobuf_AssignDesc_pgn_2eproto();
void protobuf_ShutdownFile_pgn_2eproto();

class PgnRequestTokenRequest;
class PgnRequestTokenResponse;

enum PgnRequestTokenRequest_Action {
  PgnRequestTokenRequest_Action_UNDEFINED = 0,
  PgnRequestTokenRequest_Action_GET_TOKEN = 1,
  PgnRequestTokenRequest_Action_RELEASE_TOKEN = 2
};
bool PgnRequestTokenRequest_Action_IsValid(int value);
const PgnRequestTokenRequest_Action PgnRequestTokenRequest_Action_Action_MIN = PgnRequestTokenRequest_Action_UNDEFINED;
const PgnRequestTokenRequest_Action PgnRequestTokenRequest_Action_Action_MAX = PgnRequestTokenRequest_Action_RELEASE_TOKEN;
const int PgnRequestTokenRequest_Action_Action_ARRAYSIZE = PgnRequestTokenRequest_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* PgnRequestTokenRequest_Action_descriptor();
inline const ::std::string& PgnRequestTokenRequest_Action_Name(PgnRequestTokenRequest_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    PgnRequestTokenRequest_Action_descriptor(), value);
}
inline bool PgnRequestTokenRequest_Action_Parse(
    const ::std::string& name, PgnRequestTokenRequest_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PgnRequestTokenRequest_Action>(
    PgnRequestTokenRequest_Action_descriptor(), name, value);
}
enum PgnRequestTokenResponse_Result {
  PgnRequestTokenResponse_Result_UNDEFINED = 0,
  PgnRequestTokenResponse_Result_ACTION_NOT_SUPPORTED = 1,
  PgnRequestTokenResponse_Result_ECU_UNKNOWN = 2,
  PgnRequestTokenResponse_Result_TOKEN_ACQUIRED = 3,
  PgnRequestTokenResponse_Result_BUSY = 4
};
bool PgnRequestTokenResponse_Result_IsValid(int value);
const PgnRequestTokenResponse_Result PgnRequestTokenResponse_Result_Result_MIN = PgnRequestTokenResponse_Result_UNDEFINED;
const PgnRequestTokenResponse_Result PgnRequestTokenResponse_Result_Result_MAX = PgnRequestTokenResponse_Result_BUSY;
const int PgnRequestTokenResponse_Result_Result_ARRAYSIZE = PgnRequestTokenResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* PgnRequestTokenResponse_Result_descriptor();
inline const ::std::string& PgnRequestTokenResponse_Result_Name(PgnRequestTokenResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    PgnRequestTokenResponse_Result_descriptor(), value);
}
inline bool PgnRequestTokenResponse_Result_Parse(
    const ::std::string& name, PgnRequestTokenResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PgnRequestTokenResponse_Result>(
    PgnRequestTokenResponse_Result_descriptor(), name, value);
}
// ===================================================================

class PgnRequestTokenRequest : public ::google::protobuf::Message {
 public:
  PgnRequestTokenRequest();
  virtual ~PgnRequestTokenRequest();

  PgnRequestTokenRequest(const PgnRequestTokenRequest& from);

  inline PgnRequestTokenRequest& operator=(const PgnRequestTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PgnRequestTokenRequest& default_instance();

  void Swap(PgnRequestTokenRequest* other);

  // implements Message ----------------------------------------------

  PgnRequestTokenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PgnRequestTokenRequest& from);
  void MergeFrom(const PgnRequestTokenRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PgnRequestTokenRequest_Action Action;
  static const Action UNDEFINED = PgnRequestTokenRequest_Action_UNDEFINED;
  static const Action GET_TOKEN = PgnRequestTokenRequest_Action_GET_TOKEN;
  static const Action RELEASE_TOKEN = PgnRequestTokenRequest_Action_RELEASE_TOKEN;
  static inline bool Action_IsValid(int value) {
    return PgnRequestTokenRequest_Action_IsValid(value);
  }
  static const Action Action_MIN =
    PgnRequestTokenRequest_Action_Action_MIN;
  static const Action Action_MAX =
    PgnRequestTokenRequest_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    PgnRequestTokenRequest_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return PgnRequestTokenRequest_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return PgnRequestTokenRequest_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return PgnRequestTokenRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.PgnRequestTokenRequest.Action action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::ecu::lapi::pb::PgnRequestTokenRequest_Action action() const;
  inline void set_action(::ecu::lapi::pb::PgnRequestTokenRequest_Action value);

  // optional string topic = 2;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 2;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // optional string client_name = 3;
  inline bool has_client_name() const;
  inline void clear_client_name();
  static const int kClientNameFieldNumber = 3;
  inline const ::std::string& client_name() const;
  inline void set_client_name(const ::std::string& value);
  inline void set_client_name(const char* value);
  inline void set_client_name(const char* value, size_t size);
  inline ::std::string* mutable_client_name();
  inline ::std::string* release_client_name();
  inline void set_allocated_client_name(::std::string* client_name);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.PgnRequestTokenRequest)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_client_name();
  inline void clear_has_client_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* topic_;
  ::std::string* client_name_;
  int action_;
  friend void  protobuf_AddDesc_pgn_2eproto();
  friend void protobuf_AssignDesc_pgn_2eproto();
  friend void protobuf_ShutdownFile_pgn_2eproto();

  void InitAsDefaultInstance();
  static PgnRequestTokenRequest* default_instance_;
};
// -------------------------------------------------------------------

class PgnRequestTokenResponse : public ::google::protobuf::Message {
 public:
  PgnRequestTokenResponse();
  virtual ~PgnRequestTokenResponse();

  PgnRequestTokenResponse(const PgnRequestTokenResponse& from);

  inline PgnRequestTokenResponse& operator=(const PgnRequestTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PgnRequestTokenResponse& default_instance();

  void Swap(PgnRequestTokenResponse* other);

  // implements Message ----------------------------------------------

  PgnRequestTokenResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PgnRequestTokenResponse& from);
  void MergeFrom(const PgnRequestTokenResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PgnRequestTokenResponse_Result Result;
  static const Result UNDEFINED = PgnRequestTokenResponse_Result_UNDEFINED;
  static const Result ACTION_NOT_SUPPORTED = PgnRequestTokenResponse_Result_ACTION_NOT_SUPPORTED;
  static const Result ECU_UNKNOWN = PgnRequestTokenResponse_Result_ECU_UNKNOWN;
  static const Result TOKEN_ACQUIRED = PgnRequestTokenResponse_Result_TOKEN_ACQUIRED;
  static const Result BUSY = PgnRequestTokenResponse_Result_BUSY;
  static inline bool Result_IsValid(int value) {
    return PgnRequestTokenResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    PgnRequestTokenResponse_Result_Result_MIN;
  static const Result Result_MAX =
    PgnRequestTokenResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    PgnRequestTokenResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return PgnRequestTokenResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return PgnRequestTokenResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return PgnRequestTokenResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.PgnRequestTokenResponse.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ecu::lapi::pb::PgnRequestTokenResponse_Result result() const;
  inline void set_result(::ecu::lapi::pb::PgnRequestTokenResponse_Result value);

  // optional string requested_ecu_topic = 2;
  inline bool has_requested_ecu_topic() const;
  inline void clear_requested_ecu_topic();
  static const int kRequestedEcuTopicFieldNumber = 2;
  inline const ::std::string& requested_ecu_topic() const;
  inline void set_requested_ecu_topic(const ::std::string& value);
  inline void set_requested_ecu_topic(const char* value);
  inline void set_requested_ecu_topic(const char* value, size_t size);
  inline ::std::string* mutable_requested_ecu_topic();
  inline ::std::string* release_requested_ecu_topic();
  inline void set_allocated_requested_ecu_topic(::std::string* requested_ecu_topic);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.PgnRequestTokenResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_requested_ecu_topic();
  inline void clear_has_requested_ecu_topic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* requested_ecu_topic_;
  int result_;
  friend void  protobuf_AddDesc_pgn_2eproto();
  friend void protobuf_AssignDesc_pgn_2eproto();
  friend void protobuf_ShutdownFile_pgn_2eproto();

  void InitAsDefaultInstance();
  static PgnRequestTokenResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// PgnRequestTokenRequest

// optional .ecu.lapi.pb.PgnRequestTokenRequest.Action action = 1;
inline bool PgnRequestTokenRequest::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PgnRequestTokenRequest::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PgnRequestTokenRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PgnRequestTokenRequest::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::ecu::lapi::pb::PgnRequestTokenRequest_Action PgnRequestTokenRequest::action() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.PgnRequestTokenRequest.action)
  return static_cast< ::ecu::lapi::pb::PgnRequestTokenRequest_Action >(action_);
}
inline void PgnRequestTokenRequest::set_action(::ecu::lapi::pb::PgnRequestTokenRequest_Action value) {
  assert(::ecu::lapi::pb::PgnRequestTokenRequest_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.PgnRequestTokenRequest.action)
}

// optional string topic = 2;
inline bool PgnRequestTokenRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PgnRequestTokenRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PgnRequestTokenRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PgnRequestTokenRequest::clear_topic() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& PgnRequestTokenRequest::topic() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.PgnRequestTokenRequest.topic)
  return *topic_;
}
inline void PgnRequestTokenRequest::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.PgnRequestTokenRequest.topic)
}
inline void PgnRequestTokenRequest::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.PgnRequestTokenRequest.topic)
}
inline void PgnRequestTokenRequest::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.PgnRequestTokenRequest.topic)
}
inline ::std::string* PgnRequestTokenRequest::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.PgnRequestTokenRequest.topic)
  return topic_;
}
inline ::std::string* PgnRequestTokenRequest::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PgnRequestTokenRequest::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.PgnRequestTokenRequest.topic)
}

// optional string client_name = 3;
inline bool PgnRequestTokenRequest::has_client_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PgnRequestTokenRequest::set_has_client_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PgnRequestTokenRequest::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PgnRequestTokenRequest::clear_client_name() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_->clear();
  }
  clear_has_client_name();
}
inline const ::std::string& PgnRequestTokenRequest::client_name() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.PgnRequestTokenRequest.client_name)
  return *client_name_;
}
inline void PgnRequestTokenRequest::set_client_name(const ::std::string& value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.PgnRequestTokenRequest.client_name)
}
inline void PgnRequestTokenRequest::set_client_name(const char* value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.PgnRequestTokenRequest.client_name)
}
inline void PgnRequestTokenRequest::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.PgnRequestTokenRequest.client_name)
}
inline ::std::string* PgnRequestTokenRequest::mutable_client_name() {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.PgnRequestTokenRequest.client_name)
  return client_name_;
}
inline ::std::string* PgnRequestTokenRequest::release_client_name() {
  clear_has_client_name();
  if (client_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_name_;
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PgnRequestTokenRequest::set_allocated_client_name(::std::string* client_name) {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (client_name) {
    set_has_client_name();
    client_name_ = client_name;
  } else {
    clear_has_client_name();
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.PgnRequestTokenRequest.client_name)
}

// -------------------------------------------------------------------

// PgnRequestTokenResponse

// optional .ecu.lapi.pb.PgnRequestTokenResponse.Result result = 1;
inline bool PgnRequestTokenResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PgnRequestTokenResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PgnRequestTokenResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PgnRequestTokenResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ecu::lapi::pb::PgnRequestTokenResponse_Result PgnRequestTokenResponse::result() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.PgnRequestTokenResponse.result)
  return static_cast< ::ecu::lapi::pb::PgnRequestTokenResponse_Result >(result_);
}
inline void PgnRequestTokenResponse::set_result(::ecu::lapi::pb::PgnRequestTokenResponse_Result value) {
  assert(::ecu::lapi::pb::PgnRequestTokenResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.PgnRequestTokenResponse.result)
}

// optional string requested_ecu_topic = 2;
inline bool PgnRequestTokenResponse::has_requested_ecu_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PgnRequestTokenResponse::set_has_requested_ecu_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PgnRequestTokenResponse::clear_has_requested_ecu_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PgnRequestTokenResponse::clear_requested_ecu_topic() {
  if (requested_ecu_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requested_ecu_topic_->clear();
  }
  clear_has_requested_ecu_topic();
}
inline const ::std::string& PgnRequestTokenResponse::requested_ecu_topic() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.PgnRequestTokenResponse.requested_ecu_topic)
  return *requested_ecu_topic_;
}
inline void PgnRequestTokenResponse::set_requested_ecu_topic(const ::std::string& value) {
  set_has_requested_ecu_topic();
  if (requested_ecu_topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requested_ecu_topic_ = new ::std::string;
  }
  requested_ecu_topic_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.PgnRequestTokenResponse.requested_ecu_topic)
}
inline void PgnRequestTokenResponse::set_requested_ecu_topic(const char* value) {
  set_has_requested_ecu_topic();
  if (requested_ecu_topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requested_ecu_topic_ = new ::std::string;
  }
  requested_ecu_topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.PgnRequestTokenResponse.requested_ecu_topic)
}
inline void PgnRequestTokenResponse::set_requested_ecu_topic(const char* value, size_t size) {
  set_has_requested_ecu_topic();
  if (requested_ecu_topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requested_ecu_topic_ = new ::std::string;
  }
  requested_ecu_topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.PgnRequestTokenResponse.requested_ecu_topic)
}
inline ::std::string* PgnRequestTokenResponse::mutable_requested_ecu_topic() {
  set_has_requested_ecu_topic();
  if (requested_ecu_topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requested_ecu_topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.PgnRequestTokenResponse.requested_ecu_topic)
  return requested_ecu_topic_;
}
inline ::std::string* PgnRequestTokenResponse::release_requested_ecu_topic() {
  clear_has_requested_ecu_topic();
  if (requested_ecu_topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = requested_ecu_topic_;
    requested_ecu_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PgnRequestTokenResponse::set_allocated_requested_ecu_topic(::std::string* requested_ecu_topic) {
  if (requested_ecu_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requested_ecu_topic_;
  }
  if (requested_ecu_topic) {
    set_has_requested_ecu_topic();
    requested_ecu_topic_ = requested_ecu_topic;
  } else {
    clear_has_requested_ecu_topic();
    requested_ecu_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.PgnRequestTokenResponse.requested_ecu_topic)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecu::lapi::pb::PgnRequestTokenRequest_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::PgnRequestTokenRequest_Action>() {
  return ::ecu::lapi::pb::PgnRequestTokenRequest_Action_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::PgnRequestTokenResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::PgnRequestTokenResponse_Result>() {
  return ::ecu::lapi::pb::PgnRequestTokenResponse_Result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pgn_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend.proto

#ifndef PROTOBUF_backend_2eproto__INCLUDED
#define PROTOBUF_backend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_backend_2eproto();
void protobuf_AssignDesc_backend_2eproto();
void protobuf_ShutdownFile_backend_2eproto();

class BackendProxyStatus;
class BackendProxyQueueStatus;
class BackendProxyResponse;
class BackendProxyTransmit;

enum BackendProxyStatus_ConnectionState {
  BackendProxyStatus_ConnectionState_ERROR = 0,
  BackendProxyStatus_ConnectionState_DISCONNECTED = 1,
  BackendProxyStatus_ConnectionState_CONNECTED = 2
};
bool BackendProxyStatus_ConnectionState_IsValid(int value);
const BackendProxyStatus_ConnectionState BackendProxyStatus_ConnectionState_ConnectionState_MIN = BackendProxyStatus_ConnectionState_ERROR;
const BackendProxyStatus_ConnectionState BackendProxyStatus_ConnectionState_ConnectionState_MAX = BackendProxyStatus_ConnectionState_CONNECTED;
const int BackendProxyStatus_ConnectionState_ConnectionState_ARRAYSIZE = BackendProxyStatus_ConnectionState_ConnectionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* BackendProxyStatus_ConnectionState_descriptor();
inline const ::std::string& BackendProxyStatus_ConnectionState_Name(BackendProxyStatus_ConnectionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    BackendProxyStatus_ConnectionState_descriptor(), value);
}
inline bool BackendProxyStatus_ConnectionState_Parse(
    const ::std::string& name, BackendProxyStatus_ConnectionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BackendProxyStatus_ConnectionState>(
    BackendProxyStatus_ConnectionState_descriptor(), name, value);
}
enum BackendProxyResponse_Status {
  BackendProxyResponse_Status_ERROR = 0,
  BackendProxyResponse_Status_SENT = 1,
  BackendProxyResponse_Status_QUEUED = 2,
  BackendProxyResponse_Status_DROPPED = 3
};
bool BackendProxyResponse_Status_IsValid(int value);
const BackendProxyResponse_Status BackendProxyResponse_Status_Status_MIN = BackendProxyResponse_Status_ERROR;
const BackendProxyResponse_Status BackendProxyResponse_Status_Status_MAX = BackendProxyResponse_Status_DROPPED;
const int BackendProxyResponse_Status_Status_ARRAYSIZE = BackendProxyResponse_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* BackendProxyResponse_Status_descriptor();
inline const ::std::string& BackendProxyResponse_Status_Name(BackendProxyResponse_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    BackendProxyResponse_Status_descriptor(), value);
}
inline bool BackendProxyResponse_Status_Parse(
    const ::std::string& name, BackendProxyResponse_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BackendProxyResponse_Status>(
    BackendProxyResponse_Status_descriptor(), name, value);
}
// ===================================================================

class BackendProxyStatus : public ::google::protobuf::Message {
 public:
  BackendProxyStatus();
  virtual ~BackendProxyStatus();

  BackendProxyStatus(const BackendProxyStatus& from);

  inline BackendProxyStatus& operator=(const BackendProxyStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackendProxyStatus& default_instance();

  void Swap(BackendProxyStatus* other);

  // implements Message ----------------------------------------------

  BackendProxyStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackendProxyStatus& from);
  void MergeFrom(const BackendProxyStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BackendProxyStatus_ConnectionState ConnectionState;
  static const ConnectionState ERROR = BackendProxyStatus_ConnectionState_ERROR;
  static const ConnectionState DISCONNECTED = BackendProxyStatus_ConnectionState_DISCONNECTED;
  static const ConnectionState CONNECTED = BackendProxyStatus_ConnectionState_CONNECTED;
  static inline bool ConnectionState_IsValid(int value) {
    return BackendProxyStatus_ConnectionState_IsValid(value);
  }
  static const ConnectionState ConnectionState_MIN =
    BackendProxyStatus_ConnectionState_ConnectionState_MIN;
  static const ConnectionState ConnectionState_MAX =
    BackendProxyStatus_ConnectionState_ConnectionState_MAX;
  static const int ConnectionState_ARRAYSIZE =
    BackendProxyStatus_ConnectionState_ConnectionState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectionState_descriptor() {
    return BackendProxyStatus_ConnectionState_descriptor();
  }
  static inline const ::std::string& ConnectionState_Name(ConnectionState value) {
    return BackendProxyStatus_ConnectionState_Name(value);
  }
  static inline bool ConnectionState_Parse(const ::std::string& name,
      ConnectionState* value) {
    return BackendProxyStatus_ConnectionState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ecu.lapi.pb.BackendProxyStatus.ConnectionState con_state = 1;
  inline bool has_con_state() const;
  inline void clear_con_state();
  static const int kConStateFieldNumber = 1;
  inline ::ecu::lapi::pb::BackendProxyStatus_ConnectionState con_state() const;
  inline void set_con_state(::ecu::lapi::pb::BackendProxyStatus_ConnectionState value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.BackendProxyStatus)
 private:
  inline void set_has_con_state();
  inline void clear_has_con_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int con_state_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static BackendProxyStatus* default_instance_;
};
// -------------------------------------------------------------------

class BackendProxyQueueStatus : public ::google::protobuf::Message {
 public:
  BackendProxyQueueStatus();
  virtual ~BackendProxyQueueStatus();

  BackendProxyQueueStatus(const BackendProxyQueueStatus& from);

  inline BackendProxyQueueStatus& operator=(const BackendProxyQueueStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackendProxyQueueStatus& default_instance();

  void Swap(BackendProxyQueueStatus* other);

  // implements Message ----------------------------------------------

  BackendProxyQueueStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackendProxyQueueStatus& from);
  void MergeFrom(const BackendProxyQueueStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional uint32 available = 2;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 2;
  inline ::google::protobuf::uint32 available() const;
  inline void set_available(::google::protobuf::uint32 value);

  // optional uint32 in_flight = 3;
  inline bool has_in_flight() const;
  inline void clear_in_flight();
  static const int kInFlightFieldNumber = 3;
  inline ::google::protobuf::uint32 in_flight() const;
  inline void set_in_flight(::google::protobuf::uint32 value);

  // optional uint32 kl30robust = 4;
  inline bool has_kl30robust() const;
  inline void clear_kl30robust();
  static const int kKl30RobustFieldNumber = 4;
  inline ::google::protobuf::uint32 kl30robust() const;
  inline void set_kl30robust(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.BackendProxyQueueStatus)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_available();
  inline void clear_has_available();
  inline void set_has_in_flight();
  inline void clear_has_in_flight();
  inline void set_has_kl30robust();
  inline void clear_has_kl30robust();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 available_;
  ::google::protobuf::uint32 in_flight_;
  ::google::protobuf::uint32 kl30robust_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static BackendProxyQueueStatus* default_instance_;
};
// -------------------------------------------------------------------

class BackendProxyResponse : public ::google::protobuf::Message {
 public:
  BackendProxyResponse();
  virtual ~BackendProxyResponse();

  BackendProxyResponse(const BackendProxyResponse& from);

  inline BackendProxyResponse& operator=(const BackendProxyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackendProxyResponse& default_instance();

  void Swap(BackendProxyResponse* other);

  // implements Message ----------------------------------------------

  BackendProxyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackendProxyResponse& from);
  void MergeFrom(const BackendProxyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BackendProxyResponse_Status Status;
  static const Status ERROR = BackendProxyResponse_Status_ERROR;
  static const Status SENT = BackendProxyResponse_Status_SENT;
  static const Status QUEUED = BackendProxyResponse_Status_QUEUED;
  static const Status DROPPED = BackendProxyResponse_Status_DROPPED;
  static inline bool Status_IsValid(int value) {
    return BackendProxyResponse_Status_IsValid(value);
  }
  static const Status Status_MIN =
    BackendProxyResponse_Status_Status_MIN;
  static const Status Status_MAX =
    BackendProxyResponse_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    BackendProxyResponse_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return BackendProxyResponse_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return BackendProxyResponse_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return BackendProxyResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint64 req_id() const;
  inline void set_req_id(::google::protobuf::uint64 value);

  // optional .ecu.lapi.pb.BackendProxyResponse.Status status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::ecu::lapi::pb::BackendProxyResponse_Status status() const;
  inline void set_status(::ecu::lapi::pb::BackendProxyResponse_Status value);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.BackendProxyResponse)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 req_id_;
  int status_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static BackendProxyResponse* default_instance_;
};
// -------------------------------------------------------------------

class BackendProxyTransmit : public ::google::protobuf::Message {
 public:
  BackendProxyTransmit();
  virtual ~BackendProxyTransmit();

  BackendProxyTransmit(const BackendProxyTransmit& from);

  inline BackendProxyTransmit& operator=(const BackendProxyTransmit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackendProxyTransmit& default_instance();

  void Swap(BackendProxyTransmit* other);

  // implements Message ----------------------------------------------

  BackendProxyTransmit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackendProxyTransmit& from);
  void MergeFrom(const BackendProxyTransmit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint64 req_id() const;
  inline void set_req_id(::google::protobuf::uint64 value);

  // optional string req_client = 2;
  inline bool has_req_client() const;
  inline void clear_req_client();
  static const int kReqClientFieldNumber = 2;
  inline const ::std::string& req_client() const;
  inline void set_req_client(const ::std::string& value);
  inline void set_req_client(const char* value);
  inline void set_req_client(const char* value, size_t size);
  inline ::std::string* mutable_req_client();
  inline ::std::string* release_req_client();
  inline void set_allocated_req_client(::std::string* req_client);

  // optional bool req_response = 3;
  inline bool has_req_response() const;
  inline void clear_req_response();
  static const int kReqResponseFieldNumber = 3;
  inline bool req_response() const;
  inline void set_req_response(bool value);

  // optional uint32 content_id = 9;
  inline bool has_content_id() const;
  inline void clear_content_id();
  static const int kContentIdFieldNumber = 9;
  inline ::google::protobuf::uint32 content_id() const;
  inline void set_content_id(::google::protobuf::uint32 value);

  // optional uint64 timeout = 11;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 11;
  inline ::google::protobuf::uint64 timeout() const;
  inline void set_timeout(::google::protobuf::uint64 value);

  // optional int32 priority = 12;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 12;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional bool kl15robust = 15;
  inline bool has_kl15robust() const;
  inline void clear_kl15robust();
  static const int kKl15RobustFieldNumber = 15;
  inline bool kl15robust() const;
  inline void set_kl15robust(bool value);

  // optional bool kl30robust = 14;
  inline bool has_kl30robust() const;
  inline void clear_kl30robust();
  static const int kKl30RobustFieldNumber = 14;
  inline bool kl30robust() const;
  inline void set_kl30robust(bool value);

  // optional bool add_driver_id = 16;
  inline bool has_add_driver_id() const;
  inline void clear_add_driver_id();
  static const int kAddDriverIdFieldNumber = 16;
  inline bool add_driver_id() const;
  inline void set_add_driver_id(bool value);

  // optional bytes payload = 22;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 22;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:ecu.lapi.pb.BackendProxyTransmit)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_req_client();
  inline void clear_has_req_client();
  inline void set_has_req_response();
  inline void clear_has_req_response();
  inline void set_has_content_id();
  inline void clear_has_content_id();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_kl15robust();
  inline void clear_has_kl15robust();
  inline void set_has_kl30robust();
  inline void clear_has_kl30robust();
  inline void set_has_add_driver_id();
  inline void clear_has_add_driver_id();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 req_id_;
  ::std::string* req_client_;
  ::google::protobuf::uint64 timeout_;
  ::google::protobuf::uint32 content_id_;
  ::google::protobuf::int32 priority_;
  ::std::string* payload_;
  bool req_response_;
  bool kl15robust_;
  bool kl30robust_;
  bool add_driver_id_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static BackendProxyTransmit* default_instance_;
};
// ===================================================================


// ===================================================================

// BackendProxyStatus

// optional .ecu.lapi.pb.BackendProxyStatus.ConnectionState con_state = 1;
inline bool BackendProxyStatus::has_con_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackendProxyStatus::set_has_con_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackendProxyStatus::clear_has_con_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackendProxyStatus::clear_con_state() {
  con_state_ = 0;
  clear_has_con_state();
}
inline ::ecu::lapi::pb::BackendProxyStatus_ConnectionState BackendProxyStatus::con_state() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyStatus.con_state)
  return static_cast< ::ecu::lapi::pb::BackendProxyStatus_ConnectionState >(con_state_);
}
inline void BackendProxyStatus::set_con_state(::ecu::lapi::pb::BackendProxyStatus_ConnectionState value) {
  assert(::ecu::lapi::pb::BackendProxyStatus_ConnectionState_IsValid(value));
  set_has_con_state();
  con_state_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyStatus.con_state)
}

// -------------------------------------------------------------------

// BackendProxyQueueStatus

// optional uint32 size = 1;
inline bool BackendProxyQueueStatus::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackendProxyQueueStatus::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackendProxyQueueStatus::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackendProxyQueueStatus::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 BackendProxyQueueStatus::size() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyQueueStatus.size)
  return size_;
}
inline void BackendProxyQueueStatus::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyQueueStatus.size)
}

// optional uint32 available = 2;
inline bool BackendProxyQueueStatus::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackendProxyQueueStatus::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackendProxyQueueStatus::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackendProxyQueueStatus::clear_available() {
  available_ = 0u;
  clear_has_available();
}
inline ::google::protobuf::uint32 BackendProxyQueueStatus::available() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyQueueStatus.available)
  return available_;
}
inline void BackendProxyQueueStatus::set_available(::google::protobuf::uint32 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyQueueStatus.available)
}

// optional uint32 in_flight = 3;
inline bool BackendProxyQueueStatus::has_in_flight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackendProxyQueueStatus::set_has_in_flight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackendProxyQueueStatus::clear_has_in_flight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackendProxyQueueStatus::clear_in_flight() {
  in_flight_ = 0u;
  clear_has_in_flight();
}
inline ::google::protobuf::uint32 BackendProxyQueueStatus::in_flight() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyQueueStatus.in_flight)
  return in_flight_;
}
inline void BackendProxyQueueStatus::set_in_flight(::google::protobuf::uint32 value) {
  set_has_in_flight();
  in_flight_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyQueueStatus.in_flight)
}

// optional uint32 kl30robust = 4;
inline bool BackendProxyQueueStatus::has_kl30robust() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackendProxyQueueStatus::set_has_kl30robust() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackendProxyQueueStatus::clear_has_kl30robust() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackendProxyQueueStatus::clear_kl30robust() {
  kl30robust_ = 0u;
  clear_has_kl30robust();
}
inline ::google::protobuf::uint32 BackendProxyQueueStatus::kl30robust() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyQueueStatus.kl30robust)
  return kl30robust_;
}
inline void BackendProxyQueueStatus::set_kl30robust(::google::protobuf::uint32 value) {
  set_has_kl30robust();
  kl30robust_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyQueueStatus.kl30robust)
}

// -------------------------------------------------------------------

// BackendProxyResponse

// optional uint64 req_id = 1;
inline bool BackendProxyResponse::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackendProxyResponse::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackendProxyResponse::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackendProxyResponse::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
  clear_has_req_id();
}
inline ::google::protobuf::uint64 BackendProxyResponse::req_id() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyResponse.req_id)
  return req_id_;
}
inline void BackendProxyResponse::set_req_id(::google::protobuf::uint64 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyResponse.req_id)
}

// optional .ecu.lapi.pb.BackendProxyResponse.Status status = 2;
inline bool BackendProxyResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackendProxyResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackendProxyResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackendProxyResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::ecu::lapi::pb::BackendProxyResponse_Status BackendProxyResponse::status() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyResponse.status)
  return static_cast< ::ecu::lapi::pb::BackendProxyResponse_Status >(status_);
}
inline void BackendProxyResponse::set_status(::ecu::lapi::pb::BackendProxyResponse_Status value) {
  assert(::ecu::lapi::pb::BackendProxyResponse_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyResponse.status)
}

// -------------------------------------------------------------------

// BackendProxyTransmit

// optional uint64 req_id = 1;
inline bool BackendProxyTransmit::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackendProxyTransmit::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackendProxyTransmit::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackendProxyTransmit::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
  clear_has_req_id();
}
inline ::google::protobuf::uint64 BackendProxyTransmit::req_id() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.req_id)
  return req_id_;
}
inline void BackendProxyTransmit::set_req_id(::google::protobuf::uint64 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.req_id)
}

// optional string req_client = 2;
inline bool BackendProxyTransmit::has_req_client() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackendProxyTransmit::set_has_req_client() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackendProxyTransmit::clear_has_req_client() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackendProxyTransmit::clear_req_client() {
  if (req_client_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_client_->clear();
  }
  clear_has_req_client();
}
inline const ::std::string& BackendProxyTransmit::req_client() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.req_client)
  return *req_client_;
}
inline void BackendProxyTransmit::set_req_client(const ::std::string& value) {
  set_has_req_client();
  if (req_client_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_client_ = new ::std::string;
  }
  req_client_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.req_client)
}
inline void BackendProxyTransmit::set_req_client(const char* value) {
  set_has_req_client();
  if (req_client_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_client_ = new ::std::string;
  }
  req_client_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.BackendProxyTransmit.req_client)
}
inline void BackendProxyTransmit::set_req_client(const char* value, size_t size) {
  set_has_req_client();
  if (req_client_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_client_ = new ::std::string;
  }
  req_client_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.BackendProxyTransmit.req_client)
}
inline ::std::string* BackendProxyTransmit::mutable_req_client() {
  set_has_req_client();
  if (req_client_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_client_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.BackendProxyTransmit.req_client)
  return req_client_;
}
inline ::std::string* BackendProxyTransmit::release_req_client() {
  clear_has_req_client();
  if (req_client_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = req_client_;
    req_client_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BackendProxyTransmit::set_allocated_req_client(::std::string* req_client) {
  if (req_client_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_client_;
  }
  if (req_client) {
    set_has_req_client();
    req_client_ = req_client;
  } else {
    clear_has_req_client();
    req_client_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.BackendProxyTransmit.req_client)
}

// optional bool req_response = 3;
inline bool BackendProxyTransmit::has_req_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackendProxyTransmit::set_has_req_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackendProxyTransmit::clear_has_req_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackendProxyTransmit::clear_req_response() {
  req_response_ = false;
  clear_has_req_response();
}
inline bool BackendProxyTransmit::req_response() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.req_response)
  return req_response_;
}
inline void BackendProxyTransmit::set_req_response(bool value) {
  set_has_req_response();
  req_response_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.req_response)
}

// optional uint32 content_id = 9;
inline bool BackendProxyTransmit::has_content_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackendProxyTransmit::set_has_content_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackendProxyTransmit::clear_has_content_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackendProxyTransmit::clear_content_id() {
  content_id_ = 0u;
  clear_has_content_id();
}
inline ::google::protobuf::uint32 BackendProxyTransmit::content_id() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.content_id)
  return content_id_;
}
inline void BackendProxyTransmit::set_content_id(::google::protobuf::uint32 value) {
  set_has_content_id();
  content_id_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.content_id)
}

// optional uint64 timeout = 11;
inline bool BackendProxyTransmit::has_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackendProxyTransmit::set_has_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackendProxyTransmit::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackendProxyTransmit::clear_timeout() {
  timeout_ = GOOGLE_ULONGLONG(0);
  clear_has_timeout();
}
inline ::google::protobuf::uint64 BackendProxyTransmit::timeout() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.timeout)
  return timeout_;
}
inline void BackendProxyTransmit::set_timeout(::google::protobuf::uint64 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.timeout)
}

// optional int32 priority = 12;
inline bool BackendProxyTransmit::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackendProxyTransmit::set_has_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackendProxyTransmit::clear_has_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackendProxyTransmit::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 BackendProxyTransmit::priority() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.priority)
  return priority_;
}
inline void BackendProxyTransmit::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.priority)
}

// optional bool kl15robust = 15;
inline bool BackendProxyTransmit::has_kl15robust() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackendProxyTransmit::set_has_kl15robust() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BackendProxyTransmit::clear_has_kl15robust() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BackendProxyTransmit::clear_kl15robust() {
  kl15robust_ = false;
  clear_has_kl15robust();
}
inline bool BackendProxyTransmit::kl15robust() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.kl15robust)
  return kl15robust_;
}
inline void BackendProxyTransmit::set_kl15robust(bool value) {
  set_has_kl15robust();
  kl15robust_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.kl15robust)
}

// optional bool kl30robust = 14;
inline bool BackendProxyTransmit::has_kl30robust() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BackendProxyTransmit::set_has_kl30robust() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BackendProxyTransmit::clear_has_kl30robust() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BackendProxyTransmit::clear_kl30robust() {
  kl30robust_ = false;
  clear_has_kl30robust();
}
inline bool BackendProxyTransmit::kl30robust() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.kl30robust)
  return kl30robust_;
}
inline void BackendProxyTransmit::set_kl30robust(bool value) {
  set_has_kl30robust();
  kl30robust_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.kl30robust)
}

// optional bool add_driver_id = 16;
inline bool BackendProxyTransmit::has_add_driver_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BackendProxyTransmit::set_has_add_driver_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BackendProxyTransmit::clear_has_add_driver_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BackendProxyTransmit::clear_add_driver_id() {
  add_driver_id_ = false;
  clear_has_add_driver_id();
}
inline bool BackendProxyTransmit::add_driver_id() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.add_driver_id)
  return add_driver_id_;
}
inline void BackendProxyTransmit::set_add_driver_id(bool value) {
  set_has_add_driver_id();
  add_driver_id_ = value;
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.add_driver_id)
}

// optional bytes payload = 22;
inline bool BackendProxyTransmit::has_payload() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BackendProxyTransmit::set_has_payload() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BackendProxyTransmit::clear_has_payload() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BackendProxyTransmit::clear_payload() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& BackendProxyTransmit::payload() const {
  // @@protoc_insertion_point(field_get:ecu.lapi.pb.BackendProxyTransmit.payload)
  return *payload_;
}
inline void BackendProxyTransmit::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set:ecu.lapi.pb.BackendProxyTransmit.payload)
}
inline void BackendProxyTransmit::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set_char:ecu.lapi.pb.BackendProxyTransmit.payload)
}
inline void BackendProxyTransmit::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecu.lapi.pb.BackendProxyTransmit.payload)
}
inline ::std::string* BackendProxyTransmit::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ecu.lapi.pb.BackendProxyTransmit.payload)
  return payload_;
}
inline ::std::string* BackendProxyTransmit::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BackendProxyTransmit::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ecu.lapi.pb.BackendProxyTransmit.payload)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecu::lapi::pb::BackendProxyStatus_ConnectionState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::BackendProxyStatus_ConnectionState>() {
  return ::ecu::lapi::pb::BackendProxyStatus_ConnectionState_descriptor();
}
template <> struct is_proto_enum< ::ecu::lapi::pb::BackendProxyResponse_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecu::lapi::pb::BackendProxyResponse_Status>() {
  return ::ecu::lapi::pb::BackendProxyResponse_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_backend_2eproto__INCLUDED

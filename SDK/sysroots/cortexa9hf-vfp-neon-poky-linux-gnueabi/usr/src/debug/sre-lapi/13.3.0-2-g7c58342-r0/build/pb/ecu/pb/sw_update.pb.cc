// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sw_update.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sw_update.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ecu {
namespace lapi {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* SoftwareUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftwareUpdateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftwareUpdateRequest_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftwareUpdateRequest_Priority_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SoftwareUpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftwareUpdateResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftwareUpdateResponse_Acknowledge_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SoftwareUpdateStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftwareUpdateStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Error_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sw_5fupdate_2eproto() {
  protobuf_AddDesc_sw_5fupdate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sw_update.proto");
  GOOGLE_CHECK(file != NULL);
  SoftwareUpdateRequest_descriptor_ = file->message_type(0);
  static const int SoftwareUpdateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateRequest, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateRequest, client_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateRequest, description_),
  };
  SoftwareUpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftwareUpdateRequest_descriptor_,
      SoftwareUpdateRequest::default_instance_,
      SoftwareUpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftwareUpdateRequest));
  SoftwareUpdateRequest_Type_descriptor_ = SoftwareUpdateRequest_descriptor_->enum_type(0);
  SoftwareUpdateRequest_Priority_descriptor_ = SoftwareUpdateRequest_descriptor_->enum_type(1);
  SoftwareUpdateResponse_descriptor_ = file->message_type(1);
  static const int SoftwareUpdateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateResponse, acknowledge_),
  };
  SoftwareUpdateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftwareUpdateResponse_descriptor_,
      SoftwareUpdateResponse::default_instance_,
      SoftwareUpdateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftwareUpdateResponse));
  SoftwareUpdateResponse_Acknowledge_descriptor_ = SoftwareUpdateResponse_descriptor_->enum_type(0);
  SoftwareUpdateStatus_descriptor_ = file->message_type(2);
  static const int SoftwareUpdateStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateStatus, error_),
  };
  SoftwareUpdateStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftwareUpdateStatus_descriptor_,
      SoftwareUpdateStatus::default_instance_,
      SoftwareUpdateStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareUpdateStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftwareUpdateStatus));
  SoftwareUpdateStatus_Type_descriptor_ = SoftwareUpdateStatus_descriptor_->enum_type(0);
  SoftwareUpdateStatus_Status_descriptor_ = SoftwareUpdateStatus_descriptor_->enum_type(1);
  SoftwareUpdateStatus_Error_descriptor_ = SoftwareUpdateStatus_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sw_5fupdate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftwareUpdateRequest_descriptor_, &SoftwareUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftwareUpdateResponse_descriptor_, &SoftwareUpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftwareUpdateStatus_descriptor_, &SoftwareUpdateStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sw_5fupdate_2eproto() {
  delete SoftwareUpdateRequest::default_instance_;
  delete SoftwareUpdateRequest_reflection_;
  delete SoftwareUpdateResponse::default_instance_;
  delete SoftwareUpdateResponse_reflection_;
  delete SoftwareUpdateStatus::default_instance_;
  delete SoftwareUpdateStatus_reflection_;
}

void protobuf_AddDesc_sw_5fupdate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017sw_update.proto\022\013ecu.lapi.pb\"\376\001\n\025Softw"
    "areUpdateRequest\0225\n\004type\030\001 \001(\0162\'.ecu.lap"
    "i.pb.SoftwareUpdateRequest.Type\022=\n\010prior"
    "ity\030\002 \001(\0162+.ecu.lapi.pb.SoftwareUpdateRe"
    "quest.Priority\022\023\n\013client_name\030\003 \001(\t\022\023\n\013d"
    "escription\030\004 \001(\t\"\022\n\004Type\022\n\n\006ECU_SW\020\000\"1\n\010"
    "Priority\022\013\n\007REGULAR\020\000\022\n\n\006URGENT\020\001\022\014\n\010CRI"
    "TICAL\020\002\"\274\001\n\026SoftwareUpdateResponse\022D\n\013ac"
    "knowledge\030\001 \001(\0162/.ecu.lapi.pb.SoftwareUp"
    "dateResponse.Acknowledge\"\\\n\013Acknowledge\022"
    "\014\n\010ACCEPTED\020\000\022\020\n\014UNSAFE_STATE\020\001\022\020\n\014MISSI"
    "NG_TIME\020\002\022\010\n\004BUSY\020\003\022\021\n\rNOT_SUPPORTED\020\004\"\317"
    "\005\n\024SoftwareUpdateStatus\0224\n\004type\030\001 \001(\0162&."
    "ecu.lapi.pb.SoftwareUpdateStatus.Type\0228\n"
    "\006status\030\002 \001(\0162(.ecu.lapi.pb.SoftwareUpda"
    "teStatus.Status\0226\n\005error\030\003 \001(\0162\'.ecu.lap"
    "i.pb.SoftwareUpdateStatus.Error\"D\n\004Type\022"
    "\010\n\004NONE\020\000\022\r\n\tUDS_ASYNC\020\001\022\014\n\010UDS_SYNC\020\002\022\014"
    "\n\010RECOVERY\020\003\022\007\n\003OTA\020\004\"\251\001\n\006Status\022\t\n\005ERRO"
    "R\020\000\022\013\n\007WAITING\020\001\022\013\n\007TIMEOUT\020\002\022\033\n\027CHECKIN"
    "G_AUTHENTICATION\020\003\022\020\n\014TRANSFERRING\020\004\022\n\n\006"
    "UPDATE\020\005\022\014\n\010CHECKSUM\020\006\022\014\n\010FINISHED\020\007\022\r\n\010"
    "DELETING\020\200\010\022\024\n\017UPDATE_IMMINENT\020\201\010\"\234\002\n\005Er"
    "ror\022\013\n\007NOERROR\020\000\022\017\n\013USB_MISSING\020\001\022\017\n\013USB"
    "_REMOVED\020\002\022\022\n\016USB_UNREADABLE\020\003\022\020\n\014FILE_M"
    "ISSING\020\004\022\020\n\014FILE_CORRUPT\020\005\022\023\n\017ECU_MEMORY"
    "_FULL\020\006\022\021\n\rINVALID_IMAGE\020\007\022\025\n\021INVALID_SI"
    "GNATURE\020\010\022\022\n\rGENERAL_ERROR\020\200\010\022\022\n\rASYNC_E"
    "XPIRED\020\201\010\022\023\n\016INVALID_PARTNR\020\203\010\022\026\n\021COULD_"
    "NOT_RESTART\020\204\010\022\030\n\023COULD_NOT_SET_PARAM\020\205\010", 1200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sw_update.proto", &protobuf_RegisterTypes);
  SoftwareUpdateRequest::default_instance_ = new SoftwareUpdateRequest();
  SoftwareUpdateResponse::default_instance_ = new SoftwareUpdateResponse();
  SoftwareUpdateStatus::default_instance_ = new SoftwareUpdateStatus();
  SoftwareUpdateRequest::default_instance_->InitAsDefaultInstance();
  SoftwareUpdateResponse::default_instance_->InitAsDefaultInstance();
  SoftwareUpdateStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sw_5fupdate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sw_5fupdate_2eproto {
  StaticDescriptorInitializer_sw_5fupdate_2eproto() {
    protobuf_AddDesc_sw_5fupdate_2eproto();
  }
} static_descriptor_initializer_sw_5fupdate_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SoftwareUpdateRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateRequest_Type_descriptor_;
}
bool SoftwareUpdateRequest_Type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SoftwareUpdateRequest_Type SoftwareUpdateRequest::ECU_SW;
const SoftwareUpdateRequest_Type SoftwareUpdateRequest::Type_MIN;
const SoftwareUpdateRequest_Type SoftwareUpdateRequest::Type_MAX;
const int SoftwareUpdateRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SoftwareUpdateRequest_Priority_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateRequest_Priority_descriptor_;
}
bool SoftwareUpdateRequest_Priority_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SoftwareUpdateRequest_Priority SoftwareUpdateRequest::REGULAR;
const SoftwareUpdateRequest_Priority SoftwareUpdateRequest::URGENT;
const SoftwareUpdateRequest_Priority SoftwareUpdateRequest::CRITICAL;
const SoftwareUpdateRequest_Priority SoftwareUpdateRequest::Priority_MIN;
const SoftwareUpdateRequest_Priority SoftwareUpdateRequest::Priority_MAX;
const int SoftwareUpdateRequest::Priority_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SoftwareUpdateRequest::kTypeFieldNumber;
const int SoftwareUpdateRequest::kPriorityFieldNumber;
const int SoftwareUpdateRequest::kClientNameFieldNumber;
const int SoftwareUpdateRequest::kDescriptionFieldNumber;
#endif  // !_MSC_VER

SoftwareUpdateRequest::SoftwareUpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.SoftwareUpdateRequest)
}

void SoftwareUpdateRequest::InitAsDefaultInstance() {
}

SoftwareUpdateRequest::SoftwareUpdateRequest(const SoftwareUpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.SoftwareUpdateRequest)
}

void SoftwareUpdateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  priority_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftwareUpdateRequest::~SoftwareUpdateRequest() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.SoftwareUpdateRequest)
  SharedDtor();
}

void SoftwareUpdateRequest::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void SoftwareUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateRequest_descriptor_;
}

const SoftwareUpdateRequest& SoftwareUpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sw_5fupdate_2eproto();
  return *default_instance_;
}

SoftwareUpdateRequest* SoftwareUpdateRequest::default_instance_ = NULL;

SoftwareUpdateRequest* SoftwareUpdateRequest::New() const {
  return new SoftwareUpdateRequest;
}

void SoftwareUpdateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SoftwareUpdateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, priority_);
    if (has_client_name()) {
      if (client_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftwareUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.SoftwareUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.SoftwareUpdateRequest.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::SoftwareUpdateRequest_Type_IsValid(value)) {
            set_type(static_cast< ::ecu::lapi::pb::SoftwareUpdateRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_priority;
        break;
      }

      // optional .ecu.lapi.pb.SoftwareUpdateRequest.Priority priority = 2;
      case 2: {
        if (tag == 16) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::SoftwareUpdateRequest_Priority_IsValid(value)) {
            set_priority(static_cast< ::ecu::lapi::pb::SoftwareUpdateRequest_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_name;
        break;
      }

      // optional string client_name = 3;
      case 3: {
        if (tag == 26) {
         parse_client_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.SoftwareUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.SoftwareUpdateRequest)
  return false;
#undef DO_
}

void SoftwareUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.SoftwareUpdateRequest)
  // optional .ecu.lapi.pb.SoftwareUpdateRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ecu.lapi.pb.SoftwareUpdateRequest.Priority priority = 2;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->priority(), output);
  }

  // optional string client_name = 3;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_name(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.SoftwareUpdateRequest)
}

::google::protobuf::uint8* SoftwareUpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.SoftwareUpdateRequest)
  // optional .ecu.lapi.pb.SoftwareUpdateRequest.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ecu.lapi.pb.SoftwareUpdateRequest.Priority priority = 2;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->priority(), target);
  }

  // optional string client_name = 3;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_name(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.SoftwareUpdateRequest)
  return target;
}

int SoftwareUpdateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.SoftwareUpdateRequest.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ecu.lapi.pb.SoftwareUpdateRequest.Priority priority = 2;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

    // optional string client_name = 3;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftwareUpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftwareUpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftwareUpdateRequest::MergeFrom(const SoftwareUpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftwareUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareUpdateRequest::CopyFrom(const SoftwareUpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareUpdateRequest::IsInitialized() const {

  return true;
}

void SoftwareUpdateRequest::Swap(SoftwareUpdateRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(priority_, other->priority_);
    std::swap(client_name_, other->client_name_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftwareUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftwareUpdateRequest_descriptor_;
  metadata.reflection = SoftwareUpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SoftwareUpdateResponse_Acknowledge_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateResponse_Acknowledge_descriptor_;
}
bool SoftwareUpdateResponse_Acknowledge_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse::ACCEPTED;
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse::UNSAFE_STATE;
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse::MISSING_TIME;
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse::BUSY;
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse::NOT_SUPPORTED;
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse::Acknowledge_MIN;
const SoftwareUpdateResponse_Acknowledge SoftwareUpdateResponse::Acknowledge_MAX;
const int SoftwareUpdateResponse::Acknowledge_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SoftwareUpdateResponse::kAcknowledgeFieldNumber;
#endif  // !_MSC_VER

SoftwareUpdateResponse::SoftwareUpdateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.SoftwareUpdateResponse)
}

void SoftwareUpdateResponse::InitAsDefaultInstance() {
}

SoftwareUpdateResponse::SoftwareUpdateResponse(const SoftwareUpdateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.SoftwareUpdateResponse)
}

void SoftwareUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  acknowledge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftwareUpdateResponse::~SoftwareUpdateResponse() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.SoftwareUpdateResponse)
  SharedDtor();
}

void SoftwareUpdateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftwareUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareUpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateResponse_descriptor_;
}

const SoftwareUpdateResponse& SoftwareUpdateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sw_5fupdate_2eproto();
  return *default_instance_;
}

SoftwareUpdateResponse* SoftwareUpdateResponse::default_instance_ = NULL;

SoftwareUpdateResponse* SoftwareUpdateResponse::New() const {
  return new SoftwareUpdateResponse;
}

void SoftwareUpdateResponse::Clear() {
  acknowledge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftwareUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.SoftwareUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.SoftwareUpdateResponse.Acknowledge acknowledge = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge_IsValid(value)) {
            set_acknowledge(static_cast< ::ecu::lapi::pb::SoftwareUpdateResponse_Acknowledge >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.SoftwareUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.SoftwareUpdateResponse)
  return false;
#undef DO_
}

void SoftwareUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.SoftwareUpdateResponse)
  // optional .ecu.lapi.pb.SoftwareUpdateResponse.Acknowledge acknowledge = 1;
  if (has_acknowledge()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->acknowledge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.SoftwareUpdateResponse)
}

::google::protobuf::uint8* SoftwareUpdateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.SoftwareUpdateResponse)
  // optional .ecu.lapi.pb.SoftwareUpdateResponse.Acknowledge acknowledge = 1;
  if (has_acknowledge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->acknowledge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.SoftwareUpdateResponse)
  return target;
}

int SoftwareUpdateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.SoftwareUpdateResponse.Acknowledge acknowledge = 1;
    if (has_acknowledge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acknowledge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftwareUpdateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftwareUpdateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftwareUpdateResponse::MergeFrom(const SoftwareUpdateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acknowledge()) {
      set_acknowledge(from.acknowledge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftwareUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareUpdateResponse::CopyFrom(const SoftwareUpdateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareUpdateResponse::IsInitialized() const {

  return true;
}

void SoftwareUpdateResponse::Swap(SoftwareUpdateResponse* other) {
  if (other != this) {
    std::swap(acknowledge_, other->acknowledge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftwareUpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftwareUpdateResponse_descriptor_;
  metadata.reflection = SoftwareUpdateResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateStatus_Type_descriptor_;
}
bool SoftwareUpdateStatus_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SoftwareUpdateStatus_Type SoftwareUpdateStatus::NONE;
const SoftwareUpdateStatus_Type SoftwareUpdateStatus::UDS_ASYNC;
const SoftwareUpdateStatus_Type SoftwareUpdateStatus::UDS_SYNC;
const SoftwareUpdateStatus_Type SoftwareUpdateStatus::RECOVERY;
const SoftwareUpdateStatus_Type SoftwareUpdateStatus::OTA;
const SoftwareUpdateStatus_Type SoftwareUpdateStatus::Type_MIN;
const SoftwareUpdateStatus_Type SoftwareUpdateStatus::Type_MAX;
const int SoftwareUpdateStatus::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateStatus_Status_descriptor_;
}
bool SoftwareUpdateStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 1024:
    case 1025:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::ERROR;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::WAITING;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::TIMEOUT;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::CHECKING_AUTHENTICATION;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::TRANSFERRING;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::UPDATE;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::CHECKSUM;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::FINISHED;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::DELETING;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::UPDATE_IMMINENT;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::Status_MIN;
const SoftwareUpdateStatus_Status SoftwareUpdateStatus::Status_MAX;
const int SoftwareUpdateStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SoftwareUpdateStatus_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateStatus_Error_descriptor_;
}
bool SoftwareUpdateStatus_Error_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 1024:
    case 1025:
    case 1027:
    case 1028:
    case 1029:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::NOERROR;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::USB_MISSING;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::USB_REMOVED;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::USB_UNREADABLE;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::FILE_MISSING;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::FILE_CORRUPT;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::ECU_MEMORY_FULL;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::INVALID_IMAGE;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::INVALID_SIGNATURE;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::GENERAL_ERROR;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::ASYNC_EXPIRED;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::INVALID_PARTNR;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::COULD_NOT_RESTART;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::COULD_NOT_SET_PARAM;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::Error_MIN;
const SoftwareUpdateStatus_Error SoftwareUpdateStatus::Error_MAX;
const int SoftwareUpdateStatus::Error_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SoftwareUpdateStatus::kTypeFieldNumber;
const int SoftwareUpdateStatus::kStatusFieldNumber;
const int SoftwareUpdateStatus::kErrorFieldNumber;
#endif  // !_MSC_VER

SoftwareUpdateStatus::SoftwareUpdateStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecu.lapi.pb.SoftwareUpdateStatus)
}

void SoftwareUpdateStatus::InitAsDefaultInstance() {
}

SoftwareUpdateStatus::SoftwareUpdateStatus(const SoftwareUpdateStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ecu.lapi.pb.SoftwareUpdateStatus)
}

void SoftwareUpdateStatus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  status_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftwareUpdateStatus::~SoftwareUpdateStatus() {
  // @@protoc_insertion_point(destructor:ecu.lapi.pb.SoftwareUpdateStatus)
  SharedDtor();
}

void SoftwareUpdateStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftwareUpdateStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareUpdateStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareUpdateStatus_descriptor_;
}

const SoftwareUpdateStatus& SoftwareUpdateStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sw_5fupdate_2eproto();
  return *default_instance_;
}

SoftwareUpdateStatus* SoftwareUpdateStatus::default_instance_ = NULL;

SoftwareUpdateStatus* SoftwareUpdateStatus::New() const {
  return new SoftwareUpdateStatus;
}

void SoftwareUpdateStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SoftwareUpdateStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, error_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftwareUpdateStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ecu.lapi.pb.SoftwareUpdateStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ecu.lapi.pb.SoftwareUpdateStatus.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::SoftwareUpdateStatus_Type_IsValid(value)) {
            set_type(static_cast< ::ecu::lapi::pb::SoftwareUpdateStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .ecu.lapi.pb.SoftwareUpdateStatus.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::SoftwareUpdateStatus_Status_IsValid(value)) {
            set_status(static_cast< ::ecu::lapi::pb::SoftwareUpdateStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .ecu.lapi.pb.SoftwareUpdateStatus.Error error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ecu::lapi::pb::SoftwareUpdateStatus_Error_IsValid(value)) {
            set_error(static_cast< ::ecu::lapi::pb::SoftwareUpdateStatus_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ecu.lapi.pb.SoftwareUpdateStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ecu.lapi.pb.SoftwareUpdateStatus)
  return false;
#undef DO_
}

void SoftwareUpdateStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ecu.lapi.pb.SoftwareUpdateStatus)
  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Error error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ecu.lapi.pb.SoftwareUpdateStatus)
}

::google::protobuf::uint8* SoftwareUpdateStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecu.lapi.pb.SoftwareUpdateStatus)
  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .ecu.lapi.pb.SoftwareUpdateStatus.Error error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecu.lapi.pb.SoftwareUpdateStatus)
  return target;
}

int SoftwareUpdateStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ecu.lapi.pb.SoftwareUpdateStatus.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ecu.lapi.pb.SoftwareUpdateStatus.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .ecu.lapi.pb.SoftwareUpdateStatus.Error error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareUpdateStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftwareUpdateStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftwareUpdateStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftwareUpdateStatus::MergeFrom(const SoftwareUpdateStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftwareUpdateStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareUpdateStatus::CopyFrom(const SoftwareUpdateStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareUpdateStatus::IsInitialized() const {

  return true;
}

void SoftwareUpdateStatus::Swap(SoftwareUpdateStatus* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftwareUpdateStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftwareUpdateStatus_descriptor_;
  metadata.reflection = SoftwareUpdateStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace lapi
}  // namespace ecu

// @@protoc_insertion_point(global_scope)

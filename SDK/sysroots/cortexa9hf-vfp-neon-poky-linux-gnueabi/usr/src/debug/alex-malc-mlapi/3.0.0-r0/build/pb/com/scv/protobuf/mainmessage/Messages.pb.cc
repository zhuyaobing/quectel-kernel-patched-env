// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/scv/protobuf/mainmessage/Messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "com/scv/protobuf/mainmessage/Messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MainMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainMessage_RefTimeStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainMessage_RefTimeStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainMessage_Driver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainMessage_Driver_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MainMessage_TimeSrc_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MainMessage_DriverIdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto() {
  protobuf_AddDesc_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "com/scv/protobuf/mainmessage/Messages.proto");
  GOOGLE_CHECK(file != NULL);
  MainMessage_descriptor_ = file->message_type(0);
  static const int MainMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, originator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, content_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, driver_),
  };
  MainMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainMessage_descriptor_,
      MainMessage::default_instance_,
      MainMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainMessage));
  MainMessage_RefTimeStamp_descriptor_ = MainMessage_descriptor_->nested_type(0);
  static const int MainMessage_RefTimeStamp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_RefTimeStamp, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_RefTimeStamp, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_RefTimeStamp, powerup_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_RefTimeStamp, ticks_),
  };
  MainMessage_RefTimeStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainMessage_RefTimeStamp_descriptor_,
      MainMessage_RefTimeStamp::default_instance_,
      MainMessage_RefTimeStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_RefTimeStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_RefTimeStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainMessage_RefTimeStamp));
  MainMessage_Driver_descriptor_ = MainMessage_descriptor_->nested_type(1);
  static const int MainMessage_Driver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_Driver, identification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_Driver, identification_type_),
  };
  MainMessage_Driver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainMessage_Driver_descriptor_,
      MainMessage_Driver::default_instance_,
      MainMessage_Driver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_Driver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMessage_Driver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainMessage_Driver));
  MainMessage_TimeSrc_descriptor_ = MainMessage_descriptor_->enum_type(0);
  MainMessage_DriverIdType_descriptor_ = MainMessage_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainMessage_descriptor_, &MainMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainMessage_RefTimeStamp_descriptor_, &MainMessage_RefTimeStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainMessage_Driver_descriptor_, &MainMessage_Driver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto() {
  delete MainMessage::default_instance_;
  delete MainMessage_reflection_;
  delete MainMessage_RefTimeStamp::default_instance_;
  delete MainMessage_RefTimeStamp_reflection_;
  delete MainMessage_Driver::default_instance_;
  delete MainMessage_Driver_reflection_;
}

void protobuf_AddDesc_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+com/scv/protobuf/mainmessage/Messages."
    "proto\"\365\003\n\013MainMessage\022\017\n\007version\030\001 \001(\r\022\022"
    "\n\nmessage_id\030\002 \001(\004\022\022\n\noriginator\030\003 \001(\t\022\'"
    "\n\004time\030\010 \001(\0132\031.MainMessage.RefTimeStamp\022"
    "\022\n\ncontent_id\030\005 \001(\r\022\017\n\007payload\030\006 \001(\014\022#\n\006"
    "driver\030\007 \001(\0132\023.MainMessage.Driver\032d\n\014Ref"
    "TimeStamp\022\013\n\003utc\030\001 \001(\004\022!\n\003src\030\002 \001(\0162\024.Ma"
    "inMessage.TimeSrc\022\025\n\rpowerup_cycle\030\003 \001(\r"
    "\022\r\n\005ticks\030\004 \001(\004\032X\n\006Driver\022\026\n\016identificat"
    "ion\030\001 \001(\t\0226\n\023identification_type\030\002 \001(\0162\031"
    ".MainMessage.DriverIdType\">\n\007TimeSrc\022\013\n\007"
    "unknown\020\000\022\007\n\003gps\020\001\022\010\n\004dtco\020\002\022\007\n\003gsm\020\003\022\n\n"
    "\006server\020\004\":\n\014DriverIdType\022\026\n\022eu_tachogra"
    "ph_card\020\000\022\022\n\016driver_license\020\001B \n\034com.scv"
    ".protobuf.mainmessageH\001", 583);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "com/scv/protobuf/mainmessage/Messages.proto", &protobuf_RegisterTypes);
  MainMessage::default_instance_ = new MainMessage();
  MainMessage_RefTimeStamp::default_instance_ = new MainMessage_RefTimeStamp();
  MainMessage_Driver::default_instance_ = new MainMessage_Driver();
  MainMessage::default_instance_->InitAsDefaultInstance();
  MainMessage_RefTimeStamp::default_instance_->InitAsDefaultInstance();
  MainMessage_Driver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto {
  StaticDescriptorInitializer_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto() {
    protobuf_AddDesc_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto();
  }
} static_descriptor_initializer_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MainMessage_TimeSrc_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainMessage_TimeSrc_descriptor_;
}
bool MainMessage_TimeSrc_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MainMessage_TimeSrc MainMessage::unknown;
const MainMessage_TimeSrc MainMessage::gps;
const MainMessage_TimeSrc MainMessage::dtco;
const MainMessage_TimeSrc MainMessage::gsm;
const MainMessage_TimeSrc MainMessage::server;
const MainMessage_TimeSrc MainMessage::TimeSrc_MIN;
const MainMessage_TimeSrc MainMessage::TimeSrc_MAX;
const int MainMessage::TimeSrc_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MainMessage_DriverIdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainMessage_DriverIdType_descriptor_;
}
bool MainMessage_DriverIdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MainMessage_DriverIdType MainMessage::eu_tachograph_card;
const MainMessage_DriverIdType MainMessage::driver_license;
const MainMessage_DriverIdType MainMessage::DriverIdType_MIN;
const MainMessage_DriverIdType MainMessage::DriverIdType_MAX;
const int MainMessage::DriverIdType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MainMessage_RefTimeStamp::kUtcFieldNumber;
const int MainMessage_RefTimeStamp::kSrcFieldNumber;
const int MainMessage_RefTimeStamp::kPowerupCycleFieldNumber;
const int MainMessage_RefTimeStamp::kTicksFieldNumber;
#endif  // !_MSC_VER

MainMessage_RefTimeStamp::MainMessage_RefTimeStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MainMessage.RefTimeStamp)
}

void MainMessage_RefTimeStamp::InitAsDefaultInstance() {
}

MainMessage_RefTimeStamp::MainMessage_RefTimeStamp(const MainMessage_RefTimeStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MainMessage.RefTimeStamp)
}

void MainMessage_RefTimeStamp::SharedCtor() {
  _cached_size_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  src_ = 0;
  powerup_cycle_ = 0u;
  ticks_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainMessage_RefTimeStamp::~MainMessage_RefTimeStamp() {
  // @@protoc_insertion_point(destructor:MainMessage.RefTimeStamp)
  SharedDtor();
}

void MainMessage_RefTimeStamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainMessage_RefTimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainMessage_RefTimeStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainMessage_RefTimeStamp_descriptor_;
}

const MainMessage_RefTimeStamp& MainMessage_RefTimeStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto();
  return *default_instance_;
}

MainMessage_RefTimeStamp* MainMessage_RefTimeStamp::default_instance_ = NULL;

MainMessage_RefTimeStamp* MainMessage_RefTimeStamp::New() const {
  return new MainMessage_RefTimeStamp;
}

void MainMessage_RefTimeStamp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MainMessage_RefTimeStamp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(utc_, ticks_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainMessage_RefTimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MainMessage.RefTimeStamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 utc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src;
        break;
      }

      // optional .MainMessage.TimeSrc src = 2;
      case 2: {
        if (tag == 16) {
         parse_src:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MainMessage_TimeSrc_IsValid(value)) {
            set_src(static_cast< ::MainMessage_TimeSrc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_powerup_cycle;
        break;
      }

      // optional uint32 powerup_cycle = 3;
      case 3: {
        if (tag == 24) {
         parse_powerup_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &powerup_cycle_)));
          set_has_powerup_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ticks;
        break;
      }

      // optional uint64 ticks = 4;
      case 4: {
        if (tag == 32) {
         parse_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticks_)));
          set_has_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MainMessage.RefTimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MainMessage.RefTimeStamp)
  return false;
#undef DO_
}

void MainMessage_RefTimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MainMessage.RefTimeStamp)
  // optional uint64 utc = 1;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utc(), output);
  }

  // optional .MainMessage.TimeSrc src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->src(), output);
  }

  // optional uint32 powerup_cycle = 3;
  if (has_powerup_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->powerup_cycle(), output);
  }

  // optional uint64 ticks = 4;
  if (has_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ticks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MainMessage.RefTimeStamp)
}

::google::protobuf::uint8* MainMessage_RefTimeStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MainMessage.RefTimeStamp)
  // optional uint64 utc = 1;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utc(), target);
  }

  // optional .MainMessage.TimeSrc src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->src(), target);
  }

  // optional uint32 powerup_cycle = 3;
  if (has_powerup_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->powerup_cycle(), target);
  }

  // optional uint64 ticks = 4;
  if (has_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ticks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MainMessage.RefTimeStamp)
  return target;
}

int MainMessage_RefTimeStamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 utc = 1;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // optional .MainMessage.TimeSrc src = 2;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src());
    }

    // optional uint32 powerup_cycle = 3;
    if (has_powerup_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->powerup_cycle());
    }

    // optional uint64 ticks = 4;
    if (has_ticks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticks());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMessage_RefTimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainMessage_RefTimeStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainMessage_RefTimeStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainMessage_RefTimeStamp::MergeFrom(const MainMessage_RefTimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_powerup_cycle()) {
      set_powerup_cycle(from.powerup_cycle());
    }
    if (from.has_ticks()) {
      set_ticks(from.ticks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainMessage_RefTimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMessage_RefTimeStamp::CopyFrom(const MainMessage_RefTimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMessage_RefTimeStamp::IsInitialized() const {

  return true;
}

void MainMessage_RefTimeStamp::Swap(MainMessage_RefTimeStamp* other) {
  if (other != this) {
    std::swap(utc_, other->utc_);
    std::swap(src_, other->src_);
    std::swap(powerup_cycle_, other->powerup_cycle_);
    std::swap(ticks_, other->ticks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainMessage_RefTimeStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainMessage_RefTimeStamp_descriptor_;
  metadata.reflection = MainMessage_RefTimeStamp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MainMessage_Driver::kIdentificationFieldNumber;
const int MainMessage_Driver::kIdentificationTypeFieldNumber;
#endif  // !_MSC_VER

MainMessage_Driver::MainMessage_Driver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MainMessage.Driver)
}

void MainMessage_Driver::InitAsDefaultInstance() {
}

MainMessage_Driver::MainMessage_Driver(const MainMessage_Driver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MainMessage.Driver)
}

void MainMessage_Driver::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identification_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identification_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainMessage_Driver::~MainMessage_Driver() {
  // @@protoc_insertion_point(destructor:MainMessage.Driver)
  SharedDtor();
}

void MainMessage_Driver::SharedDtor() {
  if (identification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identification_;
  }
  if (this != default_instance_) {
  }
}

void MainMessage_Driver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainMessage_Driver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainMessage_Driver_descriptor_;
}

const MainMessage_Driver& MainMessage_Driver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto();
  return *default_instance_;
}

MainMessage_Driver* MainMessage_Driver::default_instance_ = NULL;

MainMessage_Driver* MainMessage_Driver::New() const {
  return new MainMessage_Driver;
}

void MainMessage_Driver::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_identification()) {
      if (identification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identification_->clear();
      }
    }
    identification_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainMessage_Driver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MainMessage.Driver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string identification = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identification().data(), this->identification().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "identification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_identification_type;
        break;
      }

      // optional .MainMessage.DriverIdType identification_type = 2;
      case 2: {
        if (tag == 16) {
         parse_identification_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MainMessage_DriverIdType_IsValid(value)) {
            set_identification_type(static_cast< ::MainMessage_DriverIdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MainMessage.Driver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MainMessage.Driver)
  return false;
#undef DO_
}

void MainMessage_Driver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MainMessage.Driver)
  // optional string identification = 1;
  if (has_identification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identification().data(), this->identification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identification(), output);
  }

  // optional .MainMessage.DriverIdType identification_type = 2;
  if (has_identification_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->identification_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MainMessage.Driver)
}

::google::protobuf::uint8* MainMessage_Driver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MainMessage.Driver)
  // optional string identification = 1;
  if (has_identification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identification().data(), this->identification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "identification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identification(), target);
  }

  // optional .MainMessage.DriverIdType identification_type = 2;
  if (has_identification_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->identification_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MainMessage.Driver)
  return target;
}

int MainMessage_Driver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string identification = 1;
    if (has_identification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identification());
    }

    // optional .MainMessage.DriverIdType identification_type = 2;
    if (has_identification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->identification_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMessage_Driver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainMessage_Driver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainMessage_Driver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainMessage_Driver::MergeFrom(const MainMessage_Driver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identification()) {
      set_identification(from.identification());
    }
    if (from.has_identification_type()) {
      set_identification_type(from.identification_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainMessage_Driver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMessage_Driver::CopyFrom(const MainMessage_Driver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMessage_Driver::IsInitialized() const {

  return true;
}

void MainMessage_Driver::Swap(MainMessage_Driver* other) {
  if (other != this) {
    std::swap(identification_, other->identification_);
    std::swap(identification_type_, other->identification_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainMessage_Driver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainMessage_Driver_descriptor_;
  metadata.reflection = MainMessage_Driver_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MainMessage::kVersionFieldNumber;
const int MainMessage::kMessageIdFieldNumber;
const int MainMessage::kOriginatorFieldNumber;
const int MainMessage::kTimeFieldNumber;
const int MainMessage::kContentIdFieldNumber;
const int MainMessage::kPayloadFieldNumber;
const int MainMessage::kDriverFieldNumber;
#endif  // !_MSC_VER

MainMessage::MainMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MainMessage)
}

void MainMessage::InitAsDefaultInstance() {
  time_ = const_cast< ::MainMessage_RefTimeStamp*>(&::MainMessage_RefTimeStamp::default_instance());
  driver_ = const_cast< ::MainMessage_Driver*>(&::MainMessage_Driver::default_instance());
}

MainMessage::MainMessage(const MainMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MainMessage)
}

void MainMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  message_id_ = GOOGLE_ULONGLONG(0);
  originator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = NULL;
  content_id_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainMessage::~MainMessage() {
  // @@protoc_insertion_point(destructor:MainMessage)
  SharedDtor();
}

void MainMessage::SharedDtor() {
  if (originator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete originator_;
  }
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (this != default_instance_) {
    delete time_;
    delete driver_;
  }
}

void MainMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainMessage_descriptor_;
}

const MainMessage& MainMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fscv_2fprotobuf_2fmainmessage_2fMessages_2eproto();
  return *default_instance_;
}

MainMessage* MainMessage::default_instance_ = NULL;

MainMessage* MainMessage::New() const {
  return new MainMessage;
}

void MainMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MainMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(version_, content_id_);
    message_id_ = GOOGLE_ULONGLONG(0);
    if (has_originator()) {
      if (originator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        originator_->clear();
      }
    }
    if (has_time()) {
      if (time_ != NULL) time_->::MainMessage_RefTimeStamp::Clear();
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_->clear();
      }
    }
    if (has_driver()) {
      if (driver_ != NULL) driver_->::MainMessage_Driver::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MainMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }

      // optional uint64 message_id = 2;
      case 2: {
        if (tag == 16) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_originator;
        break;
      }

      // optional string originator = 3;
      case 3: {
        if (tag == 26) {
         parse_originator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originator().data(), this->originator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "originator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_content_id;
        break;
      }

      // optional uint32 content_id = 5;
      case 5: {
        if (tag == 40) {
         parse_content_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_id_)));
          set_has_content_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_payload;
        break;
      }

      // optional bytes payload = 6;
      case 6: {
        if (tag == 50) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_driver;
        break;
      }

      // optional .MainMessage.Driver driver = 7;
      case 7: {
        if (tag == 58) {
         parse_driver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_driver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_time;
        break;
      }

      // optional .MainMessage.RefTimeStamp time = 8;
      case 8: {
        if (tag == 66) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MainMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MainMessage)
  return false;
#undef DO_
}

void MainMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MainMessage)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint64 message_id = 2;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->message_id(), output);
  }

  // optional string originator = 3;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originator().data(), this->originator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->originator(), output);
  }

  // optional uint32 content_id = 5;
  if (has_content_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->content_id(), output);
  }

  // optional bytes payload = 6;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->payload(), output);
  }

  // optional .MainMessage.Driver driver = 7;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->driver(), output);
  }

  // optional .MainMessage.RefTimeStamp time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MainMessage)
}

::google::protobuf::uint8* MainMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MainMessage)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint64 message_id = 2;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->message_id(), target);
  }

  // optional string originator = 3;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originator().data(), this->originator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->originator(), target);
  }

  // optional uint32 content_id = 5;
  if (has_content_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->content_id(), target);
  }

  // optional bytes payload = 6;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->payload(), target);
  }

  // optional .MainMessage.Driver driver = 7;
  if (has_driver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->driver(), target);
  }

  // optional .MainMessage.RefTimeStamp time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MainMessage)
  return target;
}

int MainMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint64 message_id = 2;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->message_id());
    }

    // optional string originator = 3;
    if (has_originator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originator());
    }

    // optional .MainMessage.RefTimeStamp time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional uint32 content_id = 5;
    if (has_content_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_id());
    }

    // optional bytes payload = 6;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional .MainMessage.Driver driver = 7;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->driver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainMessage::MergeFrom(const MainMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_originator()) {
      set_originator(from.originator());
    }
    if (from.has_time()) {
      mutable_time()->::MainMessage_RefTimeStamp::MergeFrom(from.time());
    }
    if (from.has_content_id()) {
      set_content_id(from.content_id());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_driver()) {
      mutable_driver()->::MainMessage_Driver::MergeFrom(from.driver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMessage::CopyFrom(const MainMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMessage::IsInitialized() const {

  return true;
}

void MainMessage::Swap(MainMessage* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(message_id_, other->message_id_);
    std::swap(originator_, other->originator_);
    std::swap(time_, other->time_);
    std::swap(content_id_, other->content_id_);
    std::swap(payload_, other->payload_);
    std::swap(driver_, other->driver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainMessage_descriptor_;
  metadata.reflection = MainMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

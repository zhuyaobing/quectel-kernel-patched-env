# Configuration file for backendproxy
#
#

# =================================================================
# Local MQTT broker onfiguration
# =================================================================
client_name = backendproxy
host = localhost
port = 1883


# =================================================================
# Remote backend server MQTT broker configuration
# =================================================================
backend.client_name = <HWVERSION><HWSERIALNUMBER>
backend.host = connect.devgateway.eu
backend.port = 8883
backend.keepalive = 60
backend.login_username = v3
backend.login_password = vcp

# Override LATAM specific backend host
# latam.backend.host is used instead of backend.host IF parameter
# SystemSupplierECUHWVersionNumber indicates we are running on a LATAM board.
# Default: connect.rioconnect.eu
#latam.backend.host = connect.rioconnect.eu

# Set the clean-session flag to false to instruct the Backend MQTT broker
# to store all outgoing messages when the connection is down and resend them
# once the client (TBMVCM) is reconnected.
#
# Default: true
backend.clean_session = false

# Backend connection lost hysteresis in seconds
# Number of seconds before the green LED is switched off after the
# connection to the backend has been lost
#
# Please note that the total time from the actual interruption will
# differ depending on the Linux network subsystem, modem manager and
# configured keepalive time.
#
# Default: 900 seconds (15 minutes)
backend.conlost.hysteresis = 900

# Topic that beproxy receives messages from the backend.
backend.topic.subscribe = <HWSERIALNUMBER>/<HWVERSION>

# Device originator added into MainMessage VCP
backend.originator = <HWVERSION>:<HWSERIALNUMBER>

# =================================================================
# Force TBM / VCM hardware information
# =================================================================

# For development and debugging purpose it is possible to override
# the internal ECU variables which is used to generate the
# MQTT client ID, originator field and backend subscription topics

# Do NOT set these manualy on a production unit!

# Force the hardware version (ECU variable: hwversion)
# Can be set to any string but should be either 'tbm' or 'vcm'
#hw.version = tbm

# Force the serial number (ECU variable: serialnumber)
# Can be set to any string, but should only contain numbers
#hw.serialnumber = 1712310123


# ==================================================================
# TLS configuration of the backend
# ==================================================================

# Set this option to enable usage of TLS
#  if false the backend.tls.* options won't be used
backend.tls.enable = true

# Path to the system CA-path (must have hash links, see man c_reshash)
backend.tls.capath = /usr/share/ca-certificates/

# Path to the CA certificate (normally not needed if the ca is available in the store, capath)
#backend.tls.cafile = /usr/share/ca-certificates/truck-sa-root1-device1.chain.pem

# If mutual is set then client certificate and key must be available
backend.tls.mutual = true

# Path to the client certificate
#backend.tls.certfile = /dev/shm/secure_storage/.cert

# Path to the client key
#backend.tls.keyfile = /dev/shm/secure_storage/.key

# Path to the client key passphrase
#backend.tls.key.pwd = /dev/shm/secure_storage/.pwd

# Indicate how the client key passphrase is encrupted, either 'caam' or 'openssl'
#backend.tls.key.pwd.encryption_method = caam

# TLS version
# Available options; tlsv1, tlsv1.1, tlsv1.2. If not set defaulted to tlsv1.2
#backend.tls.version = tlsv1.1

# List of available ciphers separated by ':'. See "openssl ciphers" for further
# information. If not set the default openssl ciphers are available
# Configured is suites recommended by BSI
backend.tls.ciphers = ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256


# ==================================================================
# Message Send Queue parameters
# ==================================================================

# Maximum number of messages in Send queue
# When the send queue max is reached, the oldest message will be dropped
# regardless of priority
# It is not recommended to set it over 20000 to avoid running out of disk
# space if all of them are KL30 robust
# Default: 20000
send_queue.max_messages = 20000

# Maximum message timeout in seconds
# Enforced max of the timeout a client is allowed to set.
# Any timeout value higher than max_timeout will be trimmed down.
# Default: 604800 = 1 week
send_queue.max_timeout = 604800

# KL15 robust grace period in seconds
# Grace period to wait after ignition off (KL15:off) before messages flagged
# as KL15 robust (default true) are saved to non-volatile memory if they have
# not yet been sent, received and acknowledged by the backend server.
# This delay is to give applications time to send one last message when exiting
# Default: 30
kl15_robust.grace_period = 30

# KL30 robust grace period in seconds
# Grace period before a message flagged KL30 robust (default false) is saved to non-volatile
# memory if it has not yet been sent, received and acknowledged by the backend server.
# ALERT! Don't set this value too low as it causes unnecessary wear on the flash.
# Default: 5
kl30_robust.grace_period = 5

# KL30 robust send buffer directory
# Path to the robust send buffer directory (must exist!)
kl30_robust.path = /var/spool/backendproxy/mq


# ==================================================================
# Application systemd target
# ==================================================================

# If backend.clean_session is set to false (above) we need to make
# sure all applications that expect messages from the backend are
# started and ready to receive the message backlog that the backend
# server will send upon connect. These applications should be part of
# a systemd target that the backend proxy can wait for.

# Systemd target to wait for before establishing the backend connection
# Disable waiting by setting application.timeout = 0 (see below)
# Default: alex.target
application.target = alex.target

# Maximum waiting time for application.target to be reached, in seconds
# Set to '0' to disable waiting for application target
# Default: 0   (Disabled)
application.timeout = 60

# ==================================================================

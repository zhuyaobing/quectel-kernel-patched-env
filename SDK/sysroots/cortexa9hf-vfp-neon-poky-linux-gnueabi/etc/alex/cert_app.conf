client_name = cert_app
host = localhost
port = 1883

# Require valid system time before handling certificates
#
# If certificates does not have a validity period from start of EPOCH
# (1970-01-01 00:00.00) the system needs to wait for a valid system time
# before handling certificates, otherwise cert. verification will fail,
# leading to repeatedly generating new keys and CSR:s.
#
# Default: false
#require_valid_systime = true

###############################################################################
# Number of times a complete signing process is retried.
# This also regenerates the client certificates.
# Cert_app will exit when the max retries is reached.
cert.process.retry_max = 4

# Number of seconds before a complete signing process is retried.
# Default: 900 (15 minutes)
cert.process.retry_time = 900

### CSR request
# Number of times a new CSR exchange requests is restarted
# E.g. if the server is unreachable
cert.exchange.request.retry_max = 3

# Number of seconds before a new CSR exchange request starts
# E.g. if the server is unreachable
cert.exchange.request.retry_time = 30

### CSR result
# Number of times to try and fetch the
# pending result of a CSR exchange request
cert.exchange.result.retry_max = 9

# Number of seconds before each try to fetch the
# pending result of a CSR exchange request
cert.exchange.result.retry_time = 10

###############################################################################

# CA path to search for CA. Needs hash symlinks
cert_app.ca_path = /usr/share/ca-certificates/

# Select specific CA pem file
cert.exchange.ca_file = /usr/share/ca-certificates/truck-sa-root1-device1.chain.pem

# Verify server's authenticity
cert.exchange.ssl.verifypeer = true

# Verify the CN of the server certificate is the one we're connecting to
cert.exchange.ssl.verifyhost = true

# List of available ciphers separated by ':'. See "openssl ciphers" for further
# information. If not set the default openssl ciphers are available
# Configured is suites recommended by BSI
cert.exchange.tls.ciphers = ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256

# Endpoint of the backend signing service, full uri including port
csr.request.url = https://init.devgateway.eu/api/caService/v1/csr/
csr.result.url = https://init.devgateway.eu/api/caService/v1/csr/


# Override LATAM specific endpoints of the backend signing service, full uri including port
# latam.csr.*.url is used instead of csr.*.url IF parameter
# SystemSupplierECUHWVersionNumber indicates we are running on a LATAM board.
#
# Default: https://init.rioconnect.eu/api/caService/v1/csr/
#latam.csr.request.url = https://init.rioconnect.eu/api/caService/v1/csr/
#
# Default: https://init.rioconnect.eu/api/caService/v1/csr/
#latam.csr.result.url = https://init.rioconnect.eu/api/caService/v1/csr/

# CSR subjects of generated certificates
# Country must be two char country code
csr.subject.country = DE
csr.subject.state = BAVARIA
csr.subject.organization = RIO
#csr.subject.location =
#csr.subject.org_unit =

###############################################################################

# Number of seconds to wait for storage data to arrive from secure storage
secure.storage.nor.timeout = 20

# mqtt topic to retrieve artifacts from NOR memory
secure.storage.nor.topic.get = system/vard/secstore/getmaster
# mqtt topic to persist artifacts in NOR memory
secure.storage.nor.topic.set = system/vard/secstore/setmaster

# Path to where the plain text PEM files are published (TMP file system)
secure.storage.tmp_path = /dev/shm/secure_storage/

# If .cert and .key  artifacts must be deployed to TPA partition
#secure.storage.deploy_tpa = true

# Path to deploy artifacts visible by TPA partition, only used if deploy_tpa is set to true
secure.storage.tpa_path = /tmp/shared/

# If the ca_file is set this pem file is used for verification
# otherwise the CA will be searched for in the ca-path
# given in cert_app.ca_path
#secure.storage.cert_verification.ca_file = /usr/share/ca-certificates/truck-sa-root1-device1.chain.pem

# Where encrypted artifacts must be persisted. The other option is FS
secure.storage = NOR

# If secure.storage is set to FS, the below path will hold the encrypted artifacts
secure.storage.fs.path = /var/secure_storage/

# TLS might be required depending on the certificate being signed
csr.request.tls = false

# RSA key should be generated with OEAP padding scheme
csr.key.oaep = false


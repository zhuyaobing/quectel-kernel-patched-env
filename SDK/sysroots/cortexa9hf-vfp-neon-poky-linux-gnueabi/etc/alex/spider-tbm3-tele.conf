### Alexandra spider config file ###

server_mode=MASTER # SINGLE, MASTER (default) or SLAVE
    # SINGLE - Independent system. Ex: VCM, E4C.
    # MASTER - Controlling another system. Ex: TBM3-Telematics.
    # SLAVE - Controlled by another system. Ex: TBM3-TPA.

#timeout_operating=60 s
#timeout_eod=10 s
#timeout_eod_ack=3 s
#timeout_shut_down=60 s
#timeout_peer_restarted=30 s
#timeout_shutdown_apps=12 s
#timeout_shutdown_core=3000 ms
#timeout_restart_core=2000 ms

#loglevel=DEBUG                     # One of: EMERG ALERT CRIT ERROR WARNING NOTICE INFO DEBUG
#verbose=1                          # 1 means extra verbose output, implies loglevel=DEBUG
#log_modules=ALL, -CSP_LOG, -ipc, -lapi # Read below!

    ### ### Documentation of log_modules ### ###
    # Default value is ALL.
    # Prefix - (minus) means disabling of that module; example: ALL, -Executor, -lapi
    # Prefix Trace. together with loglevel=DEBUG means that extra trace is turned on for that module.
    # Note that turning on for instance Trace.Ipc doesn't also implicitly turn on Ipc.
    # Special module ALL enables everything except Trace. Additional following entries
    # with minus are then used to disable modules.
    # Separate with commas and feel free to add spaces for readability.
    # Libs are lower case: lapi.com.mqttclient, ipc. External log source is UPPER CASE: CSP_LOG, HW_LOG.
    # Spider modules are Mixed Case (even acronyms like USB!): Ipc.Ssm.Write, Usb, Executor, SsmWatchdog
    #
    # Examples:
    #   ALL,-CSP_LOG,-lapi,-ipc,-Ipc,Trace.Mqtt.Publish ## ipc=ipclib, Ipc=Spider's IPC module
    #   ALL, Trace ## If also loglevel=DEBUG this gives max logging which will exhaust system - not recommended!
    #   Ipc.Csp, Trace.Ipc.Tpa.Write ##
    #   ALL, -Ipc, Ipc.Csp ## First all is enabled, then everything about Ipc is disabled and
    #      finally just Ipc.Csp (including its sub modules Read and Write) is enabled.
    #
    # Individually controlled modules (modules that can be enabled/disabled):
    #   Ipc
    #   Ipc.Csp
    #   Ipc.Csp.Read         T
    #   Ipc.Csp.Write        T
    #   Ipc.Tpa
    #   Ipc.Tpa.Read         T
    #   Ipc.Tpa.Write        T
    #   Ipc.Telematics
    #   Ipc.Telematics.Read  T
    #   Ipc.Telematics.Write T
    #   Ipc.Ssm
    #   Ipc.Ssm.Read         T
    #   Ipc.Ssm.Write        T
    #   Mqtt
    #   Mqtt.Publish         T
    #   Mqtt.Subscribe       T
    #   Mqtt.Receive         T
    #   Mqtt.Encoding        T
    #   Executor             T
    #   SignalReceiver       T
    #   AppInfo
    #   Cert
    #   LogExtractor
    #   SsmWatchdog          T
    #   SwUpdater
    #   Usb
    #   ModemWD
    #
    #   CSP_LOG
    #   HW_LOG
    #
    #   lapi (a sub structure exists, see lapi doc!)
    #   ipc (a sub structure exists, see ipclib doc!)
    #
    #   T = Trace can be turned on by turning on Trace.[log module], for instance
    #   Trace.Ipc.Csp.Read. Trace shows the complete data flow on the respective
    #   communications channel. On Executor it shows some extra trace about accesses
    #   to file system and systemd. On SignalReceiver it shows some higher level
    #   interpretation about received external (via IPC and MQTT) signals.
    #
    ### ### ### ###
